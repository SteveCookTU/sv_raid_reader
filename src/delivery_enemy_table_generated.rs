// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use core::cmp::Ordering;
use core::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MIN_BALL_TYPE: i32 = 0;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MAX_BALL_TYPE: i32 = 26;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_BALL_TYPE: [BallType; 27] = [
    BallType::NONE,
    BallType::MASUTAABOORU,
    BallType::HAIPAABOORU,
    BallType::SUUPAABOORU,
    BallType::MONSUTAABOORU,
    BallType::SAFARIBOORU,
    BallType::NETTOBOORU,
    BallType::DAIBUBOORU,
    BallType::NESUTOBOORU,
    BallType::RIPIITOBOORU,
    BallType::TAIMAABOORU,
    BallType::GOOZYASUBOORU,
    BallType::PUREMIABOORU,
    BallType::DAAKUBOORU,
    BallType::HIIRUBOORU,
    BallType::KUIKKUBOORU,
    BallType::PURESYASUBOORU,
    BallType::SUPIIDOBOORU,
    BallType::REBERUBOORU,
    BallType::RUAABOORU,
    BallType::HEBIIBOORU,
    BallType::RABURABUBOORU,
    BallType::HURENDOBOORU,
    BallType::MUUNBOORU,
    BallType::KONPEBOORU,
    BallType::DORIIMUBOORU,
    BallType::URUTORABOORU,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct BallType(pub i32);
#[allow(non_upper_case_globals)]
impl BallType {
    pub const NONE: Self = Self(0);
    pub const MASUTAABOORU: Self = Self(1);
    pub const HAIPAABOORU: Self = Self(2);
    pub const SUUPAABOORU: Self = Self(3);
    pub const MONSUTAABOORU: Self = Self(4);
    pub const SAFARIBOORU: Self = Self(5);
    pub const NETTOBOORU: Self = Self(6);
    pub const DAIBUBOORU: Self = Self(7);
    pub const NESUTOBOORU: Self = Self(8);
    pub const RIPIITOBOORU: Self = Self(9);
    pub const TAIMAABOORU: Self = Self(10);
    pub const GOOZYASUBOORU: Self = Self(11);
    pub const PUREMIABOORU: Self = Self(12);
    pub const DAAKUBOORU: Self = Self(13);
    pub const HIIRUBOORU: Self = Self(14);
    pub const KUIKKUBOORU: Self = Self(15);
    pub const PURESYASUBOORU: Self = Self(16);
    pub const SUPIIDOBOORU: Self = Self(17);
    pub const REBERUBOORU: Self = Self(18);
    pub const RUAABOORU: Self = Self(19);
    pub const HEBIIBOORU: Self = Self(20);
    pub const RABURABUBOORU: Self = Self(21);
    pub const HURENDOBOORU: Self = Self(22);
    pub const MUUNBOORU: Self = Self(23);
    pub const KONPEBOORU: Self = Self(24);
    pub const DORIIMUBOORU: Self = Self(25);
    pub const URUTORABOORU: Self = Self(26);

    pub const ENUM_MIN: i32 = 0;
    pub const ENUM_MAX: i32 = 26;
    pub const ENUM_VALUES: &'static [Self] = &[
        Self::NONE,
        Self::MASUTAABOORU,
        Self::HAIPAABOORU,
        Self::SUUPAABOORU,
        Self::MONSUTAABOORU,
        Self::SAFARIBOORU,
        Self::NETTOBOORU,
        Self::DAIBUBOORU,
        Self::NESUTOBOORU,
        Self::RIPIITOBOORU,
        Self::TAIMAABOORU,
        Self::GOOZYASUBOORU,
        Self::PUREMIABOORU,
        Self::DAAKUBOORU,
        Self::HIIRUBOORU,
        Self::KUIKKUBOORU,
        Self::PURESYASUBOORU,
        Self::SUPIIDOBOORU,
        Self::REBERUBOORU,
        Self::RUAABOORU,
        Self::HEBIIBOORU,
        Self::RABURABUBOORU,
        Self::HURENDOBOORU,
        Self::MUUNBOORU,
        Self::KONPEBOORU,
        Self::DORIIMUBOORU,
        Self::URUTORABOORU,
    ];
    /// Returns the variant's name or "" if unknown.
    pub fn variant_name(self) -> Option<&'static str> {
        match self {
            Self::NONE => Some("NONE"),
            Self::MASUTAABOORU => Some("MASUTAABOORU"),
            Self::HAIPAABOORU => Some("HAIPAABOORU"),
            Self::SUUPAABOORU => Some("SUUPAABOORU"),
            Self::MONSUTAABOORU => Some("MONSUTAABOORU"),
            Self::SAFARIBOORU => Some("SAFARIBOORU"),
            Self::NETTOBOORU => Some("NETTOBOORU"),
            Self::DAIBUBOORU => Some("DAIBUBOORU"),
            Self::NESUTOBOORU => Some("NESUTOBOORU"),
            Self::RIPIITOBOORU => Some("RIPIITOBOORU"),
            Self::TAIMAABOORU => Some("TAIMAABOORU"),
            Self::GOOZYASUBOORU => Some("GOOZYASUBOORU"),
            Self::PUREMIABOORU => Some("PUREMIABOORU"),
            Self::DAAKUBOORU => Some("DAAKUBOORU"),
            Self::HIIRUBOORU => Some("HIIRUBOORU"),
            Self::KUIKKUBOORU => Some("KUIKKUBOORU"),
            Self::PURESYASUBOORU => Some("PURESYASUBOORU"),
            Self::SUPIIDOBOORU => Some("SUPIIDOBOORU"),
            Self::REBERUBOORU => Some("REBERUBOORU"),
            Self::RUAABOORU => Some("RUAABOORU"),
            Self::HEBIIBOORU => Some("HEBIIBOORU"),
            Self::RABURABUBOORU => Some("RABURABUBOORU"),
            Self::HURENDOBOORU => Some("HURENDOBOORU"),
            Self::MUUNBOORU => Some("MUUNBOORU"),
            Self::KONPEBOORU => Some("KONPEBOORU"),
            Self::DORIIMUBOORU => Some("DORIIMUBOORU"),
            Self::URUTORABOORU => Some("URUTORABOORU"),
            _ => None,
        }
    }
}
impl core::fmt::Debug for BallType {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        if let Some(name) = self.variant_name() {
            f.write_str(name)
        } else {
            f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
        }
    }
}
impl<'a> flatbuffers::Follow<'a> for BallType {
    type Inner = Self;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
        Self(b)
    }
}

impl flatbuffers::Push for BallType {
    type Output = BallType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for BallType {
    type Scalar = i32;
    #[inline]
    fn to_little_endian(self) -> i32 {
        self.0.to_le()
    }
    #[inline]
    #[allow(clippy::wrong_self_convention)]
    fn from_little_endian(v: i32) -> Self {
        let b = i32::from_le(v);
        Self(b)
    }
}

impl<'a> flatbuffers::Verifiable for BallType {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        i32::run_verifier(v, pos)
    }
}

impl flatbuffers::SimpleToVerifyInSlice for BallType {}
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MIN_GEM_TYPE: i32 = 0;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MAX_GEM_TYPE: i32 = 19;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_GEM_TYPE: [GemType; 20] = [
    GemType::DEFAULT,
    GemType::RANDOM,
    GemType::NORMAL,
    GemType::KAKUTOU,
    GemType::HIKOU,
    GemType::DOKU,
    GemType::JIMEN,
    GemType::IWA,
    GemType::MUSHI,
    GemType::GHOST,
    GemType::HAGANE,
    GemType::HONOO,
    GemType::MIZU,
    GemType::KUSA,
    GemType::DENKI,
    GemType::ESPER,
    GemType::KOORI,
    GemType::DRAGON,
    GemType::AKU,
    GemType::FAIRY,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct GemType(pub i32);
#[allow(non_upper_case_globals)]
impl GemType {
    pub const DEFAULT: Self = Self(0);
    pub const RANDOM: Self = Self(1);
    pub const NORMAL: Self = Self(2);
    pub const KAKUTOU: Self = Self(3);
    pub const HIKOU: Self = Self(4);
    pub const DOKU: Self = Self(5);
    pub const JIMEN: Self = Self(6);
    pub const IWA: Self = Self(7);
    pub const MUSHI: Self = Self(8);
    pub const GHOST: Self = Self(9);
    pub const HAGANE: Self = Self(10);
    pub const HONOO: Self = Self(11);
    pub const MIZU: Self = Self(12);
    pub const KUSA: Self = Self(13);
    pub const DENKI: Self = Self(14);
    pub const ESPER: Self = Self(15);
    pub const KOORI: Self = Self(16);
    pub const DRAGON: Self = Self(17);
    pub const AKU: Self = Self(18);
    pub const FAIRY: Self = Self(19);

    pub const ENUM_MIN: i32 = 0;
    pub const ENUM_MAX: i32 = 19;
    pub const ENUM_VALUES: &'static [Self] = &[
        Self::DEFAULT,
        Self::RANDOM,
        Self::NORMAL,
        Self::KAKUTOU,
        Self::HIKOU,
        Self::DOKU,
        Self::JIMEN,
        Self::IWA,
        Self::MUSHI,
        Self::GHOST,
        Self::HAGANE,
        Self::HONOO,
        Self::MIZU,
        Self::KUSA,
        Self::DENKI,
        Self::ESPER,
        Self::KOORI,
        Self::DRAGON,
        Self::AKU,
        Self::FAIRY,
    ];
    /// Returns the variant's name or "" if unknown.
    pub fn variant_name(self) -> Option<&'static str> {
        match self {
            Self::DEFAULT => Some("DEFAULT"),
            Self::RANDOM => Some("RANDOM"),
            Self::NORMAL => Some("NORMAL"),
            Self::KAKUTOU => Some("KAKUTOU"),
            Self::HIKOU => Some("HIKOU"),
            Self::DOKU => Some("DOKU"),
            Self::JIMEN => Some("JIMEN"),
            Self::IWA => Some("IWA"),
            Self::MUSHI => Some("MUSHI"),
            Self::GHOST => Some("GHOST"),
            Self::HAGANE => Some("HAGANE"),
            Self::HONOO => Some("HONOO"),
            Self::MIZU => Some("MIZU"),
            Self::KUSA => Some("KUSA"),
            Self::DENKI => Some("DENKI"),
            Self::ESPER => Some("ESPER"),
            Self::KOORI => Some("KOORI"),
            Self::DRAGON => Some("DRAGON"),
            Self::AKU => Some("AKU"),
            Self::FAIRY => Some("FAIRY"),
            _ => None,
        }
    }
}
impl core::fmt::Debug for GemType {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        if let Some(name) = self.variant_name() {
            f.write_str(name)
        } else {
            f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
        }
    }
}
impl<'a> flatbuffers::Follow<'a> for GemType {
    type Inner = Self;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
        Self(b)
    }
}

impl flatbuffers::Push for GemType {
    type Output = GemType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for GemType {
    type Scalar = i32;
    #[inline]
    fn to_little_endian(self) -> i32 {
        self.0.to_le()
    }
    #[inline]
    #[allow(clippy::wrong_self_convention)]
    fn from_little_endian(v: i32) -> Self {
        let b = i32::from_le(v);
        Self(b)
    }
}

impl<'a> flatbuffers::Verifiable for GemType {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        i32::run_verifier(v, pos)
    }
}

impl flatbuffers::SimpleToVerifyInSlice for GemType {}
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MIN_ITEM_ID: i32 = 0;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MAX_ITEM_ID: i32 = 2396;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ITEM_ID: [ItemID; 848] = [
    ItemID::ITEMID_NONE,
    ItemID::ITEMID_MASUTAABOORU,
    ItemID::ITEMID_HAIPAABOORU,
    ItemID::ITEMID_SUUPAABOORU,
    ItemID::ITEMID_MONSUTAABOORU,
    ItemID::ITEMID_SAFARIBOORU,
    ItemID::ITEMID_NETTOBOORU,
    ItemID::ITEMID_DAIBUBOORU,
    ItemID::ITEMID_NESUTOBOORU,
    ItemID::ITEMID_RIPIITOBOORU,
    ItemID::ITEMID_TAIMAABOORU,
    ItemID::ITEMID_GOOZYASUBOORU,
    ItemID::ITEMID_PUREMIABOORU,
    ItemID::ITEMID_DAAKUBOORU,
    ItemID::ITEMID_HIIRUBOORU,
    ItemID::ITEMID_KUIKKUBOORU,
    ItemID::ITEMID_KIZUGUSURI,
    ItemID::ITEMID_DOKUKESI,
    ItemID::ITEMID_YAKEDONAOSI,
    ItemID::ITEMID_KOORINAOSI,
    ItemID::ITEMID_NEMUKEZAMASI,
    ItemID::ITEMID_MAHINAOSI,
    ItemID::ITEMID_KAIHUKUNOKUSURI,
    ItemID::ITEMID_MANTANNOKUSURI,
    ItemID::ITEMID_SUGOIKIZUGUSURI,
    ItemID::ITEMID_IIKIZUGUSURI,
    ItemID::ITEMID_NANDEMONAOSI,
    ItemID::ITEMID_GENKINOKAKERA,
    ItemID::ITEMID_GENKINOKATAMARI,
    ItemID::ITEMID_OISIIMIZU,
    ItemID::ITEMID_SAIKOSOODA,
    ItemID::ITEMID_MIKKUSUORE,
    ItemID::ITEMID_MOOMOOMIRUKU,
    ItemID::ITEMID_TIKARANOKONA,
    ItemID::ITEMID_TIKARANONEKKO,
    ItemID::ITEMID_BANNOUGONA,
    ItemID::ITEMID_HUKKATUSOU,
    ItemID::ITEMID_PIIPIIEIDO,
    ItemID::ITEMID_PIIPIIRIKABAA,
    ItemID::ITEMID_PIIPIIEIDAA,
    ItemID::ITEMID_PIIPIIMAKKUSU,
    ItemID::ITEMID_MAKKUSUAPPU,
    ItemID::ITEMID_TAURIN,
    ItemID::ITEMID_BUROMUHEKISIN,
    ItemID::ITEMID_INDOMETASIN,
    ItemID::ITEMID_RIZOTIUMU,
    ItemID::ITEMID_HUSIGINAAME,
    ItemID::ITEMID_POINTOAPPU,
    ItemID::ITEMID_KITOSAN,
    ItemID::ITEMID_POINTOMAKKUSU,
    ItemID::ITEMID_EFEKUTOGAADO,
    ItemID::ITEMID_KURITHIKATTO,
    ItemID::ITEMID_PURASUPAWAA,
    ItemID::ITEMID_DHIFENDAA,
    ItemID::ITEMID_SUPIIDAA,
    ItemID::ITEMID_YOKUATAARU,
    ItemID::ITEMID_SUPESYARUAPPU,
    ItemID::ITEMID_SUPESYARUGAADO,
    ItemID::ITEMID_PIPPININGYOU,
    ItemID::ITEMID_TAIYOUNOISI,
    ItemID::ITEMID_TUKINOISI,
    ItemID::ITEMID_HONOONOISI,
    ItemID::ITEMID_KAMINARINOISI,
    ItemID::ITEMID_MIZUNOISI,
    ItemID::ITEMID_RIIHUNOISI,
    ItemID::ITEMID_TIISANAKINOKO,
    ItemID::ITEMID_OOKINAKINOKO,
    ItemID::ITEMID_SINZYU,
    ItemID::ITEMID_OOKINASINZYU,
    ItemID::ITEMID_HOSINOSUNA,
    ItemID::ITEMID_HOSINOKAKERA,
    ItemID::ITEMID_KINNOTAMA,
    ItemID::ITEMID_AMAIMITU,
    ItemID::ITEMID_KITYOUNAHONE,
    ItemID::ITEMID_HIKARINOISI,
    ItemID::ITEMID_YAMINOISI,
    ItemID::ITEMID_MEZAMEISI,
    ItemID::ITEMID_MANMARUISI,
    ItemID::ITEMID_HAKKINDAMA,
    ItemID::ITEMID_KONGOUDAMA,
    ItemID::ITEMID_SIRATAMA,
    ItemID::ITEMID_KURABONOMI,
    ItemID::ITEMID_KAGONOMI,
    ItemID::ITEMID_MOMONNOMI,
    ItemID::ITEMID_TIIGONOMI,
    ItemID::ITEMID_NANASINOMI,
    ItemID::ITEMID_HIMERINOMI,
    ItemID::ITEMID_ORENNOMI,
    ItemID::ITEMID_KIINOMI,
    ItemID::ITEMID_RAMUNOMI,
    ItemID::ITEMID_OBONNOMI,
    ItemID::ITEMID_FIRANOMI,
    ItemID::ITEMID_UINOMI,
    ItemID::ITEMID_MAGONOMI,
    ItemID::ITEMID_BANZINOMI,
    ItemID::ITEMID_IANOMI,
    ItemID::ITEMID_ZAROKUNOMI,
    ItemID::ITEMID_NEKOBUNOMI,
    ItemID::ITEMID_TAPORUNOMI,
    ItemID::ITEMID_ROMENOMI,
    ItemID::ITEMID_UBUNOMI,
    ItemID::ITEMID_MATOMANOMI,
    ItemID::ITEMID_OKKANOMI,
    ItemID::ITEMID_ITOKENOMI,
    ItemID::ITEMID_SOKUNONOMI,
    ItemID::ITEMID_RINDONOMI,
    ItemID::ITEMID_YATHENOMI,
    ItemID::ITEMID_YOPUNOMI,
    ItemID::ITEMID_BIAANOMI,
    ItemID::ITEMID_SYUKANOMI,
    ItemID::ITEMID_BAKOUNOMI,
    ItemID::ITEMID_UTANNOMI,
    ItemID::ITEMID_TANGANOMI,
    ItemID::ITEMID_YOROGINOMI,
    ItemID::ITEMID_KASIBUNOMI,
    ItemID::ITEMID_HABANNOMI,
    ItemID::ITEMID_NAMONOMI,
    ItemID::ITEMID_RIRIBANOMI,
    ItemID::ITEMID_HOZUNOMI,
    ItemID::ITEMID_TIIRANOMI,
    ItemID::ITEMID_RYUGANOMI,
    ItemID::ITEMID_KAMURANOMI,
    ItemID::ITEMID_YATAPINOMI,
    ItemID::ITEMID_ZUANOMI,
    ItemID::ITEMID_SANNOMI,
    ItemID::ITEMID_SUTAANOMI,
    ItemID::ITEMID_NAZONOMI,
    ItemID::ITEMID_MIKURUNOMI,
    ItemID::ITEMID_IBANNOMI,
    ItemID::ITEMID_ZYAPONOMI,
    ItemID::ITEMID_RENBUNOMI,
    ItemID::ITEMID_HIKARINOKONA,
    ItemID::ITEMID_SIROIHAABU,
    ItemID::ITEMID_SENSEINOTUME,
    ItemID::ITEMID_YASURAGINOSUZU,
    ItemID::ITEMID_MENTARUHAABU,
    ItemID::ITEMID_KODAWARIHATIMAKI,
    ItemID::ITEMID_OUZYANOSIRUSI,
    ItemID::ITEMID_GINNOKONA,
    ItemID::ITEMID_OMAMORIKOBAN,
    ItemID::ITEMID_KEMURIDAMA,
    ItemID::ITEMID_KAWARAZUNOISI,
    ItemID::ITEMID_KIAINOHATIMAKI,
    ItemID::ITEMID_SIAWASETAMAGO,
    ItemID::ITEMID_PINTORENZU,
    ItemID::ITEMID_METARUKOOTO,
    ItemID::ITEMID_TABENOKOSI,
    ItemID::ITEMID_DENKIDAMA,
    ItemID::ITEMID_YAWARAKAISUNA,
    ItemID::ITEMID_KATAIISI,
    ItemID::ITEMID_KISEKINOTANE,
    ItemID::ITEMID_KUROIMEGANE,
    ItemID::ITEMID_KUROOBI,
    ItemID::ITEMID_ZISYAKU,
    ItemID::ITEMID_SINPINOSIZUKU,
    ItemID::ITEMID_SURUDOIKUTIBASI,
    ItemID::ITEMID_DOKUBARI,
    ItemID::ITEMID_TOKENAIKOORI,
    ItemID::ITEMID_NOROINOOHUDA,
    ItemID::ITEMID_MAGATTASUPUUN,
    ItemID::ITEMID_MOKUTAN,
    ItemID::ITEMID_RYUUNOKIBA,
    ItemID::ITEMID_SIRUKUNOSUKAAHU,
    ItemID::ITEMID_KAIGARANOSUZU,
    ItemID::ITEMID_KOUKAKURENZU,
    ItemID::ITEMID_TIKARANOHATIMAKI,
    ItemID::ITEMID_MONOSIRIMEGANE,
    ItemID::ITEMID_TATUZINNOOBI,
    ItemID::ITEMID_HIKARINONENDO,
    ItemID::ITEMID_INOTINOTAMA,
    ItemID::ITEMID_PAWAHURUHAABU,
    ItemID::ITEMID_DOKUDOKUDAMA,
    ItemID::ITEMID_KAENDAMA,
    ItemID::ITEMID_KIAINOTASUKI,
    ItemID::ITEMID_FOOKASURENZU,
    ItemID::ITEMID_METORONOOMU,
    ItemID::ITEMID_KUROITEKKYUU,
    ItemID::ITEMID_KOUKOUNOSIPPO,
    ItemID::ITEMID_AKAIITO,
    ItemID::ITEMID_KUROIHEDORO,
    ItemID::ITEMID_TUMETAIIWA,
    ItemID::ITEMID_SARASARAIWA,
    ItemID::ITEMID_ATUIIWA,
    ItemID::ITEMID_SIMETTAIWA,
    ItemID::ITEMID_NEBARINOKAGIDUME,
    ItemID::ITEMID_KODAWARISUKAAHU,
    ItemID::ITEMID_KUTTUKIBARI,
    ItemID::ITEMID_PAWAARISUTO,
    ItemID::ITEMID_PAWAABERUTO,
    ItemID::ITEMID_PAWAARENZU,
    ItemID::ITEMID_PAWAABANDO,
    ItemID::ITEMID_PAWAAANKURU,
    ItemID::ITEMID_PAWAAUEITO,
    ItemID::ITEMID_KIREINANUKEGARA,
    ItemID::ITEMID_OOKINANEKKO,
    ItemID::ITEMID_KODAWARIMEGANE,
    ItemID::ITEMID_HINOTAMAPUREETO,
    ItemID::ITEMID_SIZUKUPUREETO,
    ItemID::ITEMID_IKAZUTIPUREETO,
    ItemID::ITEMID_MIDORINOPUREETO,
    ItemID::ITEMID_TURARANOPUREETO,
    ItemID::ITEMID_KOBUSINOPUREETO,
    ItemID::ITEMID_MOUDOKUPUREETO,
    ItemID::ITEMID_DAITINOPUREETO,
    ItemID::ITEMID_AOZORAPUREETO,
    ItemID::ITEMID_HUSIGINOPUREETO,
    ItemID::ITEMID_TAMAMUSIPUREETO,
    ItemID::ITEMID_GANSEKIPUREETO,
    ItemID::ITEMID_MONONOKEPUREETO,
    ItemID::ITEMID_RYUUNOPUREETO,
    ItemID::ITEMID_KOWAMOTEPUREETO,
    ItemID::ITEMID_KOUTETUPUREETO,
    ItemID::ITEMID_SURUDOITUME,
    ItemID::ITEMID_WAZAMASIN01,
    ItemID::ITEMID_WAZAMASIN02,
    ItemID::ITEMID_WAZAMASIN03,
    ItemID::ITEMID_WAZAMASIN04,
    ItemID::ITEMID_WAZAMASIN05,
    ItemID::ITEMID_WAZAMASIN06,
    ItemID::ITEMID_WAZAMASIN07,
    ItemID::ITEMID_WAZAMASIN08,
    ItemID::ITEMID_WAZAMASIN09,
    ItemID::ITEMID_WAZAMASIN10,
    ItemID::ITEMID_WAZAMASIN11,
    ItemID::ITEMID_WAZAMASIN12,
    ItemID::ITEMID_WAZAMASIN13,
    ItemID::ITEMID_WAZAMASIN14,
    ItemID::ITEMID_WAZAMASIN15,
    ItemID::ITEMID_WAZAMASIN16,
    ItemID::ITEMID_WAZAMASIN17,
    ItemID::ITEMID_WAZAMASIN18,
    ItemID::ITEMID_WAZAMASIN19,
    ItemID::ITEMID_WAZAMASIN20,
    ItemID::ITEMID_WAZAMASIN21,
    ItemID::ITEMID_WAZAMASIN22,
    ItemID::ITEMID_WAZAMASIN23,
    ItemID::ITEMID_WAZAMASIN24,
    ItemID::ITEMID_WAZAMASIN25,
    ItemID::ITEMID_WAZAMASIN26,
    ItemID::ITEMID_WAZAMASIN27,
    ItemID::ITEMID_WAZAMASIN28,
    ItemID::ITEMID_WAZAMASIN29,
    ItemID::ITEMID_WAZAMASIN30,
    ItemID::ITEMID_WAZAMASIN31,
    ItemID::ITEMID_WAZAMASIN32,
    ItemID::ITEMID_WAZAMASIN33,
    ItemID::ITEMID_WAZAMASIN34,
    ItemID::ITEMID_WAZAMASIN35,
    ItemID::ITEMID_WAZAMASIN36,
    ItemID::ITEMID_WAZAMASIN37,
    ItemID::ITEMID_WAZAMASIN38,
    ItemID::ITEMID_WAZAMASIN39,
    ItemID::ITEMID_WAZAMASIN40,
    ItemID::ITEMID_WAZAMASIN41,
    ItemID::ITEMID_WAZAMASIN42,
    ItemID::ITEMID_WAZAMASIN43,
    ItemID::ITEMID_WAZAMASIN44,
    ItemID::ITEMID_WAZAMASIN45,
    ItemID::ITEMID_WAZAMASIN46,
    ItemID::ITEMID_WAZAMASIN47,
    ItemID::ITEMID_WAZAMASIN48,
    ItemID::ITEMID_WAZAMASIN49,
    ItemID::ITEMID_WAZAMASIN50,
    ItemID::ITEMID_WAZAMASIN51,
    ItemID::ITEMID_WAZAMASIN52,
    ItemID::ITEMID_WAZAMASIN53,
    ItemID::ITEMID_WAZAMASIN54,
    ItemID::ITEMID_WAZAMASIN55,
    ItemID::ITEMID_WAZAMASIN56,
    ItemID::ITEMID_WAZAMASIN57,
    ItemID::ITEMID_WAZAMASIN58,
    ItemID::ITEMID_WAZAMASIN59,
    ItemID::ITEMID_WAZAMASIN60,
    ItemID::ITEMID_WAZAMASIN61,
    ItemID::ITEMID_WAZAMASIN62,
    ItemID::ITEMID_WAZAMASIN63,
    ItemID::ITEMID_WAZAMASIN64,
    ItemID::ITEMID_WAZAMASIN65,
    ItemID::ITEMID_WAZAMASIN66,
    ItemID::ITEMID_WAZAMASIN67,
    ItemID::ITEMID_WAZAMASIN68,
    ItemID::ITEMID_WAZAMASIN69,
    ItemID::ITEMID_WAZAMASIN70,
    ItemID::ITEMID_WAZAMASIN71,
    ItemID::ITEMID_WAZAMASIN72,
    ItemID::ITEMID_WAZAMASIN73,
    ItemID::ITEMID_WAZAMASIN74,
    ItemID::ITEMID_WAZAMASIN75,
    ItemID::ITEMID_WAZAMASIN76,
    ItemID::ITEMID_WAZAMASIN77,
    ItemID::ITEMID_WAZAMASIN78,
    ItemID::ITEMID_WAZAMASIN79,
    ItemID::ITEMID_WAZAMASIN80,
    ItemID::ITEMID_WAZAMASIN81,
    ItemID::ITEMID_WAZAMASIN82,
    ItemID::ITEMID_WAZAMASIN83,
    ItemID::ITEMID_WAZAMASIN84,
    ItemID::ITEMID_WAZAMASIN85,
    ItemID::ITEMID_WAZAMASIN86,
    ItemID::ITEMID_WAZAMASIN87,
    ItemID::ITEMID_WAZAMASIN88,
    ItemID::ITEMID_WAZAMASIN89,
    ItemID::ITEMID_WAZAMASIN90,
    ItemID::ITEMID_WAZAMASIN91,
    ItemID::ITEMID_WAZAMASIN92,
    ItemID::ITEMID_SUPIIDOBOORU,
    ItemID::ITEMID_REBERUBOORU,
    ItemID::ITEMID_RUAABOORU,
    ItemID::ITEMID_HEBIIBOORU,
    ItemID::ITEMID_RABURABUBOORU,
    ItemID::ITEMID_HURENDOBOORU,
    ItemID::ITEMID_MUUNBOORU,
    ItemID::ITEMID_KONPEBOORU,
    ItemID::ITEMID_SINKANOKISEKI,
    ItemID::ITEMID_KARUISI,
    ItemID::ITEMID_GOTUGOTUMETTO,
    ItemID::ITEMID_HUUSEN,
    ItemID::ITEMID_REDDOKAADO,
    ItemID::ITEMID_NERAINOMATO,
    ItemID::ITEMID_SIMETUKEBANDO,
    ItemID::ITEMID_KYUUKON,
    ItemID::ITEMID_ZYUUDENTI,
    ItemID::ITEMID_DASSYUTUBOTAN,
    ItemID::ITEMID_NOOMARUZYUERU,
    ItemID::ITEMID_TAIRYOKUNOHANE,
    ItemID::ITEMID_KINRYOKUNOHANE,
    ItemID::ITEMID_TEIKOUNOHANE,
    ItemID::ITEMID_TIRYOKUNOHANE,
    ItemID::ITEMID_SEISINNOHANE,
    ItemID::ITEMID_SYUNPATUNOHANE,
    ItemID::ITEMID_KIREINAHANE,
    ItemID::ITEMID_DORIIMUBOORU,
    ItemID::ITEMID_KAORUKINOKO,
    ItemID::ITEMID_DEKAIKINNOTAMA,
    ItemID::ITEMID_ODANGOSINZYU,
    ItemID::ITEMID_SUISEINOKAKERA,
    ItemID::ITEMID_WAZAMASIN93,
    ItemID::ITEMID_WAZAMASIN94,
    ItemID::ITEMID_WAZAMASIN95,
    ItemID::ITEMID_HIKARUOMAMORI,
    ItemID::ITEMID_UTUSIKAGAMI,
    ItemID::ITEMID_ZYAKUTENHOKEN,
    ItemID::ITEMID_TOTUGEKITYOKKI,
    ItemID::ITEMID_SEIREIPUREETO,
    ItemID::ITEMID_TOKUSEIKAPUSERU,
    ItemID::ITEMID_HIKARIGOKE,
    ItemID::ITEMID_YUKIDAMA,
    ItemID::ITEMID_BOUZINGOOGURU,
    ItemID::ITEMID_ROZERUNOMI,
    ItemID::ITEMID_AKKINOMI,
    ItemID::ITEMID_TARAPUNOMI,
    ItemID::ITEMID_WAZAMASIN96,
    ItemID::ITEMID_WAZAMASIN97,
    ItemID::ITEMID_WAZAMASIN98,
    ItemID::ITEMID_WAZAMASIN99,
    ItemID::ITEMID_TANKENKOKOROE,
    ItemID::ITEMID_IMASIMENOTUBO,
    ItemID::ITEMID_GINNOOUKAN,
    ItemID::ITEMID_KINNOOUKAN,
    ItemID::ITEMID_BIBIRIDAMA,
    ItemID::ITEMID_KOORINOISI,
    ItemID::ITEMID_URUTORABOORU,
    ItemID::ITEMID_KURENAINOMITU,
    ItemID::ITEMID_YAMABUKINOMITU,
    ItemID::ITEMID_USUMOMONOMITU,
    ItemID::ITEMID_MURASAKINOMITU,
    ItemID::ITEMID_GURANDOKOOTO,
    ItemID::ITEMID_BOUGOPATTO,
    ItemID::ITEMID_EREKISIIDO,
    ItemID::ITEMID_SAIKOSIIDO,
    ItemID::ITEMID_MISUTOSIIDO,
    ItemID::ITEMID_GURASUSIIDO,
    ItemID::ITEMID_KUTITATURUGI,
    ItemID::ITEMID_KUTITATATE,
    ItemID::ITEMID_AMAAIRINGO,
    ItemID::ITEMID_SUPPAIRINGO,
    ItemID::ITEMID_NODOAME,
    ItemID::ITEMID_DASSYUTUPAKKU,
    ItemID::ITEMID_ATUZOKOBUUTU,
    ItemID::ITEMID_KARABURIHOKEN,
    ItemID::ITEMID_RUUMUSAABISU,
    ItemID::ITEMID_BANNOUGASA,
    ItemID::ITEMID_KEIKENTIAME_1,
    ItemID::ITEMID_KEIKENTIAME_2,
    ItemID::ITEMID_KEIKENTIAME_3,
    ItemID::ITEMID_KEIKENTIAME_4,
    ItemID::ITEMID_KEIKENTIAME_5,
    ItemID::ITEMID_SAMISIGARIMINTO,
    ItemID::ITEMID_IZIPPARIMINTO,
    ItemID::ITEMID_YANTYAMINTO,
    ItemID::ITEMID_YUKANMINTO,
    ItemID::ITEMID_ZUBUTOIMINTO,
    ItemID::ITEMID_WANPAKUMINTO,
    ItemID::ITEMID_NOUTENKIMINTO,
    ItemID::ITEMID_NONKIMINTO,
    ItemID::ITEMID_HIKAEMEMINTO,
    ItemID::ITEMID_OTTORIMINTO,
    ItemID::ITEMID_UKKARIMINTO,
    ItemID::ITEMID_REISEIMINTO,
    ItemID::ITEMID_ODAYAKAMINTO,
    ItemID::ITEMID_OTONASIIMINTO,
    ItemID::ITEMID_SINTYOUMINTO,
    ItemID::ITEMID_NAMAIKIMINTO,
    ItemID::ITEMID_OKUBYOUMINTO,
    ItemID::ITEMID_SEKKTIMINTO,
    ItemID::ITEMID_YOUKIMINTO,
    ItemID::ITEMID_MUJYAKIMINTO,
    ItemID::ITEMID_MAZIMEMINTO,
    ItemID::ITEMID_WARETAPOTTO,
    ItemID::ITEMID_KAKETAPOTTO,
    ItemID::ITEMID_ROTOMUNOKATAROGU,
    ItemID::ITEMID_GARANATUBURESU,
    ItemID::ITEMID_KIDUNANODADUNA,
    ItemID::ITEMID_KIDUNANODADUNA_KAIZYO,
    ItemID::ITEMID_GARANATURIISU,
    ItemID::ITEMID_TOKUSEIPATTI,
    ItemID::ITEMID_DAIKONGOUDAMA,
    ItemID::ITEMID_DAISIRATAMA,
    ItemID::ITEMID_DAIHAKKINDAMA,
    ItemID::ITEMID_SUMAHOROTOMU,
    ItemID::ITEMID_SANDOUICCHI,
    ItemID::ITEMID_DENSETSUBOORUA,
    ItemID::ITEMID_DENSETSUBOORUB,
    ItemID::ITEMID_TAKARABOORU,
    ItemID::ITEMID_GENSYOA,
    ItemID::ITEMID_GENSYOB,
    ItemID::ITEMID_HIROTTASAIFU,
    ItemID::ITEMID_CHIISANATAKENOKO,
    ItemID::ITEMID_OOKINATAKENOKO,
    ItemID::ITEMID_AKUNOKAKEJIKU,
    ItemID::ITEMID_MIZUNOKAKEJIKU,
    ItemID::ITEMID_NOROINOYOROI,
    ItemID::ITEMID_CHENJAA1,
    ItemID::ITEMID_CHENJAA2,
    ItemID::ITEMID_CHENJAA3,
    ItemID::ITEMID_CHENJAA4,
    ItemID::ITEMID_CHENJAA5,
    ItemID::ITEMID_CHENJAA6,
    ItemID::ITEMID_CHENJAA7,
    ItemID::ITEMID_CHENJAA8,
    ItemID::ITEMID_CHENJAA9,
    ItemID::ITEMID_CHENJAA10,
    ItemID::ITEMID_CHENJAA11,
    ItemID::ITEMID_CHENJAA12,
    ItemID::ITEMID_CHENJAA13,
    ItemID::ITEMID_CHENJAA14,
    ItemID::ITEMID_CHENJAA15,
    ItemID::ITEMID_CHENJAA16,
    ItemID::ITEMID_CHENJAA17,
    ItemID::ITEMID_CHENJAA18,
    ItemID::ITEMID_BUUSUTOENAJII,
    ItemID::ITEMID_SENTOUBAFFA1,
    ItemID::ITEMID_SENTOUBAFFA2,
    ItemID::ITEMID_SENTOUBAFFA3,
    ItemID::ITEMID_SENTOUBAFFA4,
    ItemID::ITEMID_SENTOUBAFFA5,
    ItemID::ITEMID_SENTOUBAFFA6,
    ItemID::ITEMID_MAYONEEZU,
    ItemID::ITEMID_KECHAPPU,
    ItemID::ITEMID_MASUTAADO,
    ItemID::ITEMID_BATAA,
    ItemID::ITEMID_PIINATTSUBATAA,
    ItemID::ITEMID_CHIRISOOSU,
    ItemID::ITEMID_SORUTO,
    ItemID::ITEMID_PEPPAA,
    ItemID::ITEMID_YOOGURUTO,
    ItemID::ITEMID_HOIPPUKURIIMU,
    ItemID::ITEMID_KURIIMUCHIIZU,
    ItemID::ITEMID_BERIIJAMU,
    ItemID::ITEMID_MAAMAREEDO,
    ItemID::ITEMID_ORIIBUOIRU,
    ItemID::ITEMID_BINEGAA,
    ItemID::ITEMID_TAKARASUPAISU1,
    ItemID::ITEMID_TAKARASUPAISU2,
    ItemID::ITEMID_TAKARASUPAISU3,
    ItemID::ITEMID_TAKARASUPAISU4,
    ItemID::ITEMID_TAKARASUPAISU5,
    ItemID::ITEMID_RETASUPAKKU,
    ItemID::ITEMID_TOMATOSURAISU,
    ItemID::ITEMID_KATTOMINITOMATO,
    ItemID::ITEMID_KYUURISURAISU,
    ItemID::ITEMID_PIKURUSUSURAISU,
    ItemID::ITEMID_TAMANEGISURAISU,
    ItemID::ITEMID_REDDOAARII,
    ItemID::ITEMID_PIIMANSURAISU,
    ItemID::ITEMID_AKAPAPURIKASURAISU,
    ItemID::ITEMID_KIPAPURIKASURAISU,
    ItemID::ITEMID_ABOKADO,
    ItemID::ITEMID_YAKIBEEKON,
    ItemID::ITEMID_HAMUSURAISU,
    ItemID::ITEMID_NAMAHAMU,
    ItemID::ITEMID_YAKICHORISOO,
    ItemID::ITEMID_BOIRUSOOSEEJI,
    ItemID::ITEMID_HANBAAGU,
    ItemID::ITEMID_KANISUTIKKU,
    ItemID::ITEMID_SUMOOKUKIRIMI,
    ItemID::ITEMID_KIRIMIFURAI,
    ItemID::ITEMID_SURAISUEGGU,
    ItemID::ITEMID_TORUTIIJA,
    ItemID::ITEMID_TOOFU,
    ItemID::ITEMID_RAISU,
    ItemID::ITEMID_NUUDORU,
    ItemID::ITEMID_POTETOSARADA,
    ItemID::ITEMID_SURAISUCHIIZU,
    ItemID::ITEMID_BANANASURAISU,
    ItemID::ITEMID_ICHIGOSURAISU,
    ItemID::ITEMID_WAGIRIRINGO,
    ItemID::ITEMID_WAGIRIKIUI,
    ItemID::ITEMID_KATTOPAIN,
    ItemID::ITEMID_HARAPEENYO,
    ItemID::ITEMID_HOOSURADISSHU,
    ItemID::ITEMID_KAREEPAUDAA,
    ItemID::ITEMID_WASABISOOSU,
    ItemID::ITEMID_KURESON,
    ItemID::ITEMID_BAJIRU,
    ItemID::ITEMID_SOZAI01,
    ItemID::ITEMID_SOZAI02,
    ItemID::ITEMID_SOZAI03,
    ItemID::ITEMID_SOZAI04,
    ItemID::ITEMID_SOZAI05,
    ItemID::ITEMID_SOZAI06,
    ItemID::ITEMID_SOZAI07,
    ItemID::ITEMID_SOZAI08,
    ItemID::ITEMID_SOZAI09,
    ItemID::ITEMID_SOZAI10,
    ItemID::ITEMID_SOZAI11,
    ItemID::ITEMID_SOZAI12,
    ItemID::ITEMID_SOZAI13,
    ItemID::ITEMID_SOZAI14,
    ItemID::ITEMID_SOZAI15,
    ItemID::ITEMID_SOZAI16,
    ItemID::ITEMID_SOZAI17,
    ItemID::ITEMID_SOZAI18,
    ItemID::ITEMID_SOZAI19,
    ItemID::ITEMID_SOZAI20,
    ItemID::ITEMID_SOZAI21,
    ItemID::ITEMID_SOZAI22,
    ItemID::ITEMID_SOZAI23,
    ItemID::ITEMID_SOZAI24,
    ItemID::ITEMID_SOZAI25,
    ItemID::ITEMID_SOZAI26,
    ItemID::ITEMID_SOZAI27,
    ItemID::ITEMID_SOZAI28,
    ItemID::ITEMID_SOZAI29,
    ItemID::ITEMID_SOZAI30,
    ItemID::ITEMID_SOZAI31,
    ItemID::ITEMID_SOZAI32,
    ItemID::ITEMID_SOZAI33,
    ItemID::ITEMID_SOZAI34,
    ItemID::ITEMID_SOZAI35,
    ItemID::ITEMID_SOZAI36,
    ItemID::ITEMID_SOZAI37,
    ItemID::ITEMID_SOZAI38,
    ItemID::ITEMID_SOZAI39,
    ItemID::ITEMID_SOZAI40,
    ItemID::ITEMID_SOZAI41,
    ItemID::ITEMID_SOZAI42,
    ItemID::ITEMID_SOZAI43,
    ItemID::ITEMID_SOZAI44,
    ItemID::ITEMID_SOZAI45,
    ItemID::ITEMID_SOZAI46,
    ItemID::ITEMID_SOZAI47,
    ItemID::ITEMID_SOZAI48,
    ItemID::ITEMID_SOZAI49,
    ItemID::ITEMID_SOZAI50,
    ItemID::ITEMID_SOZAI51,
    ItemID::ITEMID_SOZAI52,
    ItemID::ITEMID_SOZAI53,
    ItemID::ITEMID_SOZAI54,
    ItemID::ITEMID_SOZAI55,
    ItemID::ITEMID_SOZAI56,
    ItemID::ITEMID_SOZAI57,
    ItemID::ITEMID_SOZAI58,
    ItemID::ITEMID_SOZAI59,
    ItemID::ITEMID_SOZAI60,
    ItemID::ITEMID_SOZAI61,
    ItemID::ITEMID_SOZAI62,
    ItemID::ITEMID_SOZAI63,
    ItemID::ITEMID_SOZAI64,
    ItemID::ITEMID_SOZAI65,
    ItemID::ITEMID_SOZAI66,
    ItemID::ITEMID_SOZAI67,
    ItemID::ITEMID_SOZAI68,
    ItemID::ITEMID_SOZAI69,
    ItemID::ITEMID_SOZAI70,
    ItemID::ITEMID_SOZAI71,
    ItemID::ITEMID_SOZAI72,
    ItemID::ITEMID_SOZAI73,
    ItemID::ITEMID_SOZAI74,
    ItemID::ITEMID_SOZAI75,
    ItemID::ITEMID_SOZAI76,
    ItemID::ITEMID_SOZAI77,
    ItemID::ITEMID_SOZAI78,
    ItemID::ITEMID_SOZAI79,
    ItemID::ITEMID_SOZAI80,
    ItemID::ITEMID_SOZAI81,
    ItemID::ITEMID_SOZAI82,
    ItemID::ITEMID_SOZAI83,
    ItemID::ITEMID_SOZAI84,
    ItemID::ITEMID_SOZAI85,
    ItemID::ITEMID_SOZAI86,
    ItemID::ITEMID_SOZAI87,
    ItemID::ITEMID_SOZAI88,
    ItemID::ITEMID_SOZAI89,
    ItemID::ITEMID_SOZAI90,
    ItemID::ITEMID_SOZAI91,
    ItemID::ITEMID_SOZAI92,
    ItemID::ITEMID_SOZAI93,
    ItemID::ITEMID_SOZAI94,
    ItemID::ITEMID_SOZAI95,
    ItemID::ITEMID_SOZAI96,
    ItemID::ITEMID_SOZAI97,
    ItemID::ITEMID_SOZAI98,
    ItemID::ITEMID_SOZAI99,
    ItemID::ITEMID_SOZAI100,
    ItemID::ITEMID_SOZAI101,
    ItemID::ITEMID_SOZAI102,
    ItemID::ITEMID_SOZAI103,
    ItemID::ITEMID_SOZAI104,
    ItemID::ITEMID_SOZAI105,
    ItemID::ITEMID_SOZAI106,
    ItemID::ITEMID_SOZAI107,
    ItemID::ITEMID_SOZAI108,
    ItemID::ITEMID_SOZAI109,
    ItemID::ITEMID_SOZAI110,
    ItemID::ITEMID_SOZAI111,
    ItemID::ITEMID_SOZAI112,
    ItemID::ITEMID_SOZAI113,
    ItemID::ITEMID_SOZAI114,
    ItemID::ITEMID_SOZAI115,
    ItemID::ITEMID_SOZAI116,
    ItemID::ITEMID_SOZAI117,
    ItemID::ITEMID_SOZAI118,
    ItemID::ITEMID_SOZAI119,
    ItemID::ITEMID_SOZAI120,
    ItemID::ITEMID_SOZAI121,
    ItemID::ITEMID_SOZAI122,
    ItemID::ITEMID_SOZAI123,
    ItemID::ITEMID_SOZAI124,
    ItemID::ITEMID_SOZAI125,
    ItemID::ITEMID_SOZAI126,
    ItemID::ITEMID_SOZAI127,
    ItemID::ITEMID_SOZAI128,
    ItemID::ITEMID_SOZAI129,
    ItemID::ITEMID_SOZAI130,
    ItemID::ITEMID_SOZAI131,
    ItemID::ITEMID_SOZAI132,
    ItemID::ITEMID_SOZAI133,
    ItemID::ITEMID_SOZAI134,
    ItemID::ITEMID_SOZAI135,
    ItemID::ITEMID_SOZAI136,
    ItemID::ITEMID_SOZAI137,
    ItemID::ITEMID_SOZAI138,
    ItemID::ITEMID_SOZAI139,
    ItemID::ITEMID_SOZAI140,
    ItemID::ITEMID_SOZAI141,
    ItemID::ITEMID_SOZAI142,
    ItemID::ITEMID_SOZAI143,
    ItemID::ITEMID_SOZAI144,
    ItemID::ITEMID_SOZAI148,
    ItemID::ITEMID_SOZAI149,
    ItemID::ITEMID_SOZAI150,
    ItemID::ITEMID_SOZAI151,
    ItemID::ITEMID_SOZAI152,
    ItemID::ITEMID_SOZAI153,
    ItemID::ITEMID_SOZAI154,
    ItemID::ITEMID_SOZAI155,
    ItemID::ITEMID_SOZAI156,
    ItemID::ITEMID_SOZAI157,
    ItemID::ITEMID_SOZAI158,
    ItemID::ITEMID_SOZAI159,
    ItemID::ITEMID_SOZAI160,
    ItemID::ITEMID_SOZAI161,
    ItemID::ITEMID_SOZAI162,
    ItemID::ITEMID_SOZAI163,
    ItemID::ITEMID_SOZAI164,
    ItemID::ITEMID_SOZAI165,
    ItemID::ITEMID_SOZAI166,
    ItemID::ITEMID_SOZAI167,
    ItemID::ITEMID_SOZAI168,
    ItemID::ITEMID_SOZAI171,
    ItemID::ITEMID_SOZAI172,
    ItemID::ITEMID_SOZAI173,
    ItemID::ITEMID_SOZAI174,
    ItemID::ITEMID_SOZAI175,
    ItemID::ITEMID_SOZAI176,
    ItemID::ITEMID_SOZAI177,
    ItemID::ITEMID_SOZAI178,
    ItemID::ITEMID_SOZAI179,
    ItemID::ITEMID_SOZAI180,
    ItemID::ITEMID_SOZAI181,
    ItemID::ITEMID_SOZAI182,
    ItemID::ITEMID_SOZAI201,
    ItemID::ITEMID_SOZAI202,
    ItemID::ITEMID_SOZAI203,
    ItemID::ITEMID_SOZAI204,
    ItemID::ITEMID_WAZAMASIN100,
    ItemID::ITEMID_WAZAMASIN101,
    ItemID::ITEMID_WAZAMASIN102,
    ItemID::ITEMID_WAZAMASIN103,
    ItemID::ITEMID_WAZAMASIN104,
    ItemID::ITEMID_WAZAMASIN105,
    ItemID::ITEMID_WAZAMASIN106,
    ItemID::ITEMID_WAZAMASIN107,
    ItemID::ITEMID_WAZAMASIN108,
    ItemID::ITEMID_WAZAMASIN109,
    ItemID::ITEMID_WAZAMASIN110,
    ItemID::ITEMID_WAZAMASIN111,
    ItemID::ITEMID_WAZAMASIN112,
    ItemID::ITEMID_WAZAMASIN113,
    ItemID::ITEMID_WAZAMASIN114,
    ItemID::ITEMID_WAZAMASIN115,
    ItemID::ITEMID_WAZAMASIN116,
    ItemID::ITEMID_WAZAMASIN117,
    ItemID::ITEMID_WAZAMASIN118,
    ItemID::ITEMID_WAZAMASIN119,
    ItemID::ITEMID_WAZAMASIN120,
    ItemID::ITEMID_WAZAMASIN121,
    ItemID::ITEMID_WAZAMASIN122,
    ItemID::ITEMID_WAZAMASIN123,
    ItemID::ITEMID_WAZAMASIN124,
    ItemID::ITEMID_WAZAMASIN125,
    ItemID::ITEMID_WAZAMASIN126,
    ItemID::ITEMID_WAZAMASIN127,
    ItemID::ITEMID_WAZAMASIN128,
    ItemID::ITEMID_WAZAMASIN129,
    ItemID::ITEMID_WAZAMASIN130,
    ItemID::ITEMID_WAZAMASIN131,
    ItemID::ITEMID_WAZAMASIN132,
    ItemID::ITEMID_WAZAMASIN133,
    ItemID::ITEMID_WAZAMASIN134,
    ItemID::ITEMID_WAZAMASIN135,
    ItemID::ITEMID_WAZAMASIN136,
    ItemID::ITEMID_WAZAMASIN137,
    ItemID::ITEMID_WAZAMASIN138,
    ItemID::ITEMID_WAZAMASIN139,
    ItemID::ITEMID_WAZAMASIN140,
    ItemID::ITEMID_WAZAMASIN141,
    ItemID::ITEMID_WAZAMASIN142,
    ItemID::ITEMID_WAZAMASIN143,
    ItemID::ITEMID_WAZAMASIN144,
    ItemID::ITEMID_WAZAMASIN145,
    ItemID::ITEMID_WAZAMASIN146,
    ItemID::ITEMID_WAZAMASIN147,
    ItemID::ITEMID_WAZAMASIN148,
    ItemID::ITEMID_WAZAMASIN149,
    ItemID::ITEMID_WAZAMASIN150,
    ItemID::ITEMID_WAZAMASIN151,
    ItemID::ITEMID_WAZAMASIN152,
    ItemID::ITEMID_WAZAMASIN153,
    ItemID::ITEMID_WAZAMASIN154,
    ItemID::ITEMID_WAZAMASIN155,
    ItemID::ITEMID_WAZAMASIN156,
    ItemID::ITEMID_WAZAMASIN157,
    ItemID::ITEMID_WAZAMASIN158,
    ItemID::ITEMID_WAZAMASIN159,
    ItemID::ITEMID_WAZAMASIN160,
    ItemID::ITEMID_WAZAMASIN161,
    ItemID::ITEMID_WAZAMASIN162,
    ItemID::ITEMID_WAZAMASIN163,
    ItemID::ITEMID_WAZAMASIN164,
    ItemID::ITEMID_WAZAMASIN165,
    ItemID::ITEMID_WAZAMASIN166,
    ItemID::ITEMID_WAZAMASIN167,
    ItemID::ITEMID_WAZAMASIN168,
    ItemID::ITEMID_WAZAMASIN169,
    ItemID::ITEMID_WAZAMASIN170,
    ItemID::ITEMID_WAZAMASIN171,
    ItemID::ITEMID_PIKUNIKKUSETTO,
    ItemID::ITEMID_SUITOU1,
    ItemID::ITEMID_SUITOU2,
    ItemID::ITEMID_SUITOU3,
    ItemID::ITEMID_SUITOU4,
    ItemID::ITEMID_SUITOU5,
    ItemID::ITEMID_KOPPU1,
    ItemID::ITEMID_KOPPU2,
    ItemID::ITEMID_KOPPU3,
    ItemID::ITEMID_KOPPU4,
    ItemID::ITEMID_KOPPU5,
    ItemID::ITEMID_TEEBURUKABAA1,
    ItemID::ITEMID_TEEBURUKABAA2,
    ItemID::ITEMID_TEEBURUKABAA3,
    ItemID::ITEMID_TEEBURUKABAA4,
    ItemID::ITEMID_TEEBURUKABAA5,
    ItemID::ITEMID_PIKUNIKKUBOORU1,
    ItemID::ITEMID_PIKUNIKKUBOORU2,
    ItemID::ITEMID_PIKUNIKKUBOORU3,
    ItemID::ITEMID_PIKUNIKKUBOORU4,
    ItemID::ITEMID_PIKUNIKKUBOORU5,
    ItemID::ITEMID_RANCHIPIKKU1,
    ItemID::ITEMID_RANCHIPIKKU2,
    ItemID::ITEMID_RANCHIPIKKU3,
    ItemID::ITEMID_RANCHIPIKKU4,
    ItemID::ITEMID_RANCHIPIKKU5,
    ItemID::ITEMID_RANCHIPIKKU6,
    ItemID::ITEMID_RANCHIPIKKU7,
    ItemID::ITEMID_RANCHIPIKKU8,
    ItemID::ITEMID_RANCHIPIKKU9,
    ItemID::ITEMID_IWAINOYOROI,
    ItemID::ITEMID_KASIRANOAKASI,
    ItemID::ITEMID_SUITOU6,
    ItemID::ITEMID_SUITOU7,
    ItemID::ITEMID_SUITOU8,
    ItemID::ITEMID_SUITOU9,
    ItemID::ITEMID_SUITOU10,
    ItemID::ITEMID_SUITOU11,
    ItemID::ITEMID_SUITOU12,
    ItemID::ITEMID_KOPPU6,
    ItemID::ITEMID_KOPPU7,
    ItemID::ITEMID_KOPPU8,
    ItemID::ITEMID_KOPPU9,
    ItemID::ITEMID_KOPPU10,
    ItemID::ITEMID_KOPPU11,
    ItemID::ITEMID_KOPPU12,
    ItemID::ITEMID_KOPPU13,
    ItemID::ITEMID_KOPPU14,
    ItemID::ITEMID_KOPPU15,
    ItemID::ITEMID_PIKUNIKKUBOORU6,
    ItemID::ITEMID_TEEBURUKABAA6,
    ItemID::ITEMID_TEEBURUKABAA7,
    ItemID::ITEMID_TEEBURUKABAA8,
    ItemID::ITEMID_TEEBURUKABAA9,
    ItemID::ITEMID_TEEBURUKABAA10,
    ItemID::ITEMID_TEEBURUKABAA11,
    ItemID::ITEMID_TEEBURUKABAA12,
    ItemID::ITEMID_TEEBURUKABAA13,
    ItemID::ITEMID_TEEBURUKABAA14,
    ItemID::ITEMID_TEEBURUKABAA15,
    ItemID::ITEMID_TEEBURUKABAA16,
    ItemID::ITEMID_TEEBURUKABAA17,
    ItemID::ITEMID_TEEBURUKABAA18,
    ItemID::ITEMID_TEEBURUKABAA19,
    ItemID::ITEMID_TEEBURUKABAA20,
    ItemID::ITEMID_SUITOU13,
    ItemID::ITEMID_SUITOU14,
    ItemID::ITEMID_KOPPU16,
    ItemID::ITEMID_KOPPU17,
    ItemID::ITEMID_RANCHIPIKKU10,
    ItemID::ITEMID_RANCHIPIKKU11,
    ItemID::ITEMID_RANCHIPIKKU12,
    ItemID::ITEMID_RANCHIPIKKU13,
    ItemID::ITEMID_RANCHIPIKKU14,
    ItemID::ITEMID_RANCHIPIKKU15,
    ItemID::ITEMID_RANCHIPIKKU16,
    ItemID::ITEMID_RANCHIPIKKU17,
    ItemID::ITEMID_RANCHIPIKKU18,
    ItemID::ITEMID_RANCHIPIKKU19,
    ItemID::ITEMID_SARA2,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ItemID(pub i32);
#[allow(non_upper_case_globals)]
impl ItemID {
    pub const ITEMID_NONE: Self = Self(0);
    pub const ITEMID_MASUTAABOORU: Self = Self(1);
    pub const ITEMID_HAIPAABOORU: Self = Self(2);
    pub const ITEMID_SUUPAABOORU: Self = Self(3);
    pub const ITEMID_MONSUTAABOORU: Self = Self(4);
    pub const ITEMID_SAFARIBOORU: Self = Self(5);
    pub const ITEMID_NETTOBOORU: Self = Self(6);
    pub const ITEMID_DAIBUBOORU: Self = Self(7);
    pub const ITEMID_NESUTOBOORU: Self = Self(8);
    pub const ITEMID_RIPIITOBOORU: Self = Self(9);
    pub const ITEMID_TAIMAABOORU: Self = Self(10);
    pub const ITEMID_GOOZYASUBOORU: Self = Self(11);
    pub const ITEMID_PUREMIABOORU: Self = Self(12);
    pub const ITEMID_DAAKUBOORU: Self = Self(13);
    pub const ITEMID_HIIRUBOORU: Self = Self(14);
    pub const ITEMID_KUIKKUBOORU: Self = Self(15);
    pub const ITEMID_KIZUGUSURI: Self = Self(17);
    pub const ITEMID_DOKUKESI: Self = Self(18);
    pub const ITEMID_YAKEDONAOSI: Self = Self(19);
    pub const ITEMID_KOORINAOSI: Self = Self(20);
    pub const ITEMID_NEMUKEZAMASI: Self = Self(21);
    pub const ITEMID_MAHINAOSI: Self = Self(22);
    pub const ITEMID_KAIHUKUNOKUSURI: Self = Self(23);
    pub const ITEMID_MANTANNOKUSURI: Self = Self(24);
    pub const ITEMID_SUGOIKIZUGUSURI: Self = Self(25);
    pub const ITEMID_IIKIZUGUSURI: Self = Self(26);
    pub const ITEMID_NANDEMONAOSI: Self = Self(27);
    pub const ITEMID_GENKINOKAKERA: Self = Self(28);
    pub const ITEMID_GENKINOKATAMARI: Self = Self(29);
    pub const ITEMID_OISIIMIZU: Self = Self(30);
    pub const ITEMID_SAIKOSOODA: Self = Self(31);
    pub const ITEMID_MIKKUSUORE: Self = Self(32);
    pub const ITEMID_MOOMOOMIRUKU: Self = Self(33);
    pub const ITEMID_TIKARANOKONA: Self = Self(34);
    pub const ITEMID_TIKARANONEKKO: Self = Self(35);
    pub const ITEMID_BANNOUGONA: Self = Self(36);
    pub const ITEMID_HUKKATUSOU: Self = Self(37);
    pub const ITEMID_PIIPIIEIDO: Self = Self(38);
    pub const ITEMID_PIIPIIRIKABAA: Self = Self(39);
    pub const ITEMID_PIIPIIEIDAA: Self = Self(40);
    pub const ITEMID_PIIPIIMAKKUSU: Self = Self(41);
    pub const ITEMID_MAKKUSUAPPU: Self = Self(45);
    pub const ITEMID_TAURIN: Self = Self(46);
    pub const ITEMID_BUROMUHEKISIN: Self = Self(47);
    pub const ITEMID_INDOMETASIN: Self = Self(48);
    pub const ITEMID_RIZOTIUMU: Self = Self(49);
    pub const ITEMID_HUSIGINAAME: Self = Self(50);
    pub const ITEMID_POINTOAPPU: Self = Self(51);
    pub const ITEMID_KITOSAN: Self = Self(52);
    pub const ITEMID_POINTOMAKKUSU: Self = Self(53);
    pub const ITEMID_EFEKUTOGAADO: Self = Self(55);
    pub const ITEMID_KURITHIKATTO: Self = Self(56);
    pub const ITEMID_PURASUPAWAA: Self = Self(57);
    pub const ITEMID_DHIFENDAA: Self = Self(58);
    pub const ITEMID_SUPIIDAA: Self = Self(59);
    pub const ITEMID_YOKUATAARU: Self = Self(60);
    pub const ITEMID_SUPESYARUAPPU: Self = Self(61);
    pub const ITEMID_SUPESYARUGAADO: Self = Self(62);
    pub const ITEMID_PIPPININGYOU: Self = Self(63);
    pub const ITEMID_TAIYOUNOISI: Self = Self(80);
    pub const ITEMID_TUKINOISI: Self = Self(81);
    pub const ITEMID_HONOONOISI: Self = Self(82);
    pub const ITEMID_KAMINARINOISI: Self = Self(83);
    pub const ITEMID_MIZUNOISI: Self = Self(84);
    pub const ITEMID_RIIHUNOISI: Self = Self(85);
    pub const ITEMID_TIISANAKINOKO: Self = Self(86);
    pub const ITEMID_OOKINAKINOKO: Self = Self(87);
    pub const ITEMID_SINZYU: Self = Self(88);
    pub const ITEMID_OOKINASINZYU: Self = Self(89);
    pub const ITEMID_HOSINOSUNA: Self = Self(90);
    pub const ITEMID_HOSINOKAKERA: Self = Self(91);
    pub const ITEMID_KINNOTAMA: Self = Self(92);
    pub const ITEMID_AMAIMITU: Self = Self(94);
    pub const ITEMID_KITYOUNAHONE: Self = Self(106);
    pub const ITEMID_HIKARINOISI: Self = Self(107);
    pub const ITEMID_YAMINOISI: Self = Self(108);
    pub const ITEMID_MEZAMEISI: Self = Self(109);
    pub const ITEMID_MANMARUISI: Self = Self(110);
    pub const ITEMID_HAKKINDAMA: Self = Self(112);
    pub const ITEMID_KONGOUDAMA: Self = Self(135);
    pub const ITEMID_SIRATAMA: Self = Self(136);
    pub const ITEMID_KURABONOMI: Self = Self(149);
    pub const ITEMID_KAGONOMI: Self = Self(150);
    pub const ITEMID_MOMONNOMI: Self = Self(151);
    pub const ITEMID_TIIGONOMI: Self = Self(152);
    pub const ITEMID_NANASINOMI: Self = Self(153);
    pub const ITEMID_HIMERINOMI: Self = Self(154);
    pub const ITEMID_ORENNOMI: Self = Self(155);
    pub const ITEMID_KIINOMI: Self = Self(156);
    pub const ITEMID_RAMUNOMI: Self = Self(157);
    pub const ITEMID_OBONNOMI: Self = Self(158);
    pub const ITEMID_FIRANOMI: Self = Self(159);
    pub const ITEMID_UINOMI: Self = Self(160);
    pub const ITEMID_MAGONOMI: Self = Self(161);
    pub const ITEMID_BANZINOMI: Self = Self(162);
    pub const ITEMID_IANOMI: Self = Self(163);
    pub const ITEMID_ZAROKUNOMI: Self = Self(169);
    pub const ITEMID_NEKOBUNOMI: Self = Self(170);
    pub const ITEMID_TAPORUNOMI: Self = Self(171);
    pub const ITEMID_ROMENOMI: Self = Self(172);
    pub const ITEMID_UBUNOMI: Self = Self(173);
    pub const ITEMID_MATOMANOMI: Self = Self(174);
    pub const ITEMID_OKKANOMI: Self = Self(184);
    pub const ITEMID_ITOKENOMI: Self = Self(185);
    pub const ITEMID_SOKUNONOMI: Self = Self(186);
    pub const ITEMID_RINDONOMI: Self = Self(187);
    pub const ITEMID_YATHENOMI: Self = Self(188);
    pub const ITEMID_YOPUNOMI: Self = Self(189);
    pub const ITEMID_BIAANOMI: Self = Self(190);
    pub const ITEMID_SYUKANOMI: Self = Self(191);
    pub const ITEMID_BAKOUNOMI: Self = Self(192);
    pub const ITEMID_UTANNOMI: Self = Self(193);
    pub const ITEMID_TANGANOMI: Self = Self(194);
    pub const ITEMID_YOROGINOMI: Self = Self(195);
    pub const ITEMID_KASIBUNOMI: Self = Self(196);
    pub const ITEMID_HABANNOMI: Self = Self(197);
    pub const ITEMID_NAMONOMI: Self = Self(198);
    pub const ITEMID_RIRIBANOMI: Self = Self(199);
    pub const ITEMID_HOZUNOMI: Self = Self(200);
    pub const ITEMID_TIIRANOMI: Self = Self(201);
    pub const ITEMID_RYUGANOMI: Self = Self(202);
    pub const ITEMID_KAMURANOMI: Self = Self(203);
    pub const ITEMID_YATAPINOMI: Self = Self(204);
    pub const ITEMID_ZUANOMI: Self = Self(205);
    pub const ITEMID_SANNOMI: Self = Self(206);
    pub const ITEMID_SUTAANOMI: Self = Self(207);
    pub const ITEMID_NAZONOMI: Self = Self(208);
    pub const ITEMID_MIKURUNOMI: Self = Self(209);
    pub const ITEMID_IBANNOMI: Self = Self(210);
    pub const ITEMID_ZYAPONOMI: Self = Self(211);
    pub const ITEMID_RENBUNOMI: Self = Self(212);
    pub const ITEMID_HIKARINOKONA: Self = Self(213);
    pub const ITEMID_SIROIHAABU: Self = Self(214);
    pub const ITEMID_SENSEINOTUME: Self = Self(217);
    pub const ITEMID_YASURAGINOSUZU: Self = Self(218);
    pub const ITEMID_MENTARUHAABU: Self = Self(219);
    pub const ITEMID_KODAWARIHATIMAKI: Self = Self(220);
    pub const ITEMID_OUZYANOSIRUSI: Self = Self(221);
    pub const ITEMID_GINNOKONA: Self = Self(222);
    pub const ITEMID_OMAMORIKOBAN: Self = Self(223);
    pub const ITEMID_KEMURIDAMA: Self = Self(228);
    pub const ITEMID_KAWARAZUNOISI: Self = Self(229);
    pub const ITEMID_KIAINOHATIMAKI: Self = Self(230);
    pub const ITEMID_SIAWASETAMAGO: Self = Self(231);
    pub const ITEMID_PINTORENZU: Self = Self(232);
    pub const ITEMID_METARUKOOTO: Self = Self(233);
    pub const ITEMID_TABENOKOSI: Self = Self(234);
    pub const ITEMID_DENKIDAMA: Self = Self(236);
    pub const ITEMID_YAWARAKAISUNA: Self = Self(237);
    pub const ITEMID_KATAIISI: Self = Self(238);
    pub const ITEMID_KISEKINOTANE: Self = Self(239);
    pub const ITEMID_KUROIMEGANE: Self = Self(240);
    pub const ITEMID_KUROOBI: Self = Self(241);
    pub const ITEMID_ZISYAKU: Self = Self(242);
    pub const ITEMID_SINPINOSIZUKU: Self = Self(243);
    pub const ITEMID_SURUDOIKUTIBASI: Self = Self(244);
    pub const ITEMID_DOKUBARI: Self = Self(245);
    pub const ITEMID_TOKENAIKOORI: Self = Self(246);
    pub const ITEMID_NOROINOOHUDA: Self = Self(247);
    pub const ITEMID_MAGATTASUPUUN: Self = Self(248);
    pub const ITEMID_MOKUTAN: Self = Self(249);
    pub const ITEMID_RYUUNOKIBA: Self = Self(250);
    pub const ITEMID_SIRUKUNOSUKAAHU: Self = Self(251);
    pub const ITEMID_KAIGARANOSUZU: Self = Self(253);
    pub const ITEMID_KOUKAKURENZU: Self = Self(265);
    pub const ITEMID_TIKARANOHATIMAKI: Self = Self(266);
    pub const ITEMID_MONOSIRIMEGANE: Self = Self(267);
    pub const ITEMID_TATUZINNOOBI: Self = Self(268);
    pub const ITEMID_HIKARINONENDO: Self = Self(269);
    pub const ITEMID_INOTINOTAMA: Self = Self(270);
    pub const ITEMID_PAWAHURUHAABU: Self = Self(271);
    pub const ITEMID_DOKUDOKUDAMA: Self = Self(272);
    pub const ITEMID_KAENDAMA: Self = Self(273);
    pub const ITEMID_KIAINOTASUKI: Self = Self(275);
    pub const ITEMID_FOOKASURENZU: Self = Self(276);
    pub const ITEMID_METORONOOMU: Self = Self(277);
    pub const ITEMID_KUROITEKKYUU: Self = Self(278);
    pub const ITEMID_KOUKOUNOSIPPO: Self = Self(279);
    pub const ITEMID_AKAIITO: Self = Self(280);
    pub const ITEMID_KUROIHEDORO: Self = Self(281);
    pub const ITEMID_TUMETAIIWA: Self = Self(282);
    pub const ITEMID_SARASARAIWA: Self = Self(283);
    pub const ITEMID_ATUIIWA: Self = Self(284);
    pub const ITEMID_SIMETTAIWA: Self = Self(285);
    pub const ITEMID_NEBARINOKAGIDUME: Self = Self(286);
    pub const ITEMID_KODAWARISUKAAHU: Self = Self(287);
    pub const ITEMID_KUTTUKIBARI: Self = Self(288);
    pub const ITEMID_PAWAARISUTO: Self = Self(289);
    pub const ITEMID_PAWAABERUTO: Self = Self(290);
    pub const ITEMID_PAWAARENZU: Self = Self(291);
    pub const ITEMID_PAWAABANDO: Self = Self(292);
    pub const ITEMID_PAWAAANKURU: Self = Self(293);
    pub const ITEMID_PAWAAUEITO: Self = Self(294);
    pub const ITEMID_KIREINANUKEGARA: Self = Self(295);
    pub const ITEMID_OOKINANEKKO: Self = Self(296);
    pub const ITEMID_KODAWARIMEGANE: Self = Self(297);
    pub const ITEMID_HINOTAMAPUREETO: Self = Self(298);
    pub const ITEMID_SIZUKUPUREETO: Self = Self(299);
    pub const ITEMID_IKAZUTIPUREETO: Self = Self(300);
    pub const ITEMID_MIDORINOPUREETO: Self = Self(301);
    pub const ITEMID_TURARANOPUREETO: Self = Self(302);
    pub const ITEMID_KOBUSINOPUREETO: Self = Self(303);
    pub const ITEMID_MOUDOKUPUREETO: Self = Self(304);
    pub const ITEMID_DAITINOPUREETO: Self = Self(305);
    pub const ITEMID_AOZORAPUREETO: Self = Self(306);
    pub const ITEMID_HUSIGINOPUREETO: Self = Self(307);
    pub const ITEMID_TAMAMUSIPUREETO: Self = Self(308);
    pub const ITEMID_GANSEKIPUREETO: Self = Self(309);
    pub const ITEMID_MONONOKEPUREETO: Self = Self(310);
    pub const ITEMID_RYUUNOPUREETO: Self = Self(311);
    pub const ITEMID_KOWAMOTEPUREETO: Self = Self(312);
    pub const ITEMID_KOUTETUPUREETO: Self = Self(313);
    pub const ITEMID_SURUDOITUME: Self = Self(326);
    pub const ITEMID_WAZAMASIN01: Self = Self(328);
    pub const ITEMID_WAZAMASIN02: Self = Self(329);
    pub const ITEMID_WAZAMASIN03: Self = Self(330);
    pub const ITEMID_WAZAMASIN04: Self = Self(331);
    pub const ITEMID_WAZAMASIN05: Self = Self(332);
    pub const ITEMID_WAZAMASIN06: Self = Self(333);
    pub const ITEMID_WAZAMASIN07: Self = Self(334);
    pub const ITEMID_WAZAMASIN08: Self = Self(335);
    pub const ITEMID_WAZAMASIN09: Self = Self(336);
    pub const ITEMID_WAZAMASIN10: Self = Self(337);
    pub const ITEMID_WAZAMASIN11: Self = Self(338);
    pub const ITEMID_WAZAMASIN12: Self = Self(339);
    pub const ITEMID_WAZAMASIN13: Self = Self(340);
    pub const ITEMID_WAZAMASIN14: Self = Self(341);
    pub const ITEMID_WAZAMASIN15: Self = Self(342);
    pub const ITEMID_WAZAMASIN16: Self = Self(343);
    pub const ITEMID_WAZAMASIN17: Self = Self(344);
    pub const ITEMID_WAZAMASIN18: Self = Self(345);
    pub const ITEMID_WAZAMASIN19: Self = Self(346);
    pub const ITEMID_WAZAMASIN20: Self = Self(347);
    pub const ITEMID_WAZAMASIN21: Self = Self(348);
    pub const ITEMID_WAZAMASIN22: Self = Self(349);
    pub const ITEMID_WAZAMASIN23: Self = Self(350);
    pub const ITEMID_WAZAMASIN24: Self = Self(351);
    pub const ITEMID_WAZAMASIN25: Self = Self(352);
    pub const ITEMID_WAZAMASIN26: Self = Self(353);
    pub const ITEMID_WAZAMASIN27: Self = Self(354);
    pub const ITEMID_WAZAMASIN28: Self = Self(355);
    pub const ITEMID_WAZAMASIN29: Self = Self(356);
    pub const ITEMID_WAZAMASIN30: Self = Self(357);
    pub const ITEMID_WAZAMASIN31: Self = Self(358);
    pub const ITEMID_WAZAMASIN32: Self = Self(359);
    pub const ITEMID_WAZAMASIN33: Self = Self(360);
    pub const ITEMID_WAZAMASIN34: Self = Self(361);
    pub const ITEMID_WAZAMASIN35: Self = Self(362);
    pub const ITEMID_WAZAMASIN36: Self = Self(363);
    pub const ITEMID_WAZAMASIN37: Self = Self(364);
    pub const ITEMID_WAZAMASIN38: Self = Self(365);
    pub const ITEMID_WAZAMASIN39: Self = Self(366);
    pub const ITEMID_WAZAMASIN40: Self = Self(367);
    pub const ITEMID_WAZAMASIN41: Self = Self(368);
    pub const ITEMID_WAZAMASIN42: Self = Self(369);
    pub const ITEMID_WAZAMASIN43: Self = Self(370);
    pub const ITEMID_WAZAMASIN44: Self = Self(371);
    pub const ITEMID_WAZAMASIN45: Self = Self(372);
    pub const ITEMID_WAZAMASIN46: Self = Self(373);
    pub const ITEMID_WAZAMASIN47: Self = Self(374);
    pub const ITEMID_WAZAMASIN48: Self = Self(375);
    pub const ITEMID_WAZAMASIN49: Self = Self(376);
    pub const ITEMID_WAZAMASIN50: Self = Self(377);
    pub const ITEMID_WAZAMASIN51: Self = Self(378);
    pub const ITEMID_WAZAMASIN52: Self = Self(379);
    pub const ITEMID_WAZAMASIN53: Self = Self(380);
    pub const ITEMID_WAZAMASIN54: Self = Self(381);
    pub const ITEMID_WAZAMASIN55: Self = Self(382);
    pub const ITEMID_WAZAMASIN56: Self = Self(383);
    pub const ITEMID_WAZAMASIN57: Self = Self(384);
    pub const ITEMID_WAZAMASIN58: Self = Self(385);
    pub const ITEMID_WAZAMASIN59: Self = Self(386);
    pub const ITEMID_WAZAMASIN60: Self = Self(387);
    pub const ITEMID_WAZAMASIN61: Self = Self(388);
    pub const ITEMID_WAZAMASIN62: Self = Self(389);
    pub const ITEMID_WAZAMASIN63: Self = Self(390);
    pub const ITEMID_WAZAMASIN64: Self = Self(391);
    pub const ITEMID_WAZAMASIN65: Self = Self(392);
    pub const ITEMID_WAZAMASIN66: Self = Self(393);
    pub const ITEMID_WAZAMASIN67: Self = Self(394);
    pub const ITEMID_WAZAMASIN68: Self = Self(395);
    pub const ITEMID_WAZAMASIN69: Self = Self(396);
    pub const ITEMID_WAZAMASIN70: Self = Self(397);
    pub const ITEMID_WAZAMASIN71: Self = Self(398);
    pub const ITEMID_WAZAMASIN72: Self = Self(399);
    pub const ITEMID_WAZAMASIN73: Self = Self(400);
    pub const ITEMID_WAZAMASIN74: Self = Self(401);
    pub const ITEMID_WAZAMASIN75: Self = Self(402);
    pub const ITEMID_WAZAMASIN76: Self = Self(403);
    pub const ITEMID_WAZAMASIN77: Self = Self(404);
    pub const ITEMID_WAZAMASIN78: Self = Self(405);
    pub const ITEMID_WAZAMASIN79: Self = Self(406);
    pub const ITEMID_WAZAMASIN80: Self = Self(407);
    pub const ITEMID_WAZAMASIN81: Self = Self(408);
    pub const ITEMID_WAZAMASIN82: Self = Self(409);
    pub const ITEMID_WAZAMASIN83: Self = Self(410);
    pub const ITEMID_WAZAMASIN84: Self = Self(411);
    pub const ITEMID_WAZAMASIN85: Self = Self(412);
    pub const ITEMID_WAZAMASIN86: Self = Self(413);
    pub const ITEMID_WAZAMASIN87: Self = Self(414);
    pub const ITEMID_WAZAMASIN88: Self = Self(415);
    pub const ITEMID_WAZAMASIN89: Self = Self(416);
    pub const ITEMID_WAZAMASIN90: Self = Self(417);
    pub const ITEMID_WAZAMASIN91: Self = Self(418);
    pub const ITEMID_WAZAMASIN92: Self = Self(419);
    pub const ITEMID_SUPIIDOBOORU: Self = Self(492);
    pub const ITEMID_REBERUBOORU: Self = Self(493);
    pub const ITEMID_RUAABOORU: Self = Self(494);
    pub const ITEMID_HEBIIBOORU: Self = Self(495);
    pub const ITEMID_RABURABUBOORU: Self = Self(496);
    pub const ITEMID_HURENDOBOORU: Self = Self(497);
    pub const ITEMID_MUUNBOORU: Self = Self(498);
    pub const ITEMID_KONPEBOORU: Self = Self(499);
    pub const ITEMID_SINKANOKISEKI: Self = Self(538);
    pub const ITEMID_KARUISI: Self = Self(539);
    pub const ITEMID_GOTUGOTUMETTO: Self = Self(540);
    pub const ITEMID_HUUSEN: Self = Self(541);
    pub const ITEMID_REDDOKAADO: Self = Self(542);
    pub const ITEMID_NERAINOMATO: Self = Self(543);
    pub const ITEMID_SIMETUKEBANDO: Self = Self(544);
    pub const ITEMID_KYUUKON: Self = Self(545);
    pub const ITEMID_ZYUUDENTI: Self = Self(546);
    pub const ITEMID_DASSYUTUBOTAN: Self = Self(547);
    pub const ITEMID_NOOMARUZYUERU: Self = Self(564);
    pub const ITEMID_TAIRYOKUNOHANE: Self = Self(565);
    pub const ITEMID_KINRYOKUNOHANE: Self = Self(566);
    pub const ITEMID_TEIKOUNOHANE: Self = Self(567);
    pub const ITEMID_TIRYOKUNOHANE: Self = Self(568);
    pub const ITEMID_SEISINNOHANE: Self = Self(569);
    pub const ITEMID_SYUNPATUNOHANE: Self = Self(570);
    pub const ITEMID_KIREINAHANE: Self = Self(571);
    pub const ITEMID_DORIIMUBOORU: Self = Self(576);
    pub const ITEMID_KAORUKINOKO: Self = Self(580);
    pub const ITEMID_DEKAIKINNOTAMA: Self = Self(581);
    pub const ITEMID_ODANGOSINZYU: Self = Self(582);
    pub const ITEMID_SUISEINOKAKERA: Self = Self(583);
    pub const ITEMID_WAZAMASIN93: Self = Self(618);
    pub const ITEMID_WAZAMASIN94: Self = Self(619);
    pub const ITEMID_WAZAMASIN95: Self = Self(620);
    pub const ITEMID_HIKARUOMAMORI: Self = Self(632);
    pub const ITEMID_UTUSIKAGAMI: Self = Self(638);
    pub const ITEMID_ZYAKUTENHOKEN: Self = Self(639);
    pub const ITEMID_TOTUGEKITYOKKI: Self = Self(640);
    pub const ITEMID_SEIREIPUREETO: Self = Self(644);
    pub const ITEMID_TOKUSEIKAPUSERU: Self = Self(645);
    pub const ITEMID_HIKARIGOKE: Self = Self(648);
    pub const ITEMID_YUKIDAMA: Self = Self(649);
    pub const ITEMID_BOUZINGOOGURU: Self = Self(650);
    pub const ITEMID_ROZERUNOMI: Self = Self(686);
    pub const ITEMID_AKKINOMI: Self = Self(687);
    pub const ITEMID_TARAPUNOMI: Self = Self(688);
    pub const ITEMID_WAZAMASIN96: Self = Self(690);
    pub const ITEMID_WAZAMASIN97: Self = Self(691);
    pub const ITEMID_WAZAMASIN98: Self = Self(692);
    pub const ITEMID_WAZAMASIN99: Self = Self(693);
    pub const ITEMID_TANKENKOKOROE: Self = Self(703);
    pub const ITEMID_IMASIMENOTUBO: Self = Self(765);
    pub const ITEMID_GINNOOUKAN: Self = Self(795);
    pub const ITEMID_KINNOOUKAN: Self = Self(796);
    pub const ITEMID_BIBIRIDAMA: Self = Self(846);
    pub const ITEMID_KOORINOISI: Self = Self(849);
    pub const ITEMID_URUTORABOORU: Self = Self(851);
    pub const ITEMID_KURENAINOMITU: Self = Self(853);
    pub const ITEMID_YAMABUKINOMITU: Self = Self(854);
    pub const ITEMID_USUMOMONOMITU: Self = Self(855);
    pub const ITEMID_MURASAKINOMITU: Self = Self(856);
    pub const ITEMID_GURANDOKOOTO: Self = Self(879);
    pub const ITEMID_BOUGOPATTO: Self = Self(880);
    pub const ITEMID_EREKISIIDO: Self = Self(881);
    pub const ITEMID_SAIKOSIIDO: Self = Self(882);
    pub const ITEMID_MISUTOSIIDO: Self = Self(883);
    pub const ITEMID_GURASUSIIDO: Self = Self(884);
    pub const ITEMID_KUTITATURUGI: Self = Self(1103);
    pub const ITEMID_KUTITATATE: Self = Self(1104);
    pub const ITEMID_AMAAIRINGO: Self = Self(1116);
    pub const ITEMID_SUPPAIRINGO: Self = Self(1117);
    pub const ITEMID_NODOAME: Self = Self(1118);
    pub const ITEMID_DASSYUTUPAKKU: Self = Self(1119);
    pub const ITEMID_ATUZOKOBUUTU: Self = Self(1120);
    pub const ITEMID_KARABURIHOKEN: Self = Self(1121);
    pub const ITEMID_RUUMUSAABISU: Self = Self(1122);
    pub const ITEMID_BANNOUGASA: Self = Self(1123);
    pub const ITEMID_KEIKENTIAME_1: Self = Self(1124);
    pub const ITEMID_KEIKENTIAME_2: Self = Self(1125);
    pub const ITEMID_KEIKENTIAME_3: Self = Self(1126);
    pub const ITEMID_KEIKENTIAME_4: Self = Self(1127);
    pub const ITEMID_KEIKENTIAME_5: Self = Self(1128);
    pub const ITEMID_SAMISIGARIMINTO: Self = Self(1231);
    pub const ITEMID_IZIPPARIMINTO: Self = Self(1232);
    pub const ITEMID_YANTYAMINTO: Self = Self(1233);
    pub const ITEMID_YUKANMINTO: Self = Self(1234);
    pub const ITEMID_ZUBUTOIMINTO: Self = Self(1235);
    pub const ITEMID_WANPAKUMINTO: Self = Self(1236);
    pub const ITEMID_NOUTENKIMINTO: Self = Self(1237);
    pub const ITEMID_NONKIMINTO: Self = Self(1238);
    pub const ITEMID_HIKAEMEMINTO: Self = Self(1239);
    pub const ITEMID_OTTORIMINTO: Self = Self(1240);
    pub const ITEMID_UKKARIMINTO: Self = Self(1241);
    pub const ITEMID_REISEIMINTO: Self = Self(1242);
    pub const ITEMID_ODAYAKAMINTO: Self = Self(1243);
    pub const ITEMID_OTONASIIMINTO: Self = Self(1244);
    pub const ITEMID_SINTYOUMINTO: Self = Self(1245);
    pub const ITEMID_NAMAIKIMINTO: Self = Self(1246);
    pub const ITEMID_OKUBYOUMINTO: Self = Self(1247);
    pub const ITEMID_SEKKTIMINTO: Self = Self(1248);
    pub const ITEMID_YOUKIMINTO: Self = Self(1249);
    pub const ITEMID_MUJYAKIMINTO: Self = Self(1250);
    pub const ITEMID_MAZIMEMINTO: Self = Self(1251);
    pub const ITEMID_WARETAPOTTO: Self = Self(1253);
    pub const ITEMID_KAKETAPOTTO: Self = Self(1254);
    pub const ITEMID_ROTOMUNOKATAROGU: Self = Self(1278);
    pub const ITEMID_GARANATUBURESU: Self = Self(1582);
    pub const ITEMID_KIDUNANODADUNA: Self = Self(1590);
    pub const ITEMID_KIDUNANODADUNA_KAIZYO: Self = Self(1591);
    pub const ITEMID_GARANATURIISU: Self = Self(1592);
    pub const ITEMID_TOKUSEIPATTI: Self = Self(1606);
    pub const ITEMID_DAIKONGOUDAMA: Self = Self(1777);
    pub const ITEMID_DAISIRATAMA: Self = Self(1778);
    pub const ITEMID_DAIHAKKINDAMA: Self = Self(1779);
    pub const ITEMID_SUMAHOROTOMU: Self = Self(1829);
    pub const ITEMID_SANDOUICCHI: Self = Self(1830);
    pub const ITEMID_DENSETSUBOORUA: Self = Self(1831);
    pub const ITEMID_DENSETSUBOORUB: Self = Self(1832);
    pub const ITEMID_TAKARABOORU: Self = Self(1833);
    pub const ITEMID_GENSYOA: Self = Self(1834);
    pub const ITEMID_GENSYOB: Self = Self(1835);
    pub const ITEMID_HIROTTASAIFU: Self = Self(1836);
    pub const ITEMID_CHIISANATAKENOKO: Self = Self(1842);
    pub const ITEMID_OOKINATAKENOKO: Self = Self(1843);
    pub const ITEMID_AKUNOKAKEJIKU: Self = Self(1857);
    pub const ITEMID_MIZUNOKAKEJIKU: Self = Self(1858);
    pub const ITEMID_NOROINOYOROI: Self = Self(1861);
    pub const ITEMID_CHENJAA1: Self = Self(1862);
    pub const ITEMID_CHENJAA2: Self = Self(1863);
    pub const ITEMID_CHENJAA3: Self = Self(1864);
    pub const ITEMID_CHENJAA4: Self = Self(1865);
    pub const ITEMID_CHENJAA5: Self = Self(1866);
    pub const ITEMID_CHENJAA6: Self = Self(1867);
    pub const ITEMID_CHENJAA7: Self = Self(1868);
    pub const ITEMID_CHENJAA8: Self = Self(1869);
    pub const ITEMID_CHENJAA9: Self = Self(1870);
    pub const ITEMID_CHENJAA10: Self = Self(1871);
    pub const ITEMID_CHENJAA11: Self = Self(1872);
    pub const ITEMID_CHENJAA12: Self = Self(1873);
    pub const ITEMID_CHENJAA13: Self = Self(1874);
    pub const ITEMID_CHENJAA14: Self = Self(1875);
    pub const ITEMID_CHENJAA15: Self = Self(1876);
    pub const ITEMID_CHENJAA16: Self = Self(1877);
    pub const ITEMID_CHENJAA17: Self = Self(1878);
    pub const ITEMID_CHENJAA18: Self = Self(1879);
    pub const ITEMID_BUUSUTOENAJII: Self = Self(1880);
    pub const ITEMID_SENTOUBAFFA1: Self = Self(1881);
    pub const ITEMID_SENTOUBAFFA2: Self = Self(1882);
    pub const ITEMID_SENTOUBAFFA3: Self = Self(1883);
    pub const ITEMID_SENTOUBAFFA4: Self = Self(1884);
    pub const ITEMID_SENTOUBAFFA5: Self = Self(1885);
    pub const ITEMID_SENTOUBAFFA6: Self = Self(1886);
    pub const ITEMID_MAYONEEZU: Self = Self(1889);
    pub const ITEMID_KECHAPPU: Self = Self(1890);
    pub const ITEMID_MASUTAADO: Self = Self(1891);
    pub const ITEMID_BATAA: Self = Self(1892);
    pub const ITEMID_PIINATTSUBATAA: Self = Self(1893);
    pub const ITEMID_CHIRISOOSU: Self = Self(1894);
    pub const ITEMID_SORUTO: Self = Self(1895);
    pub const ITEMID_PEPPAA: Self = Self(1896);
    pub const ITEMID_YOOGURUTO: Self = Self(1897);
    pub const ITEMID_HOIPPUKURIIMU: Self = Self(1898);
    pub const ITEMID_KURIIMUCHIIZU: Self = Self(1899);
    pub const ITEMID_BERIIJAMU: Self = Self(1900);
    pub const ITEMID_MAAMAREEDO: Self = Self(1901);
    pub const ITEMID_ORIIBUOIRU: Self = Self(1902);
    pub const ITEMID_BINEGAA: Self = Self(1903);
    pub const ITEMID_TAKARASUPAISU1: Self = Self(1904);
    pub const ITEMID_TAKARASUPAISU2: Self = Self(1905);
    pub const ITEMID_TAKARASUPAISU3: Self = Self(1906);
    pub const ITEMID_TAKARASUPAISU4: Self = Self(1907);
    pub const ITEMID_TAKARASUPAISU5: Self = Self(1908);
    pub const ITEMID_RETASUPAKKU: Self = Self(1909);
    pub const ITEMID_TOMATOSURAISU: Self = Self(1910);
    pub const ITEMID_KATTOMINITOMATO: Self = Self(1911);
    pub const ITEMID_KYUURISURAISU: Self = Self(1912);
    pub const ITEMID_PIKURUSUSURAISU: Self = Self(1913);
    pub const ITEMID_TAMANEGISURAISU: Self = Self(1914);
    pub const ITEMID_REDDOAARII: Self = Self(1915);
    pub const ITEMID_PIIMANSURAISU: Self = Self(1916);
    pub const ITEMID_AKAPAPURIKASURAISU: Self = Self(1917);
    pub const ITEMID_KIPAPURIKASURAISU: Self = Self(1918);
    pub const ITEMID_ABOKADO: Self = Self(1919);
    pub const ITEMID_YAKIBEEKON: Self = Self(1920);
    pub const ITEMID_HAMUSURAISU: Self = Self(1921);
    pub const ITEMID_NAMAHAMU: Self = Self(1922);
    pub const ITEMID_YAKICHORISOO: Self = Self(1923);
    pub const ITEMID_BOIRUSOOSEEJI: Self = Self(1924);
    pub const ITEMID_HANBAAGU: Self = Self(1925);
    pub const ITEMID_KANISUTIKKU: Self = Self(1926);
    pub const ITEMID_SUMOOKUKIRIMI: Self = Self(1927);
    pub const ITEMID_KIRIMIFURAI: Self = Self(1928);
    pub const ITEMID_SURAISUEGGU: Self = Self(1929);
    pub const ITEMID_TORUTIIJA: Self = Self(1930);
    pub const ITEMID_TOOFU: Self = Self(1931);
    pub const ITEMID_RAISU: Self = Self(1932);
    pub const ITEMID_NUUDORU: Self = Self(1933);
    pub const ITEMID_POTETOSARADA: Self = Self(1934);
    pub const ITEMID_SURAISUCHIIZU: Self = Self(1935);
    pub const ITEMID_BANANASURAISU: Self = Self(1936);
    pub const ITEMID_ICHIGOSURAISU: Self = Self(1937);
    pub const ITEMID_WAGIRIRINGO: Self = Self(1938);
    pub const ITEMID_WAGIRIKIUI: Self = Self(1939);
    pub const ITEMID_KATTOPAIN: Self = Self(1940);
    pub const ITEMID_HARAPEENYO: Self = Self(1941);
    pub const ITEMID_HOOSURADISSHU: Self = Self(1942);
    pub const ITEMID_KAREEPAUDAA: Self = Self(1943);
    pub const ITEMID_WASABISOOSU: Self = Self(1944);
    pub const ITEMID_KURESON: Self = Self(1945);
    pub const ITEMID_BAJIRU: Self = Self(1946);
    pub const ITEMID_SOZAI01: Self = Self(1956);
    pub const ITEMID_SOZAI02: Self = Self(1957);
    pub const ITEMID_SOZAI03: Self = Self(1958);
    pub const ITEMID_SOZAI04: Self = Self(1959);
    pub const ITEMID_SOZAI05: Self = Self(1960);
    pub const ITEMID_SOZAI06: Self = Self(1961);
    pub const ITEMID_SOZAI07: Self = Self(1962);
    pub const ITEMID_SOZAI08: Self = Self(1963);
    pub const ITEMID_SOZAI09: Self = Self(1964);
    pub const ITEMID_SOZAI10: Self = Self(1965);
    pub const ITEMID_SOZAI11: Self = Self(1966);
    pub const ITEMID_SOZAI12: Self = Self(1967);
    pub const ITEMID_SOZAI13: Self = Self(1968);
    pub const ITEMID_SOZAI14: Self = Self(1969);
    pub const ITEMID_SOZAI15: Self = Self(1970);
    pub const ITEMID_SOZAI16: Self = Self(1971);
    pub const ITEMID_SOZAI17: Self = Self(1972);
    pub const ITEMID_SOZAI18: Self = Self(1973);
    pub const ITEMID_SOZAI19: Self = Self(1974);
    pub const ITEMID_SOZAI20: Self = Self(1975);
    pub const ITEMID_SOZAI21: Self = Self(1976);
    pub const ITEMID_SOZAI22: Self = Self(1977);
    pub const ITEMID_SOZAI23: Self = Self(1978);
    pub const ITEMID_SOZAI24: Self = Self(1979);
    pub const ITEMID_SOZAI25: Self = Self(1980);
    pub const ITEMID_SOZAI26: Self = Self(1981);
    pub const ITEMID_SOZAI27: Self = Self(1982);
    pub const ITEMID_SOZAI28: Self = Self(1983);
    pub const ITEMID_SOZAI29: Self = Self(1984);
    pub const ITEMID_SOZAI30: Self = Self(1985);
    pub const ITEMID_SOZAI31: Self = Self(1986);
    pub const ITEMID_SOZAI32: Self = Self(1987);
    pub const ITEMID_SOZAI33: Self = Self(1988);
    pub const ITEMID_SOZAI34: Self = Self(1989);
    pub const ITEMID_SOZAI35: Self = Self(1990);
    pub const ITEMID_SOZAI36: Self = Self(1991);
    pub const ITEMID_SOZAI37: Self = Self(1992);
    pub const ITEMID_SOZAI38: Self = Self(1993);
    pub const ITEMID_SOZAI39: Self = Self(1994);
    pub const ITEMID_SOZAI40: Self = Self(1995);
    pub const ITEMID_SOZAI41: Self = Self(1996);
    pub const ITEMID_SOZAI42: Self = Self(1997);
    pub const ITEMID_SOZAI43: Self = Self(1998);
    pub const ITEMID_SOZAI44: Self = Self(1999);
    pub const ITEMID_SOZAI45: Self = Self(2000);
    pub const ITEMID_SOZAI46: Self = Self(2001);
    pub const ITEMID_SOZAI47: Self = Self(2002);
    pub const ITEMID_SOZAI48: Self = Self(2003);
    pub const ITEMID_SOZAI49: Self = Self(2004);
    pub const ITEMID_SOZAI50: Self = Self(2005);
    pub const ITEMID_SOZAI51: Self = Self(2006);
    pub const ITEMID_SOZAI52: Self = Self(2007);
    pub const ITEMID_SOZAI53: Self = Self(2008);
    pub const ITEMID_SOZAI54: Self = Self(2009);
    pub const ITEMID_SOZAI55: Self = Self(2010);
    pub const ITEMID_SOZAI56: Self = Self(2011);
    pub const ITEMID_SOZAI57: Self = Self(2012);
    pub const ITEMID_SOZAI58: Self = Self(2013);
    pub const ITEMID_SOZAI59: Self = Self(2014);
    pub const ITEMID_SOZAI60: Self = Self(2015);
    pub const ITEMID_SOZAI61: Self = Self(2016);
    pub const ITEMID_SOZAI62: Self = Self(2017);
    pub const ITEMID_SOZAI63: Self = Self(2018);
    pub const ITEMID_SOZAI64: Self = Self(2019);
    pub const ITEMID_SOZAI65: Self = Self(2020);
    pub const ITEMID_SOZAI66: Self = Self(2021);
    pub const ITEMID_SOZAI67: Self = Self(2022);
    pub const ITEMID_SOZAI68: Self = Self(2023);
    pub const ITEMID_SOZAI69: Self = Self(2024);
    pub const ITEMID_SOZAI70: Self = Self(2025);
    pub const ITEMID_SOZAI71: Self = Self(2026);
    pub const ITEMID_SOZAI72: Self = Self(2027);
    pub const ITEMID_SOZAI73: Self = Self(2028);
    pub const ITEMID_SOZAI74: Self = Self(2029);
    pub const ITEMID_SOZAI75: Self = Self(2030);
    pub const ITEMID_SOZAI76: Self = Self(2031);
    pub const ITEMID_SOZAI77: Self = Self(2032);
    pub const ITEMID_SOZAI78: Self = Self(2033);
    pub const ITEMID_SOZAI79: Self = Self(2034);
    pub const ITEMID_SOZAI80: Self = Self(2035);
    pub const ITEMID_SOZAI81: Self = Self(2036);
    pub const ITEMID_SOZAI82: Self = Self(2037);
    pub const ITEMID_SOZAI83: Self = Self(2038);
    pub const ITEMID_SOZAI84: Self = Self(2039);
    pub const ITEMID_SOZAI85: Self = Self(2040);
    pub const ITEMID_SOZAI86: Self = Self(2041);
    pub const ITEMID_SOZAI87: Self = Self(2042);
    pub const ITEMID_SOZAI88: Self = Self(2043);
    pub const ITEMID_SOZAI89: Self = Self(2044);
    pub const ITEMID_SOZAI90: Self = Self(2045);
    pub const ITEMID_SOZAI91: Self = Self(2046);
    pub const ITEMID_SOZAI92: Self = Self(2047);
    pub const ITEMID_SOZAI93: Self = Self(2048);
    pub const ITEMID_SOZAI94: Self = Self(2049);
    pub const ITEMID_SOZAI95: Self = Self(2050);
    pub const ITEMID_SOZAI96: Self = Self(2051);
    pub const ITEMID_SOZAI97: Self = Self(2052);
    pub const ITEMID_SOZAI98: Self = Self(2053);
    pub const ITEMID_SOZAI99: Self = Self(2054);
    pub const ITEMID_SOZAI100: Self = Self(2055);
    pub const ITEMID_SOZAI101: Self = Self(2056);
    pub const ITEMID_SOZAI102: Self = Self(2057);
    pub const ITEMID_SOZAI103: Self = Self(2058);
    pub const ITEMID_SOZAI104: Self = Self(2059);
    pub const ITEMID_SOZAI105: Self = Self(2060);
    pub const ITEMID_SOZAI106: Self = Self(2061);
    pub const ITEMID_SOZAI107: Self = Self(2062);
    pub const ITEMID_SOZAI108: Self = Self(2063);
    pub const ITEMID_SOZAI109: Self = Self(2064);
    pub const ITEMID_SOZAI110: Self = Self(2065);
    pub const ITEMID_SOZAI111: Self = Self(2066);
    pub const ITEMID_SOZAI112: Self = Self(2067);
    pub const ITEMID_SOZAI113: Self = Self(2068);
    pub const ITEMID_SOZAI114: Self = Self(2069);
    pub const ITEMID_SOZAI115: Self = Self(2070);
    pub const ITEMID_SOZAI116: Self = Self(2071);
    pub const ITEMID_SOZAI117: Self = Self(2072);
    pub const ITEMID_SOZAI118: Self = Self(2073);
    pub const ITEMID_SOZAI119: Self = Self(2074);
    pub const ITEMID_SOZAI120: Self = Self(2075);
    pub const ITEMID_SOZAI121: Self = Self(2076);
    pub const ITEMID_SOZAI122: Self = Self(2077);
    pub const ITEMID_SOZAI123: Self = Self(2078);
    pub const ITEMID_SOZAI124: Self = Self(2079);
    pub const ITEMID_SOZAI125: Self = Self(2080);
    pub const ITEMID_SOZAI126: Self = Self(2081);
    pub const ITEMID_SOZAI127: Self = Self(2082);
    pub const ITEMID_SOZAI128: Self = Self(2083);
    pub const ITEMID_SOZAI129: Self = Self(2084);
    pub const ITEMID_SOZAI130: Self = Self(2085);
    pub const ITEMID_SOZAI131: Self = Self(2086);
    pub const ITEMID_SOZAI132: Self = Self(2087);
    pub const ITEMID_SOZAI133: Self = Self(2088);
    pub const ITEMID_SOZAI134: Self = Self(2089);
    pub const ITEMID_SOZAI135: Self = Self(2090);
    pub const ITEMID_SOZAI136: Self = Self(2091);
    pub const ITEMID_SOZAI137: Self = Self(2092);
    pub const ITEMID_SOZAI138: Self = Self(2093);
    pub const ITEMID_SOZAI139: Self = Self(2094);
    pub const ITEMID_SOZAI140: Self = Self(2095);
    pub const ITEMID_SOZAI141: Self = Self(2096);
    pub const ITEMID_SOZAI142: Self = Self(2097);
    pub const ITEMID_SOZAI143: Self = Self(2098);
    pub const ITEMID_SOZAI144: Self = Self(2099);
    pub const ITEMID_SOZAI148: Self = Self(2103);
    pub const ITEMID_SOZAI149: Self = Self(2104);
    pub const ITEMID_SOZAI150: Self = Self(2105);
    pub const ITEMID_SOZAI151: Self = Self(2106);
    pub const ITEMID_SOZAI152: Self = Self(2107);
    pub const ITEMID_SOZAI153: Self = Self(2108);
    pub const ITEMID_SOZAI154: Self = Self(2109);
    pub const ITEMID_SOZAI155: Self = Self(2110);
    pub const ITEMID_SOZAI156: Self = Self(2111);
    pub const ITEMID_SOZAI157: Self = Self(2112);
    pub const ITEMID_SOZAI158: Self = Self(2113);
    pub const ITEMID_SOZAI159: Self = Self(2114);
    pub const ITEMID_SOZAI160: Self = Self(2115);
    pub const ITEMID_SOZAI161: Self = Self(2116);
    pub const ITEMID_SOZAI162: Self = Self(2117);
    pub const ITEMID_SOZAI163: Self = Self(2118);
    pub const ITEMID_SOZAI164: Self = Self(2119);
    pub const ITEMID_SOZAI165: Self = Self(2120);
    pub const ITEMID_SOZAI166: Self = Self(2121);
    pub const ITEMID_SOZAI167: Self = Self(2122);
    pub const ITEMID_SOZAI168: Self = Self(2123);
    pub const ITEMID_SOZAI171: Self = Self(2126);
    pub const ITEMID_SOZAI172: Self = Self(2127);
    pub const ITEMID_SOZAI173: Self = Self(2128);
    pub const ITEMID_SOZAI174: Self = Self(2129);
    pub const ITEMID_SOZAI175: Self = Self(2130);
    pub const ITEMID_SOZAI176: Self = Self(2131);
    pub const ITEMID_SOZAI177: Self = Self(2132);
    pub const ITEMID_SOZAI178: Self = Self(2133);
    pub const ITEMID_SOZAI179: Self = Self(2134);
    pub const ITEMID_SOZAI180: Self = Self(2135);
    pub const ITEMID_SOZAI181: Self = Self(2136);
    pub const ITEMID_SOZAI182: Self = Self(2137);
    pub const ITEMID_SOZAI201: Self = Self(2156);
    pub const ITEMID_SOZAI202: Self = Self(2157);
    pub const ITEMID_SOZAI203: Self = Self(2158);
    pub const ITEMID_SOZAI204: Self = Self(2159);
    pub const ITEMID_WAZAMASIN100: Self = Self(2160);
    pub const ITEMID_WAZAMASIN101: Self = Self(2161);
    pub const ITEMID_WAZAMASIN102: Self = Self(2162);
    pub const ITEMID_WAZAMASIN103: Self = Self(2163);
    pub const ITEMID_WAZAMASIN104: Self = Self(2164);
    pub const ITEMID_WAZAMASIN105: Self = Self(2165);
    pub const ITEMID_WAZAMASIN106: Self = Self(2166);
    pub const ITEMID_WAZAMASIN107: Self = Self(2167);
    pub const ITEMID_WAZAMASIN108: Self = Self(2168);
    pub const ITEMID_WAZAMASIN109: Self = Self(2169);
    pub const ITEMID_WAZAMASIN110: Self = Self(2170);
    pub const ITEMID_WAZAMASIN111: Self = Self(2171);
    pub const ITEMID_WAZAMASIN112: Self = Self(2172);
    pub const ITEMID_WAZAMASIN113: Self = Self(2173);
    pub const ITEMID_WAZAMASIN114: Self = Self(2174);
    pub const ITEMID_WAZAMASIN115: Self = Self(2175);
    pub const ITEMID_WAZAMASIN116: Self = Self(2176);
    pub const ITEMID_WAZAMASIN117: Self = Self(2177);
    pub const ITEMID_WAZAMASIN118: Self = Self(2178);
    pub const ITEMID_WAZAMASIN119: Self = Self(2179);
    pub const ITEMID_WAZAMASIN120: Self = Self(2180);
    pub const ITEMID_WAZAMASIN121: Self = Self(2181);
    pub const ITEMID_WAZAMASIN122: Self = Self(2182);
    pub const ITEMID_WAZAMASIN123: Self = Self(2183);
    pub const ITEMID_WAZAMASIN124: Self = Self(2184);
    pub const ITEMID_WAZAMASIN125: Self = Self(2185);
    pub const ITEMID_WAZAMASIN126: Self = Self(2186);
    pub const ITEMID_WAZAMASIN127: Self = Self(2187);
    pub const ITEMID_WAZAMASIN128: Self = Self(2188);
    pub const ITEMID_WAZAMASIN129: Self = Self(2189);
    pub const ITEMID_WAZAMASIN130: Self = Self(2190);
    pub const ITEMID_WAZAMASIN131: Self = Self(2191);
    pub const ITEMID_WAZAMASIN132: Self = Self(2192);
    pub const ITEMID_WAZAMASIN133: Self = Self(2193);
    pub const ITEMID_WAZAMASIN134: Self = Self(2194);
    pub const ITEMID_WAZAMASIN135: Self = Self(2195);
    pub const ITEMID_WAZAMASIN136: Self = Self(2196);
    pub const ITEMID_WAZAMASIN137: Self = Self(2197);
    pub const ITEMID_WAZAMASIN138: Self = Self(2198);
    pub const ITEMID_WAZAMASIN139: Self = Self(2199);
    pub const ITEMID_WAZAMASIN140: Self = Self(2200);
    pub const ITEMID_WAZAMASIN141: Self = Self(2201);
    pub const ITEMID_WAZAMASIN142: Self = Self(2202);
    pub const ITEMID_WAZAMASIN143: Self = Self(2203);
    pub const ITEMID_WAZAMASIN144: Self = Self(2204);
    pub const ITEMID_WAZAMASIN145: Self = Self(2205);
    pub const ITEMID_WAZAMASIN146: Self = Self(2206);
    pub const ITEMID_WAZAMASIN147: Self = Self(2207);
    pub const ITEMID_WAZAMASIN148: Self = Self(2208);
    pub const ITEMID_WAZAMASIN149: Self = Self(2209);
    pub const ITEMID_WAZAMASIN150: Self = Self(2210);
    pub const ITEMID_WAZAMASIN151: Self = Self(2211);
    pub const ITEMID_WAZAMASIN152: Self = Self(2212);
    pub const ITEMID_WAZAMASIN153: Self = Self(2213);
    pub const ITEMID_WAZAMASIN154: Self = Self(2214);
    pub const ITEMID_WAZAMASIN155: Self = Self(2215);
    pub const ITEMID_WAZAMASIN156: Self = Self(2216);
    pub const ITEMID_WAZAMASIN157: Self = Self(2217);
    pub const ITEMID_WAZAMASIN158: Self = Self(2218);
    pub const ITEMID_WAZAMASIN159: Self = Self(2219);
    pub const ITEMID_WAZAMASIN160: Self = Self(2220);
    pub const ITEMID_WAZAMASIN161: Self = Self(2221);
    pub const ITEMID_WAZAMASIN162: Self = Self(2222);
    pub const ITEMID_WAZAMASIN163: Self = Self(2223);
    pub const ITEMID_WAZAMASIN164: Self = Self(2224);
    pub const ITEMID_WAZAMASIN165: Self = Self(2225);
    pub const ITEMID_WAZAMASIN166: Self = Self(2226);
    pub const ITEMID_WAZAMASIN167: Self = Self(2227);
    pub const ITEMID_WAZAMASIN168: Self = Self(2228);
    pub const ITEMID_WAZAMASIN169: Self = Self(2229);
    pub const ITEMID_WAZAMASIN170: Self = Self(2230);
    pub const ITEMID_WAZAMASIN171: Self = Self(2231);
    pub const ITEMID_PIKUNIKKUSETTO: Self = Self(2311);
    pub const ITEMID_SUITOU1: Self = Self(2313);
    pub const ITEMID_SUITOU2: Self = Self(2314);
    pub const ITEMID_SUITOU3: Self = Self(2315);
    pub const ITEMID_SUITOU4: Self = Self(2316);
    pub const ITEMID_SUITOU5: Self = Self(2317);
    pub const ITEMID_KOPPU1: Self = Self(2318);
    pub const ITEMID_KOPPU2: Self = Self(2319);
    pub const ITEMID_KOPPU3: Self = Self(2320);
    pub const ITEMID_KOPPU4: Self = Self(2321);
    pub const ITEMID_KOPPU5: Self = Self(2322);
    pub const ITEMID_TEEBURUKABAA1: Self = Self(2323);
    pub const ITEMID_TEEBURUKABAA2: Self = Self(2324);
    pub const ITEMID_TEEBURUKABAA3: Self = Self(2325);
    pub const ITEMID_TEEBURUKABAA4: Self = Self(2326);
    pub const ITEMID_TEEBURUKABAA5: Self = Self(2327);
    pub const ITEMID_PIKUNIKKUBOORU1: Self = Self(2329);
    pub const ITEMID_PIKUNIKKUBOORU2: Self = Self(2330);
    pub const ITEMID_PIKUNIKKUBOORU3: Self = Self(2331);
    pub const ITEMID_PIKUNIKKUBOORU4: Self = Self(2332);
    pub const ITEMID_PIKUNIKKUBOORU5: Self = Self(2333);
    pub const ITEMID_RANCHIPIKKU1: Self = Self(2334);
    pub const ITEMID_RANCHIPIKKU2: Self = Self(2335);
    pub const ITEMID_RANCHIPIKKU3: Self = Self(2336);
    pub const ITEMID_RANCHIPIKKU4: Self = Self(2337);
    pub const ITEMID_RANCHIPIKKU5: Self = Self(2338);
    pub const ITEMID_RANCHIPIKKU6: Self = Self(2339);
    pub const ITEMID_RANCHIPIKKU7: Self = Self(2340);
    pub const ITEMID_RANCHIPIKKU8: Self = Self(2341);
    pub const ITEMID_RANCHIPIKKU9: Self = Self(2342);
    pub const ITEMID_IWAINOYOROI: Self = Self(2344);
    pub const ITEMID_KASIRANOAKASI: Self = Self(2345);
    pub const ITEMID_SUITOU6: Self = Self(2348);
    pub const ITEMID_SUITOU7: Self = Self(2349);
    pub const ITEMID_SUITOU8: Self = Self(2350);
    pub const ITEMID_SUITOU9: Self = Self(2351);
    pub const ITEMID_SUITOU10: Self = Self(2352);
    pub const ITEMID_SUITOU11: Self = Self(2353);
    pub const ITEMID_SUITOU12: Self = Self(2354);
    pub const ITEMID_KOPPU6: Self = Self(2355);
    pub const ITEMID_KOPPU7: Self = Self(2356);
    pub const ITEMID_KOPPU8: Self = Self(2357);
    pub const ITEMID_KOPPU9: Self = Self(2358);
    pub const ITEMID_KOPPU10: Self = Self(2359);
    pub const ITEMID_KOPPU11: Self = Self(2360);
    pub const ITEMID_KOPPU12: Self = Self(2361);
    pub const ITEMID_KOPPU13: Self = Self(2362);
    pub const ITEMID_KOPPU14: Self = Self(2363);
    pub const ITEMID_KOPPU15: Self = Self(2364);
    pub const ITEMID_PIKUNIKKUBOORU6: Self = Self(2365);
    pub const ITEMID_TEEBURUKABAA6: Self = Self(2366);
    pub const ITEMID_TEEBURUKABAA7: Self = Self(2367);
    pub const ITEMID_TEEBURUKABAA8: Self = Self(2368);
    pub const ITEMID_TEEBURUKABAA9: Self = Self(2369);
    pub const ITEMID_TEEBURUKABAA10: Self = Self(2370);
    pub const ITEMID_TEEBURUKABAA11: Self = Self(2371);
    pub const ITEMID_TEEBURUKABAA12: Self = Self(2372);
    pub const ITEMID_TEEBURUKABAA13: Self = Self(2373);
    pub const ITEMID_TEEBURUKABAA14: Self = Self(2374);
    pub const ITEMID_TEEBURUKABAA15: Self = Self(2375);
    pub const ITEMID_TEEBURUKABAA16: Self = Self(2376);
    pub const ITEMID_TEEBURUKABAA17: Self = Self(2377);
    pub const ITEMID_TEEBURUKABAA18: Self = Self(2378);
    pub const ITEMID_TEEBURUKABAA19: Self = Self(2379);
    pub const ITEMID_TEEBURUKABAA20: Self = Self(2380);
    pub const ITEMID_SUITOU13: Self = Self(2381);
    pub const ITEMID_SUITOU14: Self = Self(2382);
    pub const ITEMID_KOPPU16: Self = Self(2383);
    pub const ITEMID_KOPPU17: Self = Self(2384);
    pub const ITEMID_RANCHIPIKKU10: Self = Self(2385);
    pub const ITEMID_RANCHIPIKKU11: Self = Self(2386);
    pub const ITEMID_RANCHIPIKKU12: Self = Self(2387);
    pub const ITEMID_RANCHIPIKKU13: Self = Self(2388);
    pub const ITEMID_RANCHIPIKKU14: Self = Self(2389);
    pub const ITEMID_RANCHIPIKKU15: Self = Self(2390);
    pub const ITEMID_RANCHIPIKKU16: Self = Self(2391);
    pub const ITEMID_RANCHIPIKKU17: Self = Self(2392);
    pub const ITEMID_RANCHIPIKKU18: Self = Self(2393);
    pub const ITEMID_RANCHIPIKKU19: Self = Self(2394);
    pub const ITEMID_SARA2: Self = Self(2396);

    pub const ENUM_MIN: i32 = 0;
    pub const ENUM_MAX: i32 = 2396;
    pub const ENUM_VALUES: &'static [Self] = &[
        Self::ITEMID_NONE,
        Self::ITEMID_MASUTAABOORU,
        Self::ITEMID_HAIPAABOORU,
        Self::ITEMID_SUUPAABOORU,
        Self::ITEMID_MONSUTAABOORU,
        Self::ITEMID_SAFARIBOORU,
        Self::ITEMID_NETTOBOORU,
        Self::ITEMID_DAIBUBOORU,
        Self::ITEMID_NESUTOBOORU,
        Self::ITEMID_RIPIITOBOORU,
        Self::ITEMID_TAIMAABOORU,
        Self::ITEMID_GOOZYASUBOORU,
        Self::ITEMID_PUREMIABOORU,
        Self::ITEMID_DAAKUBOORU,
        Self::ITEMID_HIIRUBOORU,
        Self::ITEMID_KUIKKUBOORU,
        Self::ITEMID_KIZUGUSURI,
        Self::ITEMID_DOKUKESI,
        Self::ITEMID_YAKEDONAOSI,
        Self::ITEMID_KOORINAOSI,
        Self::ITEMID_NEMUKEZAMASI,
        Self::ITEMID_MAHINAOSI,
        Self::ITEMID_KAIHUKUNOKUSURI,
        Self::ITEMID_MANTANNOKUSURI,
        Self::ITEMID_SUGOIKIZUGUSURI,
        Self::ITEMID_IIKIZUGUSURI,
        Self::ITEMID_NANDEMONAOSI,
        Self::ITEMID_GENKINOKAKERA,
        Self::ITEMID_GENKINOKATAMARI,
        Self::ITEMID_OISIIMIZU,
        Self::ITEMID_SAIKOSOODA,
        Self::ITEMID_MIKKUSUORE,
        Self::ITEMID_MOOMOOMIRUKU,
        Self::ITEMID_TIKARANOKONA,
        Self::ITEMID_TIKARANONEKKO,
        Self::ITEMID_BANNOUGONA,
        Self::ITEMID_HUKKATUSOU,
        Self::ITEMID_PIIPIIEIDO,
        Self::ITEMID_PIIPIIRIKABAA,
        Self::ITEMID_PIIPIIEIDAA,
        Self::ITEMID_PIIPIIMAKKUSU,
        Self::ITEMID_MAKKUSUAPPU,
        Self::ITEMID_TAURIN,
        Self::ITEMID_BUROMUHEKISIN,
        Self::ITEMID_INDOMETASIN,
        Self::ITEMID_RIZOTIUMU,
        Self::ITEMID_HUSIGINAAME,
        Self::ITEMID_POINTOAPPU,
        Self::ITEMID_KITOSAN,
        Self::ITEMID_POINTOMAKKUSU,
        Self::ITEMID_EFEKUTOGAADO,
        Self::ITEMID_KURITHIKATTO,
        Self::ITEMID_PURASUPAWAA,
        Self::ITEMID_DHIFENDAA,
        Self::ITEMID_SUPIIDAA,
        Self::ITEMID_YOKUATAARU,
        Self::ITEMID_SUPESYARUAPPU,
        Self::ITEMID_SUPESYARUGAADO,
        Self::ITEMID_PIPPININGYOU,
        Self::ITEMID_TAIYOUNOISI,
        Self::ITEMID_TUKINOISI,
        Self::ITEMID_HONOONOISI,
        Self::ITEMID_KAMINARINOISI,
        Self::ITEMID_MIZUNOISI,
        Self::ITEMID_RIIHUNOISI,
        Self::ITEMID_TIISANAKINOKO,
        Self::ITEMID_OOKINAKINOKO,
        Self::ITEMID_SINZYU,
        Self::ITEMID_OOKINASINZYU,
        Self::ITEMID_HOSINOSUNA,
        Self::ITEMID_HOSINOKAKERA,
        Self::ITEMID_KINNOTAMA,
        Self::ITEMID_AMAIMITU,
        Self::ITEMID_KITYOUNAHONE,
        Self::ITEMID_HIKARINOISI,
        Self::ITEMID_YAMINOISI,
        Self::ITEMID_MEZAMEISI,
        Self::ITEMID_MANMARUISI,
        Self::ITEMID_HAKKINDAMA,
        Self::ITEMID_KONGOUDAMA,
        Self::ITEMID_SIRATAMA,
        Self::ITEMID_KURABONOMI,
        Self::ITEMID_KAGONOMI,
        Self::ITEMID_MOMONNOMI,
        Self::ITEMID_TIIGONOMI,
        Self::ITEMID_NANASINOMI,
        Self::ITEMID_HIMERINOMI,
        Self::ITEMID_ORENNOMI,
        Self::ITEMID_KIINOMI,
        Self::ITEMID_RAMUNOMI,
        Self::ITEMID_OBONNOMI,
        Self::ITEMID_FIRANOMI,
        Self::ITEMID_UINOMI,
        Self::ITEMID_MAGONOMI,
        Self::ITEMID_BANZINOMI,
        Self::ITEMID_IANOMI,
        Self::ITEMID_ZAROKUNOMI,
        Self::ITEMID_NEKOBUNOMI,
        Self::ITEMID_TAPORUNOMI,
        Self::ITEMID_ROMENOMI,
        Self::ITEMID_UBUNOMI,
        Self::ITEMID_MATOMANOMI,
        Self::ITEMID_OKKANOMI,
        Self::ITEMID_ITOKENOMI,
        Self::ITEMID_SOKUNONOMI,
        Self::ITEMID_RINDONOMI,
        Self::ITEMID_YATHENOMI,
        Self::ITEMID_YOPUNOMI,
        Self::ITEMID_BIAANOMI,
        Self::ITEMID_SYUKANOMI,
        Self::ITEMID_BAKOUNOMI,
        Self::ITEMID_UTANNOMI,
        Self::ITEMID_TANGANOMI,
        Self::ITEMID_YOROGINOMI,
        Self::ITEMID_KASIBUNOMI,
        Self::ITEMID_HABANNOMI,
        Self::ITEMID_NAMONOMI,
        Self::ITEMID_RIRIBANOMI,
        Self::ITEMID_HOZUNOMI,
        Self::ITEMID_TIIRANOMI,
        Self::ITEMID_RYUGANOMI,
        Self::ITEMID_KAMURANOMI,
        Self::ITEMID_YATAPINOMI,
        Self::ITEMID_ZUANOMI,
        Self::ITEMID_SANNOMI,
        Self::ITEMID_SUTAANOMI,
        Self::ITEMID_NAZONOMI,
        Self::ITEMID_MIKURUNOMI,
        Self::ITEMID_IBANNOMI,
        Self::ITEMID_ZYAPONOMI,
        Self::ITEMID_RENBUNOMI,
        Self::ITEMID_HIKARINOKONA,
        Self::ITEMID_SIROIHAABU,
        Self::ITEMID_SENSEINOTUME,
        Self::ITEMID_YASURAGINOSUZU,
        Self::ITEMID_MENTARUHAABU,
        Self::ITEMID_KODAWARIHATIMAKI,
        Self::ITEMID_OUZYANOSIRUSI,
        Self::ITEMID_GINNOKONA,
        Self::ITEMID_OMAMORIKOBAN,
        Self::ITEMID_KEMURIDAMA,
        Self::ITEMID_KAWARAZUNOISI,
        Self::ITEMID_KIAINOHATIMAKI,
        Self::ITEMID_SIAWASETAMAGO,
        Self::ITEMID_PINTORENZU,
        Self::ITEMID_METARUKOOTO,
        Self::ITEMID_TABENOKOSI,
        Self::ITEMID_DENKIDAMA,
        Self::ITEMID_YAWARAKAISUNA,
        Self::ITEMID_KATAIISI,
        Self::ITEMID_KISEKINOTANE,
        Self::ITEMID_KUROIMEGANE,
        Self::ITEMID_KUROOBI,
        Self::ITEMID_ZISYAKU,
        Self::ITEMID_SINPINOSIZUKU,
        Self::ITEMID_SURUDOIKUTIBASI,
        Self::ITEMID_DOKUBARI,
        Self::ITEMID_TOKENAIKOORI,
        Self::ITEMID_NOROINOOHUDA,
        Self::ITEMID_MAGATTASUPUUN,
        Self::ITEMID_MOKUTAN,
        Self::ITEMID_RYUUNOKIBA,
        Self::ITEMID_SIRUKUNOSUKAAHU,
        Self::ITEMID_KAIGARANOSUZU,
        Self::ITEMID_KOUKAKURENZU,
        Self::ITEMID_TIKARANOHATIMAKI,
        Self::ITEMID_MONOSIRIMEGANE,
        Self::ITEMID_TATUZINNOOBI,
        Self::ITEMID_HIKARINONENDO,
        Self::ITEMID_INOTINOTAMA,
        Self::ITEMID_PAWAHURUHAABU,
        Self::ITEMID_DOKUDOKUDAMA,
        Self::ITEMID_KAENDAMA,
        Self::ITEMID_KIAINOTASUKI,
        Self::ITEMID_FOOKASURENZU,
        Self::ITEMID_METORONOOMU,
        Self::ITEMID_KUROITEKKYUU,
        Self::ITEMID_KOUKOUNOSIPPO,
        Self::ITEMID_AKAIITO,
        Self::ITEMID_KUROIHEDORO,
        Self::ITEMID_TUMETAIIWA,
        Self::ITEMID_SARASARAIWA,
        Self::ITEMID_ATUIIWA,
        Self::ITEMID_SIMETTAIWA,
        Self::ITEMID_NEBARINOKAGIDUME,
        Self::ITEMID_KODAWARISUKAAHU,
        Self::ITEMID_KUTTUKIBARI,
        Self::ITEMID_PAWAARISUTO,
        Self::ITEMID_PAWAABERUTO,
        Self::ITEMID_PAWAARENZU,
        Self::ITEMID_PAWAABANDO,
        Self::ITEMID_PAWAAANKURU,
        Self::ITEMID_PAWAAUEITO,
        Self::ITEMID_KIREINANUKEGARA,
        Self::ITEMID_OOKINANEKKO,
        Self::ITEMID_KODAWARIMEGANE,
        Self::ITEMID_HINOTAMAPUREETO,
        Self::ITEMID_SIZUKUPUREETO,
        Self::ITEMID_IKAZUTIPUREETO,
        Self::ITEMID_MIDORINOPUREETO,
        Self::ITEMID_TURARANOPUREETO,
        Self::ITEMID_KOBUSINOPUREETO,
        Self::ITEMID_MOUDOKUPUREETO,
        Self::ITEMID_DAITINOPUREETO,
        Self::ITEMID_AOZORAPUREETO,
        Self::ITEMID_HUSIGINOPUREETO,
        Self::ITEMID_TAMAMUSIPUREETO,
        Self::ITEMID_GANSEKIPUREETO,
        Self::ITEMID_MONONOKEPUREETO,
        Self::ITEMID_RYUUNOPUREETO,
        Self::ITEMID_KOWAMOTEPUREETO,
        Self::ITEMID_KOUTETUPUREETO,
        Self::ITEMID_SURUDOITUME,
        Self::ITEMID_WAZAMASIN01,
        Self::ITEMID_WAZAMASIN02,
        Self::ITEMID_WAZAMASIN03,
        Self::ITEMID_WAZAMASIN04,
        Self::ITEMID_WAZAMASIN05,
        Self::ITEMID_WAZAMASIN06,
        Self::ITEMID_WAZAMASIN07,
        Self::ITEMID_WAZAMASIN08,
        Self::ITEMID_WAZAMASIN09,
        Self::ITEMID_WAZAMASIN10,
        Self::ITEMID_WAZAMASIN11,
        Self::ITEMID_WAZAMASIN12,
        Self::ITEMID_WAZAMASIN13,
        Self::ITEMID_WAZAMASIN14,
        Self::ITEMID_WAZAMASIN15,
        Self::ITEMID_WAZAMASIN16,
        Self::ITEMID_WAZAMASIN17,
        Self::ITEMID_WAZAMASIN18,
        Self::ITEMID_WAZAMASIN19,
        Self::ITEMID_WAZAMASIN20,
        Self::ITEMID_WAZAMASIN21,
        Self::ITEMID_WAZAMASIN22,
        Self::ITEMID_WAZAMASIN23,
        Self::ITEMID_WAZAMASIN24,
        Self::ITEMID_WAZAMASIN25,
        Self::ITEMID_WAZAMASIN26,
        Self::ITEMID_WAZAMASIN27,
        Self::ITEMID_WAZAMASIN28,
        Self::ITEMID_WAZAMASIN29,
        Self::ITEMID_WAZAMASIN30,
        Self::ITEMID_WAZAMASIN31,
        Self::ITEMID_WAZAMASIN32,
        Self::ITEMID_WAZAMASIN33,
        Self::ITEMID_WAZAMASIN34,
        Self::ITEMID_WAZAMASIN35,
        Self::ITEMID_WAZAMASIN36,
        Self::ITEMID_WAZAMASIN37,
        Self::ITEMID_WAZAMASIN38,
        Self::ITEMID_WAZAMASIN39,
        Self::ITEMID_WAZAMASIN40,
        Self::ITEMID_WAZAMASIN41,
        Self::ITEMID_WAZAMASIN42,
        Self::ITEMID_WAZAMASIN43,
        Self::ITEMID_WAZAMASIN44,
        Self::ITEMID_WAZAMASIN45,
        Self::ITEMID_WAZAMASIN46,
        Self::ITEMID_WAZAMASIN47,
        Self::ITEMID_WAZAMASIN48,
        Self::ITEMID_WAZAMASIN49,
        Self::ITEMID_WAZAMASIN50,
        Self::ITEMID_WAZAMASIN51,
        Self::ITEMID_WAZAMASIN52,
        Self::ITEMID_WAZAMASIN53,
        Self::ITEMID_WAZAMASIN54,
        Self::ITEMID_WAZAMASIN55,
        Self::ITEMID_WAZAMASIN56,
        Self::ITEMID_WAZAMASIN57,
        Self::ITEMID_WAZAMASIN58,
        Self::ITEMID_WAZAMASIN59,
        Self::ITEMID_WAZAMASIN60,
        Self::ITEMID_WAZAMASIN61,
        Self::ITEMID_WAZAMASIN62,
        Self::ITEMID_WAZAMASIN63,
        Self::ITEMID_WAZAMASIN64,
        Self::ITEMID_WAZAMASIN65,
        Self::ITEMID_WAZAMASIN66,
        Self::ITEMID_WAZAMASIN67,
        Self::ITEMID_WAZAMASIN68,
        Self::ITEMID_WAZAMASIN69,
        Self::ITEMID_WAZAMASIN70,
        Self::ITEMID_WAZAMASIN71,
        Self::ITEMID_WAZAMASIN72,
        Self::ITEMID_WAZAMASIN73,
        Self::ITEMID_WAZAMASIN74,
        Self::ITEMID_WAZAMASIN75,
        Self::ITEMID_WAZAMASIN76,
        Self::ITEMID_WAZAMASIN77,
        Self::ITEMID_WAZAMASIN78,
        Self::ITEMID_WAZAMASIN79,
        Self::ITEMID_WAZAMASIN80,
        Self::ITEMID_WAZAMASIN81,
        Self::ITEMID_WAZAMASIN82,
        Self::ITEMID_WAZAMASIN83,
        Self::ITEMID_WAZAMASIN84,
        Self::ITEMID_WAZAMASIN85,
        Self::ITEMID_WAZAMASIN86,
        Self::ITEMID_WAZAMASIN87,
        Self::ITEMID_WAZAMASIN88,
        Self::ITEMID_WAZAMASIN89,
        Self::ITEMID_WAZAMASIN90,
        Self::ITEMID_WAZAMASIN91,
        Self::ITEMID_WAZAMASIN92,
        Self::ITEMID_SUPIIDOBOORU,
        Self::ITEMID_REBERUBOORU,
        Self::ITEMID_RUAABOORU,
        Self::ITEMID_HEBIIBOORU,
        Self::ITEMID_RABURABUBOORU,
        Self::ITEMID_HURENDOBOORU,
        Self::ITEMID_MUUNBOORU,
        Self::ITEMID_KONPEBOORU,
        Self::ITEMID_SINKANOKISEKI,
        Self::ITEMID_KARUISI,
        Self::ITEMID_GOTUGOTUMETTO,
        Self::ITEMID_HUUSEN,
        Self::ITEMID_REDDOKAADO,
        Self::ITEMID_NERAINOMATO,
        Self::ITEMID_SIMETUKEBANDO,
        Self::ITEMID_KYUUKON,
        Self::ITEMID_ZYUUDENTI,
        Self::ITEMID_DASSYUTUBOTAN,
        Self::ITEMID_NOOMARUZYUERU,
        Self::ITEMID_TAIRYOKUNOHANE,
        Self::ITEMID_KINRYOKUNOHANE,
        Self::ITEMID_TEIKOUNOHANE,
        Self::ITEMID_TIRYOKUNOHANE,
        Self::ITEMID_SEISINNOHANE,
        Self::ITEMID_SYUNPATUNOHANE,
        Self::ITEMID_KIREINAHANE,
        Self::ITEMID_DORIIMUBOORU,
        Self::ITEMID_KAORUKINOKO,
        Self::ITEMID_DEKAIKINNOTAMA,
        Self::ITEMID_ODANGOSINZYU,
        Self::ITEMID_SUISEINOKAKERA,
        Self::ITEMID_WAZAMASIN93,
        Self::ITEMID_WAZAMASIN94,
        Self::ITEMID_WAZAMASIN95,
        Self::ITEMID_HIKARUOMAMORI,
        Self::ITEMID_UTUSIKAGAMI,
        Self::ITEMID_ZYAKUTENHOKEN,
        Self::ITEMID_TOTUGEKITYOKKI,
        Self::ITEMID_SEIREIPUREETO,
        Self::ITEMID_TOKUSEIKAPUSERU,
        Self::ITEMID_HIKARIGOKE,
        Self::ITEMID_YUKIDAMA,
        Self::ITEMID_BOUZINGOOGURU,
        Self::ITEMID_ROZERUNOMI,
        Self::ITEMID_AKKINOMI,
        Self::ITEMID_TARAPUNOMI,
        Self::ITEMID_WAZAMASIN96,
        Self::ITEMID_WAZAMASIN97,
        Self::ITEMID_WAZAMASIN98,
        Self::ITEMID_WAZAMASIN99,
        Self::ITEMID_TANKENKOKOROE,
        Self::ITEMID_IMASIMENOTUBO,
        Self::ITEMID_GINNOOUKAN,
        Self::ITEMID_KINNOOUKAN,
        Self::ITEMID_BIBIRIDAMA,
        Self::ITEMID_KOORINOISI,
        Self::ITEMID_URUTORABOORU,
        Self::ITEMID_KURENAINOMITU,
        Self::ITEMID_YAMABUKINOMITU,
        Self::ITEMID_USUMOMONOMITU,
        Self::ITEMID_MURASAKINOMITU,
        Self::ITEMID_GURANDOKOOTO,
        Self::ITEMID_BOUGOPATTO,
        Self::ITEMID_EREKISIIDO,
        Self::ITEMID_SAIKOSIIDO,
        Self::ITEMID_MISUTOSIIDO,
        Self::ITEMID_GURASUSIIDO,
        Self::ITEMID_KUTITATURUGI,
        Self::ITEMID_KUTITATATE,
        Self::ITEMID_AMAAIRINGO,
        Self::ITEMID_SUPPAIRINGO,
        Self::ITEMID_NODOAME,
        Self::ITEMID_DASSYUTUPAKKU,
        Self::ITEMID_ATUZOKOBUUTU,
        Self::ITEMID_KARABURIHOKEN,
        Self::ITEMID_RUUMUSAABISU,
        Self::ITEMID_BANNOUGASA,
        Self::ITEMID_KEIKENTIAME_1,
        Self::ITEMID_KEIKENTIAME_2,
        Self::ITEMID_KEIKENTIAME_3,
        Self::ITEMID_KEIKENTIAME_4,
        Self::ITEMID_KEIKENTIAME_5,
        Self::ITEMID_SAMISIGARIMINTO,
        Self::ITEMID_IZIPPARIMINTO,
        Self::ITEMID_YANTYAMINTO,
        Self::ITEMID_YUKANMINTO,
        Self::ITEMID_ZUBUTOIMINTO,
        Self::ITEMID_WANPAKUMINTO,
        Self::ITEMID_NOUTENKIMINTO,
        Self::ITEMID_NONKIMINTO,
        Self::ITEMID_HIKAEMEMINTO,
        Self::ITEMID_OTTORIMINTO,
        Self::ITEMID_UKKARIMINTO,
        Self::ITEMID_REISEIMINTO,
        Self::ITEMID_ODAYAKAMINTO,
        Self::ITEMID_OTONASIIMINTO,
        Self::ITEMID_SINTYOUMINTO,
        Self::ITEMID_NAMAIKIMINTO,
        Self::ITEMID_OKUBYOUMINTO,
        Self::ITEMID_SEKKTIMINTO,
        Self::ITEMID_YOUKIMINTO,
        Self::ITEMID_MUJYAKIMINTO,
        Self::ITEMID_MAZIMEMINTO,
        Self::ITEMID_WARETAPOTTO,
        Self::ITEMID_KAKETAPOTTO,
        Self::ITEMID_ROTOMUNOKATAROGU,
        Self::ITEMID_GARANATUBURESU,
        Self::ITEMID_KIDUNANODADUNA,
        Self::ITEMID_KIDUNANODADUNA_KAIZYO,
        Self::ITEMID_GARANATURIISU,
        Self::ITEMID_TOKUSEIPATTI,
        Self::ITEMID_DAIKONGOUDAMA,
        Self::ITEMID_DAISIRATAMA,
        Self::ITEMID_DAIHAKKINDAMA,
        Self::ITEMID_SUMAHOROTOMU,
        Self::ITEMID_SANDOUICCHI,
        Self::ITEMID_DENSETSUBOORUA,
        Self::ITEMID_DENSETSUBOORUB,
        Self::ITEMID_TAKARABOORU,
        Self::ITEMID_GENSYOA,
        Self::ITEMID_GENSYOB,
        Self::ITEMID_HIROTTASAIFU,
        Self::ITEMID_CHIISANATAKENOKO,
        Self::ITEMID_OOKINATAKENOKO,
        Self::ITEMID_AKUNOKAKEJIKU,
        Self::ITEMID_MIZUNOKAKEJIKU,
        Self::ITEMID_NOROINOYOROI,
        Self::ITEMID_CHENJAA1,
        Self::ITEMID_CHENJAA2,
        Self::ITEMID_CHENJAA3,
        Self::ITEMID_CHENJAA4,
        Self::ITEMID_CHENJAA5,
        Self::ITEMID_CHENJAA6,
        Self::ITEMID_CHENJAA7,
        Self::ITEMID_CHENJAA8,
        Self::ITEMID_CHENJAA9,
        Self::ITEMID_CHENJAA10,
        Self::ITEMID_CHENJAA11,
        Self::ITEMID_CHENJAA12,
        Self::ITEMID_CHENJAA13,
        Self::ITEMID_CHENJAA14,
        Self::ITEMID_CHENJAA15,
        Self::ITEMID_CHENJAA16,
        Self::ITEMID_CHENJAA17,
        Self::ITEMID_CHENJAA18,
        Self::ITEMID_BUUSUTOENAJII,
        Self::ITEMID_SENTOUBAFFA1,
        Self::ITEMID_SENTOUBAFFA2,
        Self::ITEMID_SENTOUBAFFA3,
        Self::ITEMID_SENTOUBAFFA4,
        Self::ITEMID_SENTOUBAFFA5,
        Self::ITEMID_SENTOUBAFFA6,
        Self::ITEMID_MAYONEEZU,
        Self::ITEMID_KECHAPPU,
        Self::ITEMID_MASUTAADO,
        Self::ITEMID_BATAA,
        Self::ITEMID_PIINATTSUBATAA,
        Self::ITEMID_CHIRISOOSU,
        Self::ITEMID_SORUTO,
        Self::ITEMID_PEPPAA,
        Self::ITEMID_YOOGURUTO,
        Self::ITEMID_HOIPPUKURIIMU,
        Self::ITEMID_KURIIMUCHIIZU,
        Self::ITEMID_BERIIJAMU,
        Self::ITEMID_MAAMAREEDO,
        Self::ITEMID_ORIIBUOIRU,
        Self::ITEMID_BINEGAA,
        Self::ITEMID_TAKARASUPAISU1,
        Self::ITEMID_TAKARASUPAISU2,
        Self::ITEMID_TAKARASUPAISU3,
        Self::ITEMID_TAKARASUPAISU4,
        Self::ITEMID_TAKARASUPAISU5,
        Self::ITEMID_RETASUPAKKU,
        Self::ITEMID_TOMATOSURAISU,
        Self::ITEMID_KATTOMINITOMATO,
        Self::ITEMID_KYUURISURAISU,
        Self::ITEMID_PIKURUSUSURAISU,
        Self::ITEMID_TAMANEGISURAISU,
        Self::ITEMID_REDDOAARII,
        Self::ITEMID_PIIMANSURAISU,
        Self::ITEMID_AKAPAPURIKASURAISU,
        Self::ITEMID_KIPAPURIKASURAISU,
        Self::ITEMID_ABOKADO,
        Self::ITEMID_YAKIBEEKON,
        Self::ITEMID_HAMUSURAISU,
        Self::ITEMID_NAMAHAMU,
        Self::ITEMID_YAKICHORISOO,
        Self::ITEMID_BOIRUSOOSEEJI,
        Self::ITEMID_HANBAAGU,
        Self::ITEMID_KANISUTIKKU,
        Self::ITEMID_SUMOOKUKIRIMI,
        Self::ITEMID_KIRIMIFURAI,
        Self::ITEMID_SURAISUEGGU,
        Self::ITEMID_TORUTIIJA,
        Self::ITEMID_TOOFU,
        Self::ITEMID_RAISU,
        Self::ITEMID_NUUDORU,
        Self::ITEMID_POTETOSARADA,
        Self::ITEMID_SURAISUCHIIZU,
        Self::ITEMID_BANANASURAISU,
        Self::ITEMID_ICHIGOSURAISU,
        Self::ITEMID_WAGIRIRINGO,
        Self::ITEMID_WAGIRIKIUI,
        Self::ITEMID_KATTOPAIN,
        Self::ITEMID_HARAPEENYO,
        Self::ITEMID_HOOSURADISSHU,
        Self::ITEMID_KAREEPAUDAA,
        Self::ITEMID_WASABISOOSU,
        Self::ITEMID_KURESON,
        Self::ITEMID_BAJIRU,
        Self::ITEMID_SOZAI01,
        Self::ITEMID_SOZAI02,
        Self::ITEMID_SOZAI03,
        Self::ITEMID_SOZAI04,
        Self::ITEMID_SOZAI05,
        Self::ITEMID_SOZAI06,
        Self::ITEMID_SOZAI07,
        Self::ITEMID_SOZAI08,
        Self::ITEMID_SOZAI09,
        Self::ITEMID_SOZAI10,
        Self::ITEMID_SOZAI11,
        Self::ITEMID_SOZAI12,
        Self::ITEMID_SOZAI13,
        Self::ITEMID_SOZAI14,
        Self::ITEMID_SOZAI15,
        Self::ITEMID_SOZAI16,
        Self::ITEMID_SOZAI17,
        Self::ITEMID_SOZAI18,
        Self::ITEMID_SOZAI19,
        Self::ITEMID_SOZAI20,
        Self::ITEMID_SOZAI21,
        Self::ITEMID_SOZAI22,
        Self::ITEMID_SOZAI23,
        Self::ITEMID_SOZAI24,
        Self::ITEMID_SOZAI25,
        Self::ITEMID_SOZAI26,
        Self::ITEMID_SOZAI27,
        Self::ITEMID_SOZAI28,
        Self::ITEMID_SOZAI29,
        Self::ITEMID_SOZAI30,
        Self::ITEMID_SOZAI31,
        Self::ITEMID_SOZAI32,
        Self::ITEMID_SOZAI33,
        Self::ITEMID_SOZAI34,
        Self::ITEMID_SOZAI35,
        Self::ITEMID_SOZAI36,
        Self::ITEMID_SOZAI37,
        Self::ITEMID_SOZAI38,
        Self::ITEMID_SOZAI39,
        Self::ITEMID_SOZAI40,
        Self::ITEMID_SOZAI41,
        Self::ITEMID_SOZAI42,
        Self::ITEMID_SOZAI43,
        Self::ITEMID_SOZAI44,
        Self::ITEMID_SOZAI45,
        Self::ITEMID_SOZAI46,
        Self::ITEMID_SOZAI47,
        Self::ITEMID_SOZAI48,
        Self::ITEMID_SOZAI49,
        Self::ITEMID_SOZAI50,
        Self::ITEMID_SOZAI51,
        Self::ITEMID_SOZAI52,
        Self::ITEMID_SOZAI53,
        Self::ITEMID_SOZAI54,
        Self::ITEMID_SOZAI55,
        Self::ITEMID_SOZAI56,
        Self::ITEMID_SOZAI57,
        Self::ITEMID_SOZAI58,
        Self::ITEMID_SOZAI59,
        Self::ITEMID_SOZAI60,
        Self::ITEMID_SOZAI61,
        Self::ITEMID_SOZAI62,
        Self::ITEMID_SOZAI63,
        Self::ITEMID_SOZAI64,
        Self::ITEMID_SOZAI65,
        Self::ITEMID_SOZAI66,
        Self::ITEMID_SOZAI67,
        Self::ITEMID_SOZAI68,
        Self::ITEMID_SOZAI69,
        Self::ITEMID_SOZAI70,
        Self::ITEMID_SOZAI71,
        Self::ITEMID_SOZAI72,
        Self::ITEMID_SOZAI73,
        Self::ITEMID_SOZAI74,
        Self::ITEMID_SOZAI75,
        Self::ITEMID_SOZAI76,
        Self::ITEMID_SOZAI77,
        Self::ITEMID_SOZAI78,
        Self::ITEMID_SOZAI79,
        Self::ITEMID_SOZAI80,
        Self::ITEMID_SOZAI81,
        Self::ITEMID_SOZAI82,
        Self::ITEMID_SOZAI83,
        Self::ITEMID_SOZAI84,
        Self::ITEMID_SOZAI85,
        Self::ITEMID_SOZAI86,
        Self::ITEMID_SOZAI87,
        Self::ITEMID_SOZAI88,
        Self::ITEMID_SOZAI89,
        Self::ITEMID_SOZAI90,
        Self::ITEMID_SOZAI91,
        Self::ITEMID_SOZAI92,
        Self::ITEMID_SOZAI93,
        Self::ITEMID_SOZAI94,
        Self::ITEMID_SOZAI95,
        Self::ITEMID_SOZAI96,
        Self::ITEMID_SOZAI97,
        Self::ITEMID_SOZAI98,
        Self::ITEMID_SOZAI99,
        Self::ITEMID_SOZAI100,
        Self::ITEMID_SOZAI101,
        Self::ITEMID_SOZAI102,
        Self::ITEMID_SOZAI103,
        Self::ITEMID_SOZAI104,
        Self::ITEMID_SOZAI105,
        Self::ITEMID_SOZAI106,
        Self::ITEMID_SOZAI107,
        Self::ITEMID_SOZAI108,
        Self::ITEMID_SOZAI109,
        Self::ITEMID_SOZAI110,
        Self::ITEMID_SOZAI111,
        Self::ITEMID_SOZAI112,
        Self::ITEMID_SOZAI113,
        Self::ITEMID_SOZAI114,
        Self::ITEMID_SOZAI115,
        Self::ITEMID_SOZAI116,
        Self::ITEMID_SOZAI117,
        Self::ITEMID_SOZAI118,
        Self::ITEMID_SOZAI119,
        Self::ITEMID_SOZAI120,
        Self::ITEMID_SOZAI121,
        Self::ITEMID_SOZAI122,
        Self::ITEMID_SOZAI123,
        Self::ITEMID_SOZAI124,
        Self::ITEMID_SOZAI125,
        Self::ITEMID_SOZAI126,
        Self::ITEMID_SOZAI127,
        Self::ITEMID_SOZAI128,
        Self::ITEMID_SOZAI129,
        Self::ITEMID_SOZAI130,
        Self::ITEMID_SOZAI131,
        Self::ITEMID_SOZAI132,
        Self::ITEMID_SOZAI133,
        Self::ITEMID_SOZAI134,
        Self::ITEMID_SOZAI135,
        Self::ITEMID_SOZAI136,
        Self::ITEMID_SOZAI137,
        Self::ITEMID_SOZAI138,
        Self::ITEMID_SOZAI139,
        Self::ITEMID_SOZAI140,
        Self::ITEMID_SOZAI141,
        Self::ITEMID_SOZAI142,
        Self::ITEMID_SOZAI143,
        Self::ITEMID_SOZAI144,
        Self::ITEMID_SOZAI148,
        Self::ITEMID_SOZAI149,
        Self::ITEMID_SOZAI150,
        Self::ITEMID_SOZAI151,
        Self::ITEMID_SOZAI152,
        Self::ITEMID_SOZAI153,
        Self::ITEMID_SOZAI154,
        Self::ITEMID_SOZAI155,
        Self::ITEMID_SOZAI156,
        Self::ITEMID_SOZAI157,
        Self::ITEMID_SOZAI158,
        Self::ITEMID_SOZAI159,
        Self::ITEMID_SOZAI160,
        Self::ITEMID_SOZAI161,
        Self::ITEMID_SOZAI162,
        Self::ITEMID_SOZAI163,
        Self::ITEMID_SOZAI164,
        Self::ITEMID_SOZAI165,
        Self::ITEMID_SOZAI166,
        Self::ITEMID_SOZAI167,
        Self::ITEMID_SOZAI168,
        Self::ITEMID_SOZAI171,
        Self::ITEMID_SOZAI172,
        Self::ITEMID_SOZAI173,
        Self::ITEMID_SOZAI174,
        Self::ITEMID_SOZAI175,
        Self::ITEMID_SOZAI176,
        Self::ITEMID_SOZAI177,
        Self::ITEMID_SOZAI178,
        Self::ITEMID_SOZAI179,
        Self::ITEMID_SOZAI180,
        Self::ITEMID_SOZAI181,
        Self::ITEMID_SOZAI182,
        Self::ITEMID_SOZAI201,
        Self::ITEMID_SOZAI202,
        Self::ITEMID_SOZAI203,
        Self::ITEMID_SOZAI204,
        Self::ITEMID_WAZAMASIN100,
        Self::ITEMID_WAZAMASIN101,
        Self::ITEMID_WAZAMASIN102,
        Self::ITEMID_WAZAMASIN103,
        Self::ITEMID_WAZAMASIN104,
        Self::ITEMID_WAZAMASIN105,
        Self::ITEMID_WAZAMASIN106,
        Self::ITEMID_WAZAMASIN107,
        Self::ITEMID_WAZAMASIN108,
        Self::ITEMID_WAZAMASIN109,
        Self::ITEMID_WAZAMASIN110,
        Self::ITEMID_WAZAMASIN111,
        Self::ITEMID_WAZAMASIN112,
        Self::ITEMID_WAZAMASIN113,
        Self::ITEMID_WAZAMASIN114,
        Self::ITEMID_WAZAMASIN115,
        Self::ITEMID_WAZAMASIN116,
        Self::ITEMID_WAZAMASIN117,
        Self::ITEMID_WAZAMASIN118,
        Self::ITEMID_WAZAMASIN119,
        Self::ITEMID_WAZAMASIN120,
        Self::ITEMID_WAZAMASIN121,
        Self::ITEMID_WAZAMASIN122,
        Self::ITEMID_WAZAMASIN123,
        Self::ITEMID_WAZAMASIN124,
        Self::ITEMID_WAZAMASIN125,
        Self::ITEMID_WAZAMASIN126,
        Self::ITEMID_WAZAMASIN127,
        Self::ITEMID_WAZAMASIN128,
        Self::ITEMID_WAZAMASIN129,
        Self::ITEMID_WAZAMASIN130,
        Self::ITEMID_WAZAMASIN131,
        Self::ITEMID_WAZAMASIN132,
        Self::ITEMID_WAZAMASIN133,
        Self::ITEMID_WAZAMASIN134,
        Self::ITEMID_WAZAMASIN135,
        Self::ITEMID_WAZAMASIN136,
        Self::ITEMID_WAZAMASIN137,
        Self::ITEMID_WAZAMASIN138,
        Self::ITEMID_WAZAMASIN139,
        Self::ITEMID_WAZAMASIN140,
        Self::ITEMID_WAZAMASIN141,
        Self::ITEMID_WAZAMASIN142,
        Self::ITEMID_WAZAMASIN143,
        Self::ITEMID_WAZAMASIN144,
        Self::ITEMID_WAZAMASIN145,
        Self::ITEMID_WAZAMASIN146,
        Self::ITEMID_WAZAMASIN147,
        Self::ITEMID_WAZAMASIN148,
        Self::ITEMID_WAZAMASIN149,
        Self::ITEMID_WAZAMASIN150,
        Self::ITEMID_WAZAMASIN151,
        Self::ITEMID_WAZAMASIN152,
        Self::ITEMID_WAZAMASIN153,
        Self::ITEMID_WAZAMASIN154,
        Self::ITEMID_WAZAMASIN155,
        Self::ITEMID_WAZAMASIN156,
        Self::ITEMID_WAZAMASIN157,
        Self::ITEMID_WAZAMASIN158,
        Self::ITEMID_WAZAMASIN159,
        Self::ITEMID_WAZAMASIN160,
        Self::ITEMID_WAZAMASIN161,
        Self::ITEMID_WAZAMASIN162,
        Self::ITEMID_WAZAMASIN163,
        Self::ITEMID_WAZAMASIN164,
        Self::ITEMID_WAZAMASIN165,
        Self::ITEMID_WAZAMASIN166,
        Self::ITEMID_WAZAMASIN167,
        Self::ITEMID_WAZAMASIN168,
        Self::ITEMID_WAZAMASIN169,
        Self::ITEMID_WAZAMASIN170,
        Self::ITEMID_WAZAMASIN171,
        Self::ITEMID_PIKUNIKKUSETTO,
        Self::ITEMID_SUITOU1,
        Self::ITEMID_SUITOU2,
        Self::ITEMID_SUITOU3,
        Self::ITEMID_SUITOU4,
        Self::ITEMID_SUITOU5,
        Self::ITEMID_KOPPU1,
        Self::ITEMID_KOPPU2,
        Self::ITEMID_KOPPU3,
        Self::ITEMID_KOPPU4,
        Self::ITEMID_KOPPU5,
        Self::ITEMID_TEEBURUKABAA1,
        Self::ITEMID_TEEBURUKABAA2,
        Self::ITEMID_TEEBURUKABAA3,
        Self::ITEMID_TEEBURUKABAA4,
        Self::ITEMID_TEEBURUKABAA5,
        Self::ITEMID_PIKUNIKKUBOORU1,
        Self::ITEMID_PIKUNIKKUBOORU2,
        Self::ITEMID_PIKUNIKKUBOORU3,
        Self::ITEMID_PIKUNIKKUBOORU4,
        Self::ITEMID_PIKUNIKKUBOORU5,
        Self::ITEMID_RANCHIPIKKU1,
        Self::ITEMID_RANCHIPIKKU2,
        Self::ITEMID_RANCHIPIKKU3,
        Self::ITEMID_RANCHIPIKKU4,
        Self::ITEMID_RANCHIPIKKU5,
        Self::ITEMID_RANCHIPIKKU6,
        Self::ITEMID_RANCHIPIKKU7,
        Self::ITEMID_RANCHIPIKKU8,
        Self::ITEMID_RANCHIPIKKU9,
        Self::ITEMID_IWAINOYOROI,
        Self::ITEMID_KASIRANOAKASI,
        Self::ITEMID_SUITOU6,
        Self::ITEMID_SUITOU7,
        Self::ITEMID_SUITOU8,
        Self::ITEMID_SUITOU9,
        Self::ITEMID_SUITOU10,
        Self::ITEMID_SUITOU11,
        Self::ITEMID_SUITOU12,
        Self::ITEMID_KOPPU6,
        Self::ITEMID_KOPPU7,
        Self::ITEMID_KOPPU8,
        Self::ITEMID_KOPPU9,
        Self::ITEMID_KOPPU10,
        Self::ITEMID_KOPPU11,
        Self::ITEMID_KOPPU12,
        Self::ITEMID_KOPPU13,
        Self::ITEMID_KOPPU14,
        Self::ITEMID_KOPPU15,
        Self::ITEMID_PIKUNIKKUBOORU6,
        Self::ITEMID_TEEBURUKABAA6,
        Self::ITEMID_TEEBURUKABAA7,
        Self::ITEMID_TEEBURUKABAA8,
        Self::ITEMID_TEEBURUKABAA9,
        Self::ITEMID_TEEBURUKABAA10,
        Self::ITEMID_TEEBURUKABAA11,
        Self::ITEMID_TEEBURUKABAA12,
        Self::ITEMID_TEEBURUKABAA13,
        Self::ITEMID_TEEBURUKABAA14,
        Self::ITEMID_TEEBURUKABAA15,
        Self::ITEMID_TEEBURUKABAA16,
        Self::ITEMID_TEEBURUKABAA17,
        Self::ITEMID_TEEBURUKABAA18,
        Self::ITEMID_TEEBURUKABAA19,
        Self::ITEMID_TEEBURUKABAA20,
        Self::ITEMID_SUITOU13,
        Self::ITEMID_SUITOU14,
        Self::ITEMID_KOPPU16,
        Self::ITEMID_KOPPU17,
        Self::ITEMID_RANCHIPIKKU10,
        Self::ITEMID_RANCHIPIKKU11,
        Self::ITEMID_RANCHIPIKKU12,
        Self::ITEMID_RANCHIPIKKU13,
        Self::ITEMID_RANCHIPIKKU14,
        Self::ITEMID_RANCHIPIKKU15,
        Self::ITEMID_RANCHIPIKKU16,
        Self::ITEMID_RANCHIPIKKU17,
        Self::ITEMID_RANCHIPIKKU18,
        Self::ITEMID_RANCHIPIKKU19,
        Self::ITEMID_SARA2,
    ];
    /// Returns the variant's name or "" if unknown.
    pub fn variant_name(self) -> Option<&'static str> {
        match self {
            Self::ITEMID_NONE => Some("ITEMID_NONE"),
            Self::ITEMID_MASUTAABOORU => Some("ITEMID_MASUTAABOORU"),
            Self::ITEMID_HAIPAABOORU => Some("ITEMID_HAIPAABOORU"),
            Self::ITEMID_SUUPAABOORU => Some("ITEMID_SUUPAABOORU"),
            Self::ITEMID_MONSUTAABOORU => Some("ITEMID_MONSUTAABOORU"),
            Self::ITEMID_SAFARIBOORU => Some("ITEMID_SAFARIBOORU"),
            Self::ITEMID_NETTOBOORU => Some("ITEMID_NETTOBOORU"),
            Self::ITEMID_DAIBUBOORU => Some("ITEMID_DAIBUBOORU"),
            Self::ITEMID_NESUTOBOORU => Some("ITEMID_NESUTOBOORU"),
            Self::ITEMID_RIPIITOBOORU => Some("ITEMID_RIPIITOBOORU"),
            Self::ITEMID_TAIMAABOORU => Some("ITEMID_TAIMAABOORU"),
            Self::ITEMID_GOOZYASUBOORU => Some("ITEMID_GOOZYASUBOORU"),
            Self::ITEMID_PUREMIABOORU => Some("ITEMID_PUREMIABOORU"),
            Self::ITEMID_DAAKUBOORU => Some("ITEMID_DAAKUBOORU"),
            Self::ITEMID_HIIRUBOORU => Some("ITEMID_HIIRUBOORU"),
            Self::ITEMID_KUIKKUBOORU => Some("ITEMID_KUIKKUBOORU"),
            Self::ITEMID_KIZUGUSURI => Some("ITEMID_KIZUGUSURI"),
            Self::ITEMID_DOKUKESI => Some("ITEMID_DOKUKESI"),
            Self::ITEMID_YAKEDONAOSI => Some("ITEMID_YAKEDONAOSI"),
            Self::ITEMID_KOORINAOSI => Some("ITEMID_KOORINAOSI"),
            Self::ITEMID_NEMUKEZAMASI => Some("ITEMID_NEMUKEZAMASI"),
            Self::ITEMID_MAHINAOSI => Some("ITEMID_MAHINAOSI"),
            Self::ITEMID_KAIHUKUNOKUSURI => Some("ITEMID_KAIHUKUNOKUSURI"),
            Self::ITEMID_MANTANNOKUSURI => Some("ITEMID_MANTANNOKUSURI"),
            Self::ITEMID_SUGOIKIZUGUSURI => Some("ITEMID_SUGOIKIZUGUSURI"),
            Self::ITEMID_IIKIZUGUSURI => Some("ITEMID_IIKIZUGUSURI"),
            Self::ITEMID_NANDEMONAOSI => Some("ITEMID_NANDEMONAOSI"),
            Self::ITEMID_GENKINOKAKERA => Some("ITEMID_GENKINOKAKERA"),
            Self::ITEMID_GENKINOKATAMARI => Some("ITEMID_GENKINOKATAMARI"),
            Self::ITEMID_OISIIMIZU => Some("ITEMID_OISIIMIZU"),
            Self::ITEMID_SAIKOSOODA => Some("ITEMID_SAIKOSOODA"),
            Self::ITEMID_MIKKUSUORE => Some("ITEMID_MIKKUSUORE"),
            Self::ITEMID_MOOMOOMIRUKU => Some("ITEMID_MOOMOOMIRUKU"),
            Self::ITEMID_TIKARANOKONA => Some("ITEMID_TIKARANOKONA"),
            Self::ITEMID_TIKARANONEKKO => Some("ITEMID_TIKARANONEKKO"),
            Self::ITEMID_BANNOUGONA => Some("ITEMID_BANNOUGONA"),
            Self::ITEMID_HUKKATUSOU => Some("ITEMID_HUKKATUSOU"),
            Self::ITEMID_PIIPIIEIDO => Some("ITEMID_PIIPIIEIDO"),
            Self::ITEMID_PIIPIIRIKABAA => Some("ITEMID_PIIPIIRIKABAA"),
            Self::ITEMID_PIIPIIEIDAA => Some("ITEMID_PIIPIIEIDAA"),
            Self::ITEMID_PIIPIIMAKKUSU => Some("ITEMID_PIIPIIMAKKUSU"),
            Self::ITEMID_MAKKUSUAPPU => Some("ITEMID_MAKKUSUAPPU"),
            Self::ITEMID_TAURIN => Some("ITEMID_TAURIN"),
            Self::ITEMID_BUROMUHEKISIN => Some("ITEMID_BUROMUHEKISIN"),
            Self::ITEMID_INDOMETASIN => Some("ITEMID_INDOMETASIN"),
            Self::ITEMID_RIZOTIUMU => Some("ITEMID_RIZOTIUMU"),
            Self::ITEMID_HUSIGINAAME => Some("ITEMID_HUSIGINAAME"),
            Self::ITEMID_POINTOAPPU => Some("ITEMID_POINTOAPPU"),
            Self::ITEMID_KITOSAN => Some("ITEMID_KITOSAN"),
            Self::ITEMID_POINTOMAKKUSU => Some("ITEMID_POINTOMAKKUSU"),
            Self::ITEMID_EFEKUTOGAADO => Some("ITEMID_EFEKUTOGAADO"),
            Self::ITEMID_KURITHIKATTO => Some("ITEMID_KURITHIKATTO"),
            Self::ITEMID_PURASUPAWAA => Some("ITEMID_PURASUPAWAA"),
            Self::ITEMID_DHIFENDAA => Some("ITEMID_DHIFENDAA"),
            Self::ITEMID_SUPIIDAA => Some("ITEMID_SUPIIDAA"),
            Self::ITEMID_YOKUATAARU => Some("ITEMID_YOKUATAARU"),
            Self::ITEMID_SUPESYARUAPPU => Some("ITEMID_SUPESYARUAPPU"),
            Self::ITEMID_SUPESYARUGAADO => Some("ITEMID_SUPESYARUGAADO"),
            Self::ITEMID_PIPPININGYOU => Some("ITEMID_PIPPININGYOU"),
            Self::ITEMID_TAIYOUNOISI => Some("ITEMID_TAIYOUNOISI"),
            Self::ITEMID_TUKINOISI => Some("ITEMID_TUKINOISI"),
            Self::ITEMID_HONOONOISI => Some("ITEMID_HONOONOISI"),
            Self::ITEMID_KAMINARINOISI => Some("ITEMID_KAMINARINOISI"),
            Self::ITEMID_MIZUNOISI => Some("ITEMID_MIZUNOISI"),
            Self::ITEMID_RIIHUNOISI => Some("ITEMID_RIIHUNOISI"),
            Self::ITEMID_TIISANAKINOKO => Some("ITEMID_TIISANAKINOKO"),
            Self::ITEMID_OOKINAKINOKO => Some("ITEMID_OOKINAKINOKO"),
            Self::ITEMID_SINZYU => Some("ITEMID_SINZYU"),
            Self::ITEMID_OOKINASINZYU => Some("ITEMID_OOKINASINZYU"),
            Self::ITEMID_HOSINOSUNA => Some("ITEMID_HOSINOSUNA"),
            Self::ITEMID_HOSINOKAKERA => Some("ITEMID_HOSINOKAKERA"),
            Self::ITEMID_KINNOTAMA => Some("ITEMID_KINNOTAMA"),
            Self::ITEMID_AMAIMITU => Some("ITEMID_AMAIMITU"),
            Self::ITEMID_KITYOUNAHONE => Some("ITEMID_KITYOUNAHONE"),
            Self::ITEMID_HIKARINOISI => Some("ITEMID_HIKARINOISI"),
            Self::ITEMID_YAMINOISI => Some("ITEMID_YAMINOISI"),
            Self::ITEMID_MEZAMEISI => Some("ITEMID_MEZAMEISI"),
            Self::ITEMID_MANMARUISI => Some("ITEMID_MANMARUISI"),
            Self::ITEMID_HAKKINDAMA => Some("ITEMID_HAKKINDAMA"),
            Self::ITEMID_KONGOUDAMA => Some("ITEMID_KONGOUDAMA"),
            Self::ITEMID_SIRATAMA => Some("ITEMID_SIRATAMA"),
            Self::ITEMID_KURABONOMI => Some("ITEMID_KURABONOMI"),
            Self::ITEMID_KAGONOMI => Some("ITEMID_KAGONOMI"),
            Self::ITEMID_MOMONNOMI => Some("ITEMID_MOMONNOMI"),
            Self::ITEMID_TIIGONOMI => Some("ITEMID_TIIGONOMI"),
            Self::ITEMID_NANASINOMI => Some("ITEMID_NANASINOMI"),
            Self::ITEMID_HIMERINOMI => Some("ITEMID_HIMERINOMI"),
            Self::ITEMID_ORENNOMI => Some("ITEMID_ORENNOMI"),
            Self::ITEMID_KIINOMI => Some("ITEMID_KIINOMI"),
            Self::ITEMID_RAMUNOMI => Some("ITEMID_RAMUNOMI"),
            Self::ITEMID_OBONNOMI => Some("ITEMID_OBONNOMI"),
            Self::ITEMID_FIRANOMI => Some("ITEMID_FIRANOMI"),
            Self::ITEMID_UINOMI => Some("ITEMID_UINOMI"),
            Self::ITEMID_MAGONOMI => Some("ITEMID_MAGONOMI"),
            Self::ITEMID_BANZINOMI => Some("ITEMID_BANZINOMI"),
            Self::ITEMID_IANOMI => Some("ITEMID_IANOMI"),
            Self::ITEMID_ZAROKUNOMI => Some("ITEMID_ZAROKUNOMI"),
            Self::ITEMID_NEKOBUNOMI => Some("ITEMID_NEKOBUNOMI"),
            Self::ITEMID_TAPORUNOMI => Some("ITEMID_TAPORUNOMI"),
            Self::ITEMID_ROMENOMI => Some("ITEMID_ROMENOMI"),
            Self::ITEMID_UBUNOMI => Some("ITEMID_UBUNOMI"),
            Self::ITEMID_MATOMANOMI => Some("ITEMID_MATOMANOMI"),
            Self::ITEMID_OKKANOMI => Some("ITEMID_OKKANOMI"),
            Self::ITEMID_ITOKENOMI => Some("ITEMID_ITOKENOMI"),
            Self::ITEMID_SOKUNONOMI => Some("ITEMID_SOKUNONOMI"),
            Self::ITEMID_RINDONOMI => Some("ITEMID_RINDONOMI"),
            Self::ITEMID_YATHENOMI => Some("ITEMID_YATHENOMI"),
            Self::ITEMID_YOPUNOMI => Some("ITEMID_YOPUNOMI"),
            Self::ITEMID_BIAANOMI => Some("ITEMID_BIAANOMI"),
            Self::ITEMID_SYUKANOMI => Some("ITEMID_SYUKANOMI"),
            Self::ITEMID_BAKOUNOMI => Some("ITEMID_BAKOUNOMI"),
            Self::ITEMID_UTANNOMI => Some("ITEMID_UTANNOMI"),
            Self::ITEMID_TANGANOMI => Some("ITEMID_TANGANOMI"),
            Self::ITEMID_YOROGINOMI => Some("ITEMID_YOROGINOMI"),
            Self::ITEMID_KASIBUNOMI => Some("ITEMID_KASIBUNOMI"),
            Self::ITEMID_HABANNOMI => Some("ITEMID_HABANNOMI"),
            Self::ITEMID_NAMONOMI => Some("ITEMID_NAMONOMI"),
            Self::ITEMID_RIRIBANOMI => Some("ITEMID_RIRIBANOMI"),
            Self::ITEMID_HOZUNOMI => Some("ITEMID_HOZUNOMI"),
            Self::ITEMID_TIIRANOMI => Some("ITEMID_TIIRANOMI"),
            Self::ITEMID_RYUGANOMI => Some("ITEMID_RYUGANOMI"),
            Self::ITEMID_KAMURANOMI => Some("ITEMID_KAMURANOMI"),
            Self::ITEMID_YATAPINOMI => Some("ITEMID_YATAPINOMI"),
            Self::ITEMID_ZUANOMI => Some("ITEMID_ZUANOMI"),
            Self::ITEMID_SANNOMI => Some("ITEMID_SANNOMI"),
            Self::ITEMID_SUTAANOMI => Some("ITEMID_SUTAANOMI"),
            Self::ITEMID_NAZONOMI => Some("ITEMID_NAZONOMI"),
            Self::ITEMID_MIKURUNOMI => Some("ITEMID_MIKURUNOMI"),
            Self::ITEMID_IBANNOMI => Some("ITEMID_IBANNOMI"),
            Self::ITEMID_ZYAPONOMI => Some("ITEMID_ZYAPONOMI"),
            Self::ITEMID_RENBUNOMI => Some("ITEMID_RENBUNOMI"),
            Self::ITEMID_HIKARINOKONA => Some("ITEMID_HIKARINOKONA"),
            Self::ITEMID_SIROIHAABU => Some("ITEMID_SIROIHAABU"),
            Self::ITEMID_SENSEINOTUME => Some("ITEMID_SENSEINOTUME"),
            Self::ITEMID_YASURAGINOSUZU => Some("ITEMID_YASURAGINOSUZU"),
            Self::ITEMID_MENTARUHAABU => Some("ITEMID_MENTARUHAABU"),
            Self::ITEMID_KODAWARIHATIMAKI => Some("ITEMID_KODAWARIHATIMAKI"),
            Self::ITEMID_OUZYANOSIRUSI => Some("ITEMID_OUZYANOSIRUSI"),
            Self::ITEMID_GINNOKONA => Some("ITEMID_GINNOKONA"),
            Self::ITEMID_OMAMORIKOBAN => Some("ITEMID_OMAMORIKOBAN"),
            Self::ITEMID_KEMURIDAMA => Some("ITEMID_KEMURIDAMA"),
            Self::ITEMID_KAWARAZUNOISI => Some("ITEMID_KAWARAZUNOISI"),
            Self::ITEMID_KIAINOHATIMAKI => Some("ITEMID_KIAINOHATIMAKI"),
            Self::ITEMID_SIAWASETAMAGO => Some("ITEMID_SIAWASETAMAGO"),
            Self::ITEMID_PINTORENZU => Some("ITEMID_PINTORENZU"),
            Self::ITEMID_METARUKOOTO => Some("ITEMID_METARUKOOTO"),
            Self::ITEMID_TABENOKOSI => Some("ITEMID_TABENOKOSI"),
            Self::ITEMID_DENKIDAMA => Some("ITEMID_DENKIDAMA"),
            Self::ITEMID_YAWARAKAISUNA => Some("ITEMID_YAWARAKAISUNA"),
            Self::ITEMID_KATAIISI => Some("ITEMID_KATAIISI"),
            Self::ITEMID_KISEKINOTANE => Some("ITEMID_KISEKINOTANE"),
            Self::ITEMID_KUROIMEGANE => Some("ITEMID_KUROIMEGANE"),
            Self::ITEMID_KUROOBI => Some("ITEMID_KUROOBI"),
            Self::ITEMID_ZISYAKU => Some("ITEMID_ZISYAKU"),
            Self::ITEMID_SINPINOSIZUKU => Some("ITEMID_SINPINOSIZUKU"),
            Self::ITEMID_SURUDOIKUTIBASI => Some("ITEMID_SURUDOIKUTIBASI"),
            Self::ITEMID_DOKUBARI => Some("ITEMID_DOKUBARI"),
            Self::ITEMID_TOKENAIKOORI => Some("ITEMID_TOKENAIKOORI"),
            Self::ITEMID_NOROINOOHUDA => Some("ITEMID_NOROINOOHUDA"),
            Self::ITEMID_MAGATTASUPUUN => Some("ITEMID_MAGATTASUPUUN"),
            Self::ITEMID_MOKUTAN => Some("ITEMID_MOKUTAN"),
            Self::ITEMID_RYUUNOKIBA => Some("ITEMID_RYUUNOKIBA"),
            Self::ITEMID_SIRUKUNOSUKAAHU => Some("ITEMID_SIRUKUNOSUKAAHU"),
            Self::ITEMID_KAIGARANOSUZU => Some("ITEMID_KAIGARANOSUZU"),
            Self::ITEMID_KOUKAKURENZU => Some("ITEMID_KOUKAKURENZU"),
            Self::ITEMID_TIKARANOHATIMAKI => Some("ITEMID_TIKARANOHATIMAKI"),
            Self::ITEMID_MONOSIRIMEGANE => Some("ITEMID_MONOSIRIMEGANE"),
            Self::ITEMID_TATUZINNOOBI => Some("ITEMID_TATUZINNOOBI"),
            Self::ITEMID_HIKARINONENDO => Some("ITEMID_HIKARINONENDO"),
            Self::ITEMID_INOTINOTAMA => Some("ITEMID_INOTINOTAMA"),
            Self::ITEMID_PAWAHURUHAABU => Some("ITEMID_PAWAHURUHAABU"),
            Self::ITEMID_DOKUDOKUDAMA => Some("ITEMID_DOKUDOKUDAMA"),
            Self::ITEMID_KAENDAMA => Some("ITEMID_KAENDAMA"),
            Self::ITEMID_KIAINOTASUKI => Some("ITEMID_KIAINOTASUKI"),
            Self::ITEMID_FOOKASURENZU => Some("ITEMID_FOOKASURENZU"),
            Self::ITEMID_METORONOOMU => Some("ITEMID_METORONOOMU"),
            Self::ITEMID_KUROITEKKYUU => Some("ITEMID_KUROITEKKYUU"),
            Self::ITEMID_KOUKOUNOSIPPO => Some("ITEMID_KOUKOUNOSIPPO"),
            Self::ITEMID_AKAIITO => Some("ITEMID_AKAIITO"),
            Self::ITEMID_KUROIHEDORO => Some("ITEMID_KUROIHEDORO"),
            Self::ITEMID_TUMETAIIWA => Some("ITEMID_TUMETAIIWA"),
            Self::ITEMID_SARASARAIWA => Some("ITEMID_SARASARAIWA"),
            Self::ITEMID_ATUIIWA => Some("ITEMID_ATUIIWA"),
            Self::ITEMID_SIMETTAIWA => Some("ITEMID_SIMETTAIWA"),
            Self::ITEMID_NEBARINOKAGIDUME => Some("ITEMID_NEBARINOKAGIDUME"),
            Self::ITEMID_KODAWARISUKAAHU => Some("ITEMID_KODAWARISUKAAHU"),
            Self::ITEMID_KUTTUKIBARI => Some("ITEMID_KUTTUKIBARI"),
            Self::ITEMID_PAWAARISUTO => Some("ITEMID_PAWAARISUTO"),
            Self::ITEMID_PAWAABERUTO => Some("ITEMID_PAWAABERUTO"),
            Self::ITEMID_PAWAARENZU => Some("ITEMID_PAWAARENZU"),
            Self::ITEMID_PAWAABANDO => Some("ITEMID_PAWAABANDO"),
            Self::ITEMID_PAWAAANKURU => Some("ITEMID_PAWAAANKURU"),
            Self::ITEMID_PAWAAUEITO => Some("ITEMID_PAWAAUEITO"),
            Self::ITEMID_KIREINANUKEGARA => Some("ITEMID_KIREINANUKEGARA"),
            Self::ITEMID_OOKINANEKKO => Some("ITEMID_OOKINANEKKO"),
            Self::ITEMID_KODAWARIMEGANE => Some("ITEMID_KODAWARIMEGANE"),
            Self::ITEMID_HINOTAMAPUREETO => Some("ITEMID_HINOTAMAPUREETO"),
            Self::ITEMID_SIZUKUPUREETO => Some("ITEMID_SIZUKUPUREETO"),
            Self::ITEMID_IKAZUTIPUREETO => Some("ITEMID_IKAZUTIPUREETO"),
            Self::ITEMID_MIDORINOPUREETO => Some("ITEMID_MIDORINOPUREETO"),
            Self::ITEMID_TURARANOPUREETO => Some("ITEMID_TURARANOPUREETO"),
            Self::ITEMID_KOBUSINOPUREETO => Some("ITEMID_KOBUSINOPUREETO"),
            Self::ITEMID_MOUDOKUPUREETO => Some("ITEMID_MOUDOKUPUREETO"),
            Self::ITEMID_DAITINOPUREETO => Some("ITEMID_DAITINOPUREETO"),
            Self::ITEMID_AOZORAPUREETO => Some("ITEMID_AOZORAPUREETO"),
            Self::ITEMID_HUSIGINOPUREETO => Some("ITEMID_HUSIGINOPUREETO"),
            Self::ITEMID_TAMAMUSIPUREETO => Some("ITEMID_TAMAMUSIPUREETO"),
            Self::ITEMID_GANSEKIPUREETO => Some("ITEMID_GANSEKIPUREETO"),
            Self::ITEMID_MONONOKEPUREETO => Some("ITEMID_MONONOKEPUREETO"),
            Self::ITEMID_RYUUNOPUREETO => Some("ITEMID_RYUUNOPUREETO"),
            Self::ITEMID_KOWAMOTEPUREETO => Some("ITEMID_KOWAMOTEPUREETO"),
            Self::ITEMID_KOUTETUPUREETO => Some("ITEMID_KOUTETUPUREETO"),
            Self::ITEMID_SURUDOITUME => Some("ITEMID_SURUDOITUME"),
            Self::ITEMID_WAZAMASIN01 => Some("ITEMID_WAZAMASIN01"),
            Self::ITEMID_WAZAMASIN02 => Some("ITEMID_WAZAMASIN02"),
            Self::ITEMID_WAZAMASIN03 => Some("ITEMID_WAZAMASIN03"),
            Self::ITEMID_WAZAMASIN04 => Some("ITEMID_WAZAMASIN04"),
            Self::ITEMID_WAZAMASIN05 => Some("ITEMID_WAZAMASIN05"),
            Self::ITEMID_WAZAMASIN06 => Some("ITEMID_WAZAMASIN06"),
            Self::ITEMID_WAZAMASIN07 => Some("ITEMID_WAZAMASIN07"),
            Self::ITEMID_WAZAMASIN08 => Some("ITEMID_WAZAMASIN08"),
            Self::ITEMID_WAZAMASIN09 => Some("ITEMID_WAZAMASIN09"),
            Self::ITEMID_WAZAMASIN10 => Some("ITEMID_WAZAMASIN10"),
            Self::ITEMID_WAZAMASIN11 => Some("ITEMID_WAZAMASIN11"),
            Self::ITEMID_WAZAMASIN12 => Some("ITEMID_WAZAMASIN12"),
            Self::ITEMID_WAZAMASIN13 => Some("ITEMID_WAZAMASIN13"),
            Self::ITEMID_WAZAMASIN14 => Some("ITEMID_WAZAMASIN14"),
            Self::ITEMID_WAZAMASIN15 => Some("ITEMID_WAZAMASIN15"),
            Self::ITEMID_WAZAMASIN16 => Some("ITEMID_WAZAMASIN16"),
            Self::ITEMID_WAZAMASIN17 => Some("ITEMID_WAZAMASIN17"),
            Self::ITEMID_WAZAMASIN18 => Some("ITEMID_WAZAMASIN18"),
            Self::ITEMID_WAZAMASIN19 => Some("ITEMID_WAZAMASIN19"),
            Self::ITEMID_WAZAMASIN20 => Some("ITEMID_WAZAMASIN20"),
            Self::ITEMID_WAZAMASIN21 => Some("ITEMID_WAZAMASIN21"),
            Self::ITEMID_WAZAMASIN22 => Some("ITEMID_WAZAMASIN22"),
            Self::ITEMID_WAZAMASIN23 => Some("ITEMID_WAZAMASIN23"),
            Self::ITEMID_WAZAMASIN24 => Some("ITEMID_WAZAMASIN24"),
            Self::ITEMID_WAZAMASIN25 => Some("ITEMID_WAZAMASIN25"),
            Self::ITEMID_WAZAMASIN26 => Some("ITEMID_WAZAMASIN26"),
            Self::ITEMID_WAZAMASIN27 => Some("ITEMID_WAZAMASIN27"),
            Self::ITEMID_WAZAMASIN28 => Some("ITEMID_WAZAMASIN28"),
            Self::ITEMID_WAZAMASIN29 => Some("ITEMID_WAZAMASIN29"),
            Self::ITEMID_WAZAMASIN30 => Some("ITEMID_WAZAMASIN30"),
            Self::ITEMID_WAZAMASIN31 => Some("ITEMID_WAZAMASIN31"),
            Self::ITEMID_WAZAMASIN32 => Some("ITEMID_WAZAMASIN32"),
            Self::ITEMID_WAZAMASIN33 => Some("ITEMID_WAZAMASIN33"),
            Self::ITEMID_WAZAMASIN34 => Some("ITEMID_WAZAMASIN34"),
            Self::ITEMID_WAZAMASIN35 => Some("ITEMID_WAZAMASIN35"),
            Self::ITEMID_WAZAMASIN36 => Some("ITEMID_WAZAMASIN36"),
            Self::ITEMID_WAZAMASIN37 => Some("ITEMID_WAZAMASIN37"),
            Self::ITEMID_WAZAMASIN38 => Some("ITEMID_WAZAMASIN38"),
            Self::ITEMID_WAZAMASIN39 => Some("ITEMID_WAZAMASIN39"),
            Self::ITEMID_WAZAMASIN40 => Some("ITEMID_WAZAMASIN40"),
            Self::ITEMID_WAZAMASIN41 => Some("ITEMID_WAZAMASIN41"),
            Self::ITEMID_WAZAMASIN42 => Some("ITEMID_WAZAMASIN42"),
            Self::ITEMID_WAZAMASIN43 => Some("ITEMID_WAZAMASIN43"),
            Self::ITEMID_WAZAMASIN44 => Some("ITEMID_WAZAMASIN44"),
            Self::ITEMID_WAZAMASIN45 => Some("ITEMID_WAZAMASIN45"),
            Self::ITEMID_WAZAMASIN46 => Some("ITEMID_WAZAMASIN46"),
            Self::ITEMID_WAZAMASIN47 => Some("ITEMID_WAZAMASIN47"),
            Self::ITEMID_WAZAMASIN48 => Some("ITEMID_WAZAMASIN48"),
            Self::ITEMID_WAZAMASIN49 => Some("ITEMID_WAZAMASIN49"),
            Self::ITEMID_WAZAMASIN50 => Some("ITEMID_WAZAMASIN50"),
            Self::ITEMID_WAZAMASIN51 => Some("ITEMID_WAZAMASIN51"),
            Self::ITEMID_WAZAMASIN52 => Some("ITEMID_WAZAMASIN52"),
            Self::ITEMID_WAZAMASIN53 => Some("ITEMID_WAZAMASIN53"),
            Self::ITEMID_WAZAMASIN54 => Some("ITEMID_WAZAMASIN54"),
            Self::ITEMID_WAZAMASIN55 => Some("ITEMID_WAZAMASIN55"),
            Self::ITEMID_WAZAMASIN56 => Some("ITEMID_WAZAMASIN56"),
            Self::ITEMID_WAZAMASIN57 => Some("ITEMID_WAZAMASIN57"),
            Self::ITEMID_WAZAMASIN58 => Some("ITEMID_WAZAMASIN58"),
            Self::ITEMID_WAZAMASIN59 => Some("ITEMID_WAZAMASIN59"),
            Self::ITEMID_WAZAMASIN60 => Some("ITEMID_WAZAMASIN60"),
            Self::ITEMID_WAZAMASIN61 => Some("ITEMID_WAZAMASIN61"),
            Self::ITEMID_WAZAMASIN62 => Some("ITEMID_WAZAMASIN62"),
            Self::ITEMID_WAZAMASIN63 => Some("ITEMID_WAZAMASIN63"),
            Self::ITEMID_WAZAMASIN64 => Some("ITEMID_WAZAMASIN64"),
            Self::ITEMID_WAZAMASIN65 => Some("ITEMID_WAZAMASIN65"),
            Self::ITEMID_WAZAMASIN66 => Some("ITEMID_WAZAMASIN66"),
            Self::ITEMID_WAZAMASIN67 => Some("ITEMID_WAZAMASIN67"),
            Self::ITEMID_WAZAMASIN68 => Some("ITEMID_WAZAMASIN68"),
            Self::ITEMID_WAZAMASIN69 => Some("ITEMID_WAZAMASIN69"),
            Self::ITEMID_WAZAMASIN70 => Some("ITEMID_WAZAMASIN70"),
            Self::ITEMID_WAZAMASIN71 => Some("ITEMID_WAZAMASIN71"),
            Self::ITEMID_WAZAMASIN72 => Some("ITEMID_WAZAMASIN72"),
            Self::ITEMID_WAZAMASIN73 => Some("ITEMID_WAZAMASIN73"),
            Self::ITEMID_WAZAMASIN74 => Some("ITEMID_WAZAMASIN74"),
            Self::ITEMID_WAZAMASIN75 => Some("ITEMID_WAZAMASIN75"),
            Self::ITEMID_WAZAMASIN76 => Some("ITEMID_WAZAMASIN76"),
            Self::ITEMID_WAZAMASIN77 => Some("ITEMID_WAZAMASIN77"),
            Self::ITEMID_WAZAMASIN78 => Some("ITEMID_WAZAMASIN78"),
            Self::ITEMID_WAZAMASIN79 => Some("ITEMID_WAZAMASIN79"),
            Self::ITEMID_WAZAMASIN80 => Some("ITEMID_WAZAMASIN80"),
            Self::ITEMID_WAZAMASIN81 => Some("ITEMID_WAZAMASIN81"),
            Self::ITEMID_WAZAMASIN82 => Some("ITEMID_WAZAMASIN82"),
            Self::ITEMID_WAZAMASIN83 => Some("ITEMID_WAZAMASIN83"),
            Self::ITEMID_WAZAMASIN84 => Some("ITEMID_WAZAMASIN84"),
            Self::ITEMID_WAZAMASIN85 => Some("ITEMID_WAZAMASIN85"),
            Self::ITEMID_WAZAMASIN86 => Some("ITEMID_WAZAMASIN86"),
            Self::ITEMID_WAZAMASIN87 => Some("ITEMID_WAZAMASIN87"),
            Self::ITEMID_WAZAMASIN88 => Some("ITEMID_WAZAMASIN88"),
            Self::ITEMID_WAZAMASIN89 => Some("ITEMID_WAZAMASIN89"),
            Self::ITEMID_WAZAMASIN90 => Some("ITEMID_WAZAMASIN90"),
            Self::ITEMID_WAZAMASIN91 => Some("ITEMID_WAZAMASIN91"),
            Self::ITEMID_WAZAMASIN92 => Some("ITEMID_WAZAMASIN92"),
            Self::ITEMID_SUPIIDOBOORU => Some("ITEMID_SUPIIDOBOORU"),
            Self::ITEMID_REBERUBOORU => Some("ITEMID_REBERUBOORU"),
            Self::ITEMID_RUAABOORU => Some("ITEMID_RUAABOORU"),
            Self::ITEMID_HEBIIBOORU => Some("ITEMID_HEBIIBOORU"),
            Self::ITEMID_RABURABUBOORU => Some("ITEMID_RABURABUBOORU"),
            Self::ITEMID_HURENDOBOORU => Some("ITEMID_HURENDOBOORU"),
            Self::ITEMID_MUUNBOORU => Some("ITEMID_MUUNBOORU"),
            Self::ITEMID_KONPEBOORU => Some("ITEMID_KONPEBOORU"),
            Self::ITEMID_SINKANOKISEKI => Some("ITEMID_SINKANOKISEKI"),
            Self::ITEMID_KARUISI => Some("ITEMID_KARUISI"),
            Self::ITEMID_GOTUGOTUMETTO => Some("ITEMID_GOTUGOTUMETTO"),
            Self::ITEMID_HUUSEN => Some("ITEMID_HUUSEN"),
            Self::ITEMID_REDDOKAADO => Some("ITEMID_REDDOKAADO"),
            Self::ITEMID_NERAINOMATO => Some("ITEMID_NERAINOMATO"),
            Self::ITEMID_SIMETUKEBANDO => Some("ITEMID_SIMETUKEBANDO"),
            Self::ITEMID_KYUUKON => Some("ITEMID_KYUUKON"),
            Self::ITEMID_ZYUUDENTI => Some("ITEMID_ZYUUDENTI"),
            Self::ITEMID_DASSYUTUBOTAN => Some("ITEMID_DASSYUTUBOTAN"),
            Self::ITEMID_NOOMARUZYUERU => Some("ITEMID_NOOMARUZYUERU"),
            Self::ITEMID_TAIRYOKUNOHANE => Some("ITEMID_TAIRYOKUNOHANE"),
            Self::ITEMID_KINRYOKUNOHANE => Some("ITEMID_KINRYOKUNOHANE"),
            Self::ITEMID_TEIKOUNOHANE => Some("ITEMID_TEIKOUNOHANE"),
            Self::ITEMID_TIRYOKUNOHANE => Some("ITEMID_TIRYOKUNOHANE"),
            Self::ITEMID_SEISINNOHANE => Some("ITEMID_SEISINNOHANE"),
            Self::ITEMID_SYUNPATUNOHANE => Some("ITEMID_SYUNPATUNOHANE"),
            Self::ITEMID_KIREINAHANE => Some("ITEMID_KIREINAHANE"),
            Self::ITEMID_DORIIMUBOORU => Some("ITEMID_DORIIMUBOORU"),
            Self::ITEMID_KAORUKINOKO => Some("ITEMID_KAORUKINOKO"),
            Self::ITEMID_DEKAIKINNOTAMA => Some("ITEMID_DEKAIKINNOTAMA"),
            Self::ITEMID_ODANGOSINZYU => Some("ITEMID_ODANGOSINZYU"),
            Self::ITEMID_SUISEINOKAKERA => Some("ITEMID_SUISEINOKAKERA"),
            Self::ITEMID_WAZAMASIN93 => Some("ITEMID_WAZAMASIN93"),
            Self::ITEMID_WAZAMASIN94 => Some("ITEMID_WAZAMASIN94"),
            Self::ITEMID_WAZAMASIN95 => Some("ITEMID_WAZAMASIN95"),
            Self::ITEMID_HIKARUOMAMORI => Some("ITEMID_HIKARUOMAMORI"),
            Self::ITEMID_UTUSIKAGAMI => Some("ITEMID_UTUSIKAGAMI"),
            Self::ITEMID_ZYAKUTENHOKEN => Some("ITEMID_ZYAKUTENHOKEN"),
            Self::ITEMID_TOTUGEKITYOKKI => Some("ITEMID_TOTUGEKITYOKKI"),
            Self::ITEMID_SEIREIPUREETO => Some("ITEMID_SEIREIPUREETO"),
            Self::ITEMID_TOKUSEIKAPUSERU => Some("ITEMID_TOKUSEIKAPUSERU"),
            Self::ITEMID_HIKARIGOKE => Some("ITEMID_HIKARIGOKE"),
            Self::ITEMID_YUKIDAMA => Some("ITEMID_YUKIDAMA"),
            Self::ITEMID_BOUZINGOOGURU => Some("ITEMID_BOUZINGOOGURU"),
            Self::ITEMID_ROZERUNOMI => Some("ITEMID_ROZERUNOMI"),
            Self::ITEMID_AKKINOMI => Some("ITEMID_AKKINOMI"),
            Self::ITEMID_TARAPUNOMI => Some("ITEMID_TARAPUNOMI"),
            Self::ITEMID_WAZAMASIN96 => Some("ITEMID_WAZAMASIN96"),
            Self::ITEMID_WAZAMASIN97 => Some("ITEMID_WAZAMASIN97"),
            Self::ITEMID_WAZAMASIN98 => Some("ITEMID_WAZAMASIN98"),
            Self::ITEMID_WAZAMASIN99 => Some("ITEMID_WAZAMASIN99"),
            Self::ITEMID_TANKENKOKOROE => Some("ITEMID_TANKENKOKOROE"),
            Self::ITEMID_IMASIMENOTUBO => Some("ITEMID_IMASIMENOTUBO"),
            Self::ITEMID_GINNOOUKAN => Some("ITEMID_GINNOOUKAN"),
            Self::ITEMID_KINNOOUKAN => Some("ITEMID_KINNOOUKAN"),
            Self::ITEMID_BIBIRIDAMA => Some("ITEMID_BIBIRIDAMA"),
            Self::ITEMID_KOORINOISI => Some("ITEMID_KOORINOISI"),
            Self::ITEMID_URUTORABOORU => Some("ITEMID_URUTORABOORU"),
            Self::ITEMID_KURENAINOMITU => Some("ITEMID_KURENAINOMITU"),
            Self::ITEMID_YAMABUKINOMITU => Some("ITEMID_YAMABUKINOMITU"),
            Self::ITEMID_USUMOMONOMITU => Some("ITEMID_USUMOMONOMITU"),
            Self::ITEMID_MURASAKINOMITU => Some("ITEMID_MURASAKINOMITU"),
            Self::ITEMID_GURANDOKOOTO => Some("ITEMID_GURANDOKOOTO"),
            Self::ITEMID_BOUGOPATTO => Some("ITEMID_BOUGOPATTO"),
            Self::ITEMID_EREKISIIDO => Some("ITEMID_EREKISIIDO"),
            Self::ITEMID_SAIKOSIIDO => Some("ITEMID_SAIKOSIIDO"),
            Self::ITEMID_MISUTOSIIDO => Some("ITEMID_MISUTOSIIDO"),
            Self::ITEMID_GURASUSIIDO => Some("ITEMID_GURASUSIIDO"),
            Self::ITEMID_KUTITATURUGI => Some("ITEMID_KUTITATURUGI"),
            Self::ITEMID_KUTITATATE => Some("ITEMID_KUTITATATE"),
            Self::ITEMID_AMAAIRINGO => Some("ITEMID_AMAAIRINGO"),
            Self::ITEMID_SUPPAIRINGO => Some("ITEMID_SUPPAIRINGO"),
            Self::ITEMID_NODOAME => Some("ITEMID_NODOAME"),
            Self::ITEMID_DASSYUTUPAKKU => Some("ITEMID_DASSYUTUPAKKU"),
            Self::ITEMID_ATUZOKOBUUTU => Some("ITEMID_ATUZOKOBUUTU"),
            Self::ITEMID_KARABURIHOKEN => Some("ITEMID_KARABURIHOKEN"),
            Self::ITEMID_RUUMUSAABISU => Some("ITEMID_RUUMUSAABISU"),
            Self::ITEMID_BANNOUGASA => Some("ITEMID_BANNOUGASA"),
            Self::ITEMID_KEIKENTIAME_1 => Some("ITEMID_KEIKENTIAME_1"),
            Self::ITEMID_KEIKENTIAME_2 => Some("ITEMID_KEIKENTIAME_2"),
            Self::ITEMID_KEIKENTIAME_3 => Some("ITEMID_KEIKENTIAME_3"),
            Self::ITEMID_KEIKENTIAME_4 => Some("ITEMID_KEIKENTIAME_4"),
            Self::ITEMID_KEIKENTIAME_5 => Some("ITEMID_KEIKENTIAME_5"),
            Self::ITEMID_SAMISIGARIMINTO => Some("ITEMID_SAMISIGARIMINTO"),
            Self::ITEMID_IZIPPARIMINTO => Some("ITEMID_IZIPPARIMINTO"),
            Self::ITEMID_YANTYAMINTO => Some("ITEMID_YANTYAMINTO"),
            Self::ITEMID_YUKANMINTO => Some("ITEMID_YUKANMINTO"),
            Self::ITEMID_ZUBUTOIMINTO => Some("ITEMID_ZUBUTOIMINTO"),
            Self::ITEMID_WANPAKUMINTO => Some("ITEMID_WANPAKUMINTO"),
            Self::ITEMID_NOUTENKIMINTO => Some("ITEMID_NOUTENKIMINTO"),
            Self::ITEMID_NONKIMINTO => Some("ITEMID_NONKIMINTO"),
            Self::ITEMID_HIKAEMEMINTO => Some("ITEMID_HIKAEMEMINTO"),
            Self::ITEMID_OTTORIMINTO => Some("ITEMID_OTTORIMINTO"),
            Self::ITEMID_UKKARIMINTO => Some("ITEMID_UKKARIMINTO"),
            Self::ITEMID_REISEIMINTO => Some("ITEMID_REISEIMINTO"),
            Self::ITEMID_ODAYAKAMINTO => Some("ITEMID_ODAYAKAMINTO"),
            Self::ITEMID_OTONASIIMINTO => Some("ITEMID_OTONASIIMINTO"),
            Self::ITEMID_SINTYOUMINTO => Some("ITEMID_SINTYOUMINTO"),
            Self::ITEMID_NAMAIKIMINTO => Some("ITEMID_NAMAIKIMINTO"),
            Self::ITEMID_OKUBYOUMINTO => Some("ITEMID_OKUBYOUMINTO"),
            Self::ITEMID_SEKKTIMINTO => Some("ITEMID_SEKKTIMINTO"),
            Self::ITEMID_YOUKIMINTO => Some("ITEMID_YOUKIMINTO"),
            Self::ITEMID_MUJYAKIMINTO => Some("ITEMID_MUJYAKIMINTO"),
            Self::ITEMID_MAZIMEMINTO => Some("ITEMID_MAZIMEMINTO"),
            Self::ITEMID_WARETAPOTTO => Some("ITEMID_WARETAPOTTO"),
            Self::ITEMID_KAKETAPOTTO => Some("ITEMID_KAKETAPOTTO"),
            Self::ITEMID_ROTOMUNOKATAROGU => Some("ITEMID_ROTOMUNOKATAROGU"),
            Self::ITEMID_GARANATUBURESU => Some("ITEMID_GARANATUBURESU"),
            Self::ITEMID_KIDUNANODADUNA => Some("ITEMID_KIDUNANODADUNA"),
            Self::ITEMID_KIDUNANODADUNA_KAIZYO => Some("ITEMID_KIDUNANODADUNA_KAIZYO"),
            Self::ITEMID_GARANATURIISU => Some("ITEMID_GARANATURIISU"),
            Self::ITEMID_TOKUSEIPATTI => Some("ITEMID_TOKUSEIPATTI"),
            Self::ITEMID_DAIKONGOUDAMA => Some("ITEMID_DAIKONGOUDAMA"),
            Self::ITEMID_DAISIRATAMA => Some("ITEMID_DAISIRATAMA"),
            Self::ITEMID_DAIHAKKINDAMA => Some("ITEMID_DAIHAKKINDAMA"),
            Self::ITEMID_SUMAHOROTOMU => Some("ITEMID_SUMAHOROTOMU"),
            Self::ITEMID_SANDOUICCHI => Some("ITEMID_SANDOUICCHI"),
            Self::ITEMID_DENSETSUBOORUA => Some("ITEMID_DENSETSUBOORUA"),
            Self::ITEMID_DENSETSUBOORUB => Some("ITEMID_DENSETSUBOORUB"),
            Self::ITEMID_TAKARABOORU => Some("ITEMID_TAKARABOORU"),
            Self::ITEMID_GENSYOA => Some("ITEMID_GENSYOA"),
            Self::ITEMID_GENSYOB => Some("ITEMID_GENSYOB"),
            Self::ITEMID_HIROTTASAIFU => Some("ITEMID_HIROTTASAIFU"),
            Self::ITEMID_CHIISANATAKENOKO => Some("ITEMID_CHIISANATAKENOKO"),
            Self::ITEMID_OOKINATAKENOKO => Some("ITEMID_OOKINATAKENOKO"),
            Self::ITEMID_AKUNOKAKEJIKU => Some("ITEMID_AKUNOKAKEJIKU"),
            Self::ITEMID_MIZUNOKAKEJIKU => Some("ITEMID_MIZUNOKAKEJIKU"),
            Self::ITEMID_NOROINOYOROI => Some("ITEMID_NOROINOYOROI"),
            Self::ITEMID_CHENJAA1 => Some("ITEMID_CHENJAA1"),
            Self::ITEMID_CHENJAA2 => Some("ITEMID_CHENJAA2"),
            Self::ITEMID_CHENJAA3 => Some("ITEMID_CHENJAA3"),
            Self::ITEMID_CHENJAA4 => Some("ITEMID_CHENJAA4"),
            Self::ITEMID_CHENJAA5 => Some("ITEMID_CHENJAA5"),
            Self::ITEMID_CHENJAA6 => Some("ITEMID_CHENJAA6"),
            Self::ITEMID_CHENJAA7 => Some("ITEMID_CHENJAA7"),
            Self::ITEMID_CHENJAA8 => Some("ITEMID_CHENJAA8"),
            Self::ITEMID_CHENJAA9 => Some("ITEMID_CHENJAA9"),
            Self::ITEMID_CHENJAA10 => Some("ITEMID_CHENJAA10"),
            Self::ITEMID_CHENJAA11 => Some("ITEMID_CHENJAA11"),
            Self::ITEMID_CHENJAA12 => Some("ITEMID_CHENJAA12"),
            Self::ITEMID_CHENJAA13 => Some("ITEMID_CHENJAA13"),
            Self::ITEMID_CHENJAA14 => Some("ITEMID_CHENJAA14"),
            Self::ITEMID_CHENJAA15 => Some("ITEMID_CHENJAA15"),
            Self::ITEMID_CHENJAA16 => Some("ITEMID_CHENJAA16"),
            Self::ITEMID_CHENJAA17 => Some("ITEMID_CHENJAA17"),
            Self::ITEMID_CHENJAA18 => Some("ITEMID_CHENJAA18"),
            Self::ITEMID_BUUSUTOENAJII => Some("ITEMID_BUUSUTOENAJII"),
            Self::ITEMID_SENTOUBAFFA1 => Some("ITEMID_SENTOUBAFFA1"),
            Self::ITEMID_SENTOUBAFFA2 => Some("ITEMID_SENTOUBAFFA2"),
            Self::ITEMID_SENTOUBAFFA3 => Some("ITEMID_SENTOUBAFFA3"),
            Self::ITEMID_SENTOUBAFFA4 => Some("ITEMID_SENTOUBAFFA4"),
            Self::ITEMID_SENTOUBAFFA5 => Some("ITEMID_SENTOUBAFFA5"),
            Self::ITEMID_SENTOUBAFFA6 => Some("ITEMID_SENTOUBAFFA6"),
            Self::ITEMID_MAYONEEZU => Some("ITEMID_MAYONEEZU"),
            Self::ITEMID_KECHAPPU => Some("ITEMID_KECHAPPU"),
            Self::ITEMID_MASUTAADO => Some("ITEMID_MASUTAADO"),
            Self::ITEMID_BATAA => Some("ITEMID_BATAA"),
            Self::ITEMID_PIINATTSUBATAA => Some("ITEMID_PIINATTSUBATAA"),
            Self::ITEMID_CHIRISOOSU => Some("ITEMID_CHIRISOOSU"),
            Self::ITEMID_SORUTO => Some("ITEMID_SORUTO"),
            Self::ITEMID_PEPPAA => Some("ITEMID_PEPPAA"),
            Self::ITEMID_YOOGURUTO => Some("ITEMID_YOOGURUTO"),
            Self::ITEMID_HOIPPUKURIIMU => Some("ITEMID_HOIPPUKURIIMU"),
            Self::ITEMID_KURIIMUCHIIZU => Some("ITEMID_KURIIMUCHIIZU"),
            Self::ITEMID_BERIIJAMU => Some("ITEMID_BERIIJAMU"),
            Self::ITEMID_MAAMAREEDO => Some("ITEMID_MAAMAREEDO"),
            Self::ITEMID_ORIIBUOIRU => Some("ITEMID_ORIIBUOIRU"),
            Self::ITEMID_BINEGAA => Some("ITEMID_BINEGAA"),
            Self::ITEMID_TAKARASUPAISU1 => Some("ITEMID_TAKARASUPAISU1"),
            Self::ITEMID_TAKARASUPAISU2 => Some("ITEMID_TAKARASUPAISU2"),
            Self::ITEMID_TAKARASUPAISU3 => Some("ITEMID_TAKARASUPAISU3"),
            Self::ITEMID_TAKARASUPAISU4 => Some("ITEMID_TAKARASUPAISU4"),
            Self::ITEMID_TAKARASUPAISU5 => Some("ITEMID_TAKARASUPAISU5"),
            Self::ITEMID_RETASUPAKKU => Some("ITEMID_RETASUPAKKU"),
            Self::ITEMID_TOMATOSURAISU => Some("ITEMID_TOMATOSURAISU"),
            Self::ITEMID_KATTOMINITOMATO => Some("ITEMID_KATTOMINITOMATO"),
            Self::ITEMID_KYUURISURAISU => Some("ITEMID_KYUURISURAISU"),
            Self::ITEMID_PIKURUSUSURAISU => Some("ITEMID_PIKURUSUSURAISU"),
            Self::ITEMID_TAMANEGISURAISU => Some("ITEMID_TAMANEGISURAISU"),
            Self::ITEMID_REDDOAARII => Some("ITEMID_REDDOAARII"),
            Self::ITEMID_PIIMANSURAISU => Some("ITEMID_PIIMANSURAISU"),
            Self::ITEMID_AKAPAPURIKASURAISU => Some("ITEMID_AKAPAPURIKASURAISU"),
            Self::ITEMID_KIPAPURIKASURAISU => Some("ITEMID_KIPAPURIKASURAISU"),
            Self::ITEMID_ABOKADO => Some("ITEMID_ABOKADO"),
            Self::ITEMID_YAKIBEEKON => Some("ITEMID_YAKIBEEKON"),
            Self::ITEMID_HAMUSURAISU => Some("ITEMID_HAMUSURAISU"),
            Self::ITEMID_NAMAHAMU => Some("ITEMID_NAMAHAMU"),
            Self::ITEMID_YAKICHORISOO => Some("ITEMID_YAKICHORISOO"),
            Self::ITEMID_BOIRUSOOSEEJI => Some("ITEMID_BOIRUSOOSEEJI"),
            Self::ITEMID_HANBAAGU => Some("ITEMID_HANBAAGU"),
            Self::ITEMID_KANISUTIKKU => Some("ITEMID_KANISUTIKKU"),
            Self::ITEMID_SUMOOKUKIRIMI => Some("ITEMID_SUMOOKUKIRIMI"),
            Self::ITEMID_KIRIMIFURAI => Some("ITEMID_KIRIMIFURAI"),
            Self::ITEMID_SURAISUEGGU => Some("ITEMID_SURAISUEGGU"),
            Self::ITEMID_TORUTIIJA => Some("ITEMID_TORUTIIJA"),
            Self::ITEMID_TOOFU => Some("ITEMID_TOOFU"),
            Self::ITEMID_RAISU => Some("ITEMID_RAISU"),
            Self::ITEMID_NUUDORU => Some("ITEMID_NUUDORU"),
            Self::ITEMID_POTETOSARADA => Some("ITEMID_POTETOSARADA"),
            Self::ITEMID_SURAISUCHIIZU => Some("ITEMID_SURAISUCHIIZU"),
            Self::ITEMID_BANANASURAISU => Some("ITEMID_BANANASURAISU"),
            Self::ITEMID_ICHIGOSURAISU => Some("ITEMID_ICHIGOSURAISU"),
            Self::ITEMID_WAGIRIRINGO => Some("ITEMID_WAGIRIRINGO"),
            Self::ITEMID_WAGIRIKIUI => Some("ITEMID_WAGIRIKIUI"),
            Self::ITEMID_KATTOPAIN => Some("ITEMID_KATTOPAIN"),
            Self::ITEMID_HARAPEENYO => Some("ITEMID_HARAPEENYO"),
            Self::ITEMID_HOOSURADISSHU => Some("ITEMID_HOOSURADISSHU"),
            Self::ITEMID_KAREEPAUDAA => Some("ITEMID_KAREEPAUDAA"),
            Self::ITEMID_WASABISOOSU => Some("ITEMID_WASABISOOSU"),
            Self::ITEMID_KURESON => Some("ITEMID_KURESON"),
            Self::ITEMID_BAJIRU => Some("ITEMID_BAJIRU"),
            Self::ITEMID_SOZAI01 => Some("ITEMID_SOZAI01"),
            Self::ITEMID_SOZAI02 => Some("ITEMID_SOZAI02"),
            Self::ITEMID_SOZAI03 => Some("ITEMID_SOZAI03"),
            Self::ITEMID_SOZAI04 => Some("ITEMID_SOZAI04"),
            Self::ITEMID_SOZAI05 => Some("ITEMID_SOZAI05"),
            Self::ITEMID_SOZAI06 => Some("ITEMID_SOZAI06"),
            Self::ITEMID_SOZAI07 => Some("ITEMID_SOZAI07"),
            Self::ITEMID_SOZAI08 => Some("ITEMID_SOZAI08"),
            Self::ITEMID_SOZAI09 => Some("ITEMID_SOZAI09"),
            Self::ITEMID_SOZAI10 => Some("ITEMID_SOZAI10"),
            Self::ITEMID_SOZAI11 => Some("ITEMID_SOZAI11"),
            Self::ITEMID_SOZAI12 => Some("ITEMID_SOZAI12"),
            Self::ITEMID_SOZAI13 => Some("ITEMID_SOZAI13"),
            Self::ITEMID_SOZAI14 => Some("ITEMID_SOZAI14"),
            Self::ITEMID_SOZAI15 => Some("ITEMID_SOZAI15"),
            Self::ITEMID_SOZAI16 => Some("ITEMID_SOZAI16"),
            Self::ITEMID_SOZAI17 => Some("ITEMID_SOZAI17"),
            Self::ITEMID_SOZAI18 => Some("ITEMID_SOZAI18"),
            Self::ITEMID_SOZAI19 => Some("ITEMID_SOZAI19"),
            Self::ITEMID_SOZAI20 => Some("ITEMID_SOZAI20"),
            Self::ITEMID_SOZAI21 => Some("ITEMID_SOZAI21"),
            Self::ITEMID_SOZAI22 => Some("ITEMID_SOZAI22"),
            Self::ITEMID_SOZAI23 => Some("ITEMID_SOZAI23"),
            Self::ITEMID_SOZAI24 => Some("ITEMID_SOZAI24"),
            Self::ITEMID_SOZAI25 => Some("ITEMID_SOZAI25"),
            Self::ITEMID_SOZAI26 => Some("ITEMID_SOZAI26"),
            Self::ITEMID_SOZAI27 => Some("ITEMID_SOZAI27"),
            Self::ITEMID_SOZAI28 => Some("ITEMID_SOZAI28"),
            Self::ITEMID_SOZAI29 => Some("ITEMID_SOZAI29"),
            Self::ITEMID_SOZAI30 => Some("ITEMID_SOZAI30"),
            Self::ITEMID_SOZAI31 => Some("ITEMID_SOZAI31"),
            Self::ITEMID_SOZAI32 => Some("ITEMID_SOZAI32"),
            Self::ITEMID_SOZAI33 => Some("ITEMID_SOZAI33"),
            Self::ITEMID_SOZAI34 => Some("ITEMID_SOZAI34"),
            Self::ITEMID_SOZAI35 => Some("ITEMID_SOZAI35"),
            Self::ITEMID_SOZAI36 => Some("ITEMID_SOZAI36"),
            Self::ITEMID_SOZAI37 => Some("ITEMID_SOZAI37"),
            Self::ITEMID_SOZAI38 => Some("ITEMID_SOZAI38"),
            Self::ITEMID_SOZAI39 => Some("ITEMID_SOZAI39"),
            Self::ITEMID_SOZAI40 => Some("ITEMID_SOZAI40"),
            Self::ITEMID_SOZAI41 => Some("ITEMID_SOZAI41"),
            Self::ITEMID_SOZAI42 => Some("ITEMID_SOZAI42"),
            Self::ITEMID_SOZAI43 => Some("ITEMID_SOZAI43"),
            Self::ITEMID_SOZAI44 => Some("ITEMID_SOZAI44"),
            Self::ITEMID_SOZAI45 => Some("ITEMID_SOZAI45"),
            Self::ITEMID_SOZAI46 => Some("ITEMID_SOZAI46"),
            Self::ITEMID_SOZAI47 => Some("ITEMID_SOZAI47"),
            Self::ITEMID_SOZAI48 => Some("ITEMID_SOZAI48"),
            Self::ITEMID_SOZAI49 => Some("ITEMID_SOZAI49"),
            Self::ITEMID_SOZAI50 => Some("ITEMID_SOZAI50"),
            Self::ITEMID_SOZAI51 => Some("ITEMID_SOZAI51"),
            Self::ITEMID_SOZAI52 => Some("ITEMID_SOZAI52"),
            Self::ITEMID_SOZAI53 => Some("ITEMID_SOZAI53"),
            Self::ITEMID_SOZAI54 => Some("ITEMID_SOZAI54"),
            Self::ITEMID_SOZAI55 => Some("ITEMID_SOZAI55"),
            Self::ITEMID_SOZAI56 => Some("ITEMID_SOZAI56"),
            Self::ITEMID_SOZAI57 => Some("ITEMID_SOZAI57"),
            Self::ITEMID_SOZAI58 => Some("ITEMID_SOZAI58"),
            Self::ITEMID_SOZAI59 => Some("ITEMID_SOZAI59"),
            Self::ITEMID_SOZAI60 => Some("ITEMID_SOZAI60"),
            Self::ITEMID_SOZAI61 => Some("ITEMID_SOZAI61"),
            Self::ITEMID_SOZAI62 => Some("ITEMID_SOZAI62"),
            Self::ITEMID_SOZAI63 => Some("ITEMID_SOZAI63"),
            Self::ITEMID_SOZAI64 => Some("ITEMID_SOZAI64"),
            Self::ITEMID_SOZAI65 => Some("ITEMID_SOZAI65"),
            Self::ITEMID_SOZAI66 => Some("ITEMID_SOZAI66"),
            Self::ITEMID_SOZAI67 => Some("ITEMID_SOZAI67"),
            Self::ITEMID_SOZAI68 => Some("ITEMID_SOZAI68"),
            Self::ITEMID_SOZAI69 => Some("ITEMID_SOZAI69"),
            Self::ITEMID_SOZAI70 => Some("ITEMID_SOZAI70"),
            Self::ITEMID_SOZAI71 => Some("ITEMID_SOZAI71"),
            Self::ITEMID_SOZAI72 => Some("ITEMID_SOZAI72"),
            Self::ITEMID_SOZAI73 => Some("ITEMID_SOZAI73"),
            Self::ITEMID_SOZAI74 => Some("ITEMID_SOZAI74"),
            Self::ITEMID_SOZAI75 => Some("ITEMID_SOZAI75"),
            Self::ITEMID_SOZAI76 => Some("ITEMID_SOZAI76"),
            Self::ITEMID_SOZAI77 => Some("ITEMID_SOZAI77"),
            Self::ITEMID_SOZAI78 => Some("ITEMID_SOZAI78"),
            Self::ITEMID_SOZAI79 => Some("ITEMID_SOZAI79"),
            Self::ITEMID_SOZAI80 => Some("ITEMID_SOZAI80"),
            Self::ITEMID_SOZAI81 => Some("ITEMID_SOZAI81"),
            Self::ITEMID_SOZAI82 => Some("ITEMID_SOZAI82"),
            Self::ITEMID_SOZAI83 => Some("ITEMID_SOZAI83"),
            Self::ITEMID_SOZAI84 => Some("ITEMID_SOZAI84"),
            Self::ITEMID_SOZAI85 => Some("ITEMID_SOZAI85"),
            Self::ITEMID_SOZAI86 => Some("ITEMID_SOZAI86"),
            Self::ITEMID_SOZAI87 => Some("ITEMID_SOZAI87"),
            Self::ITEMID_SOZAI88 => Some("ITEMID_SOZAI88"),
            Self::ITEMID_SOZAI89 => Some("ITEMID_SOZAI89"),
            Self::ITEMID_SOZAI90 => Some("ITEMID_SOZAI90"),
            Self::ITEMID_SOZAI91 => Some("ITEMID_SOZAI91"),
            Self::ITEMID_SOZAI92 => Some("ITEMID_SOZAI92"),
            Self::ITEMID_SOZAI93 => Some("ITEMID_SOZAI93"),
            Self::ITEMID_SOZAI94 => Some("ITEMID_SOZAI94"),
            Self::ITEMID_SOZAI95 => Some("ITEMID_SOZAI95"),
            Self::ITEMID_SOZAI96 => Some("ITEMID_SOZAI96"),
            Self::ITEMID_SOZAI97 => Some("ITEMID_SOZAI97"),
            Self::ITEMID_SOZAI98 => Some("ITEMID_SOZAI98"),
            Self::ITEMID_SOZAI99 => Some("ITEMID_SOZAI99"),
            Self::ITEMID_SOZAI100 => Some("ITEMID_SOZAI100"),
            Self::ITEMID_SOZAI101 => Some("ITEMID_SOZAI101"),
            Self::ITEMID_SOZAI102 => Some("ITEMID_SOZAI102"),
            Self::ITEMID_SOZAI103 => Some("ITEMID_SOZAI103"),
            Self::ITEMID_SOZAI104 => Some("ITEMID_SOZAI104"),
            Self::ITEMID_SOZAI105 => Some("ITEMID_SOZAI105"),
            Self::ITEMID_SOZAI106 => Some("ITEMID_SOZAI106"),
            Self::ITEMID_SOZAI107 => Some("ITEMID_SOZAI107"),
            Self::ITEMID_SOZAI108 => Some("ITEMID_SOZAI108"),
            Self::ITEMID_SOZAI109 => Some("ITEMID_SOZAI109"),
            Self::ITEMID_SOZAI110 => Some("ITEMID_SOZAI110"),
            Self::ITEMID_SOZAI111 => Some("ITEMID_SOZAI111"),
            Self::ITEMID_SOZAI112 => Some("ITEMID_SOZAI112"),
            Self::ITEMID_SOZAI113 => Some("ITEMID_SOZAI113"),
            Self::ITEMID_SOZAI114 => Some("ITEMID_SOZAI114"),
            Self::ITEMID_SOZAI115 => Some("ITEMID_SOZAI115"),
            Self::ITEMID_SOZAI116 => Some("ITEMID_SOZAI116"),
            Self::ITEMID_SOZAI117 => Some("ITEMID_SOZAI117"),
            Self::ITEMID_SOZAI118 => Some("ITEMID_SOZAI118"),
            Self::ITEMID_SOZAI119 => Some("ITEMID_SOZAI119"),
            Self::ITEMID_SOZAI120 => Some("ITEMID_SOZAI120"),
            Self::ITEMID_SOZAI121 => Some("ITEMID_SOZAI121"),
            Self::ITEMID_SOZAI122 => Some("ITEMID_SOZAI122"),
            Self::ITEMID_SOZAI123 => Some("ITEMID_SOZAI123"),
            Self::ITEMID_SOZAI124 => Some("ITEMID_SOZAI124"),
            Self::ITEMID_SOZAI125 => Some("ITEMID_SOZAI125"),
            Self::ITEMID_SOZAI126 => Some("ITEMID_SOZAI126"),
            Self::ITEMID_SOZAI127 => Some("ITEMID_SOZAI127"),
            Self::ITEMID_SOZAI128 => Some("ITEMID_SOZAI128"),
            Self::ITEMID_SOZAI129 => Some("ITEMID_SOZAI129"),
            Self::ITEMID_SOZAI130 => Some("ITEMID_SOZAI130"),
            Self::ITEMID_SOZAI131 => Some("ITEMID_SOZAI131"),
            Self::ITEMID_SOZAI132 => Some("ITEMID_SOZAI132"),
            Self::ITEMID_SOZAI133 => Some("ITEMID_SOZAI133"),
            Self::ITEMID_SOZAI134 => Some("ITEMID_SOZAI134"),
            Self::ITEMID_SOZAI135 => Some("ITEMID_SOZAI135"),
            Self::ITEMID_SOZAI136 => Some("ITEMID_SOZAI136"),
            Self::ITEMID_SOZAI137 => Some("ITEMID_SOZAI137"),
            Self::ITEMID_SOZAI138 => Some("ITEMID_SOZAI138"),
            Self::ITEMID_SOZAI139 => Some("ITEMID_SOZAI139"),
            Self::ITEMID_SOZAI140 => Some("ITEMID_SOZAI140"),
            Self::ITEMID_SOZAI141 => Some("ITEMID_SOZAI141"),
            Self::ITEMID_SOZAI142 => Some("ITEMID_SOZAI142"),
            Self::ITEMID_SOZAI143 => Some("ITEMID_SOZAI143"),
            Self::ITEMID_SOZAI144 => Some("ITEMID_SOZAI144"),
            Self::ITEMID_SOZAI148 => Some("ITEMID_SOZAI148"),
            Self::ITEMID_SOZAI149 => Some("ITEMID_SOZAI149"),
            Self::ITEMID_SOZAI150 => Some("ITEMID_SOZAI150"),
            Self::ITEMID_SOZAI151 => Some("ITEMID_SOZAI151"),
            Self::ITEMID_SOZAI152 => Some("ITEMID_SOZAI152"),
            Self::ITEMID_SOZAI153 => Some("ITEMID_SOZAI153"),
            Self::ITEMID_SOZAI154 => Some("ITEMID_SOZAI154"),
            Self::ITEMID_SOZAI155 => Some("ITEMID_SOZAI155"),
            Self::ITEMID_SOZAI156 => Some("ITEMID_SOZAI156"),
            Self::ITEMID_SOZAI157 => Some("ITEMID_SOZAI157"),
            Self::ITEMID_SOZAI158 => Some("ITEMID_SOZAI158"),
            Self::ITEMID_SOZAI159 => Some("ITEMID_SOZAI159"),
            Self::ITEMID_SOZAI160 => Some("ITEMID_SOZAI160"),
            Self::ITEMID_SOZAI161 => Some("ITEMID_SOZAI161"),
            Self::ITEMID_SOZAI162 => Some("ITEMID_SOZAI162"),
            Self::ITEMID_SOZAI163 => Some("ITEMID_SOZAI163"),
            Self::ITEMID_SOZAI164 => Some("ITEMID_SOZAI164"),
            Self::ITEMID_SOZAI165 => Some("ITEMID_SOZAI165"),
            Self::ITEMID_SOZAI166 => Some("ITEMID_SOZAI166"),
            Self::ITEMID_SOZAI167 => Some("ITEMID_SOZAI167"),
            Self::ITEMID_SOZAI168 => Some("ITEMID_SOZAI168"),
            Self::ITEMID_SOZAI171 => Some("ITEMID_SOZAI171"),
            Self::ITEMID_SOZAI172 => Some("ITEMID_SOZAI172"),
            Self::ITEMID_SOZAI173 => Some("ITEMID_SOZAI173"),
            Self::ITEMID_SOZAI174 => Some("ITEMID_SOZAI174"),
            Self::ITEMID_SOZAI175 => Some("ITEMID_SOZAI175"),
            Self::ITEMID_SOZAI176 => Some("ITEMID_SOZAI176"),
            Self::ITEMID_SOZAI177 => Some("ITEMID_SOZAI177"),
            Self::ITEMID_SOZAI178 => Some("ITEMID_SOZAI178"),
            Self::ITEMID_SOZAI179 => Some("ITEMID_SOZAI179"),
            Self::ITEMID_SOZAI180 => Some("ITEMID_SOZAI180"),
            Self::ITEMID_SOZAI181 => Some("ITEMID_SOZAI181"),
            Self::ITEMID_SOZAI182 => Some("ITEMID_SOZAI182"),
            Self::ITEMID_SOZAI201 => Some("ITEMID_SOZAI201"),
            Self::ITEMID_SOZAI202 => Some("ITEMID_SOZAI202"),
            Self::ITEMID_SOZAI203 => Some("ITEMID_SOZAI203"),
            Self::ITEMID_SOZAI204 => Some("ITEMID_SOZAI204"),
            Self::ITEMID_WAZAMASIN100 => Some("ITEMID_WAZAMASIN100"),
            Self::ITEMID_WAZAMASIN101 => Some("ITEMID_WAZAMASIN101"),
            Self::ITEMID_WAZAMASIN102 => Some("ITEMID_WAZAMASIN102"),
            Self::ITEMID_WAZAMASIN103 => Some("ITEMID_WAZAMASIN103"),
            Self::ITEMID_WAZAMASIN104 => Some("ITEMID_WAZAMASIN104"),
            Self::ITEMID_WAZAMASIN105 => Some("ITEMID_WAZAMASIN105"),
            Self::ITEMID_WAZAMASIN106 => Some("ITEMID_WAZAMASIN106"),
            Self::ITEMID_WAZAMASIN107 => Some("ITEMID_WAZAMASIN107"),
            Self::ITEMID_WAZAMASIN108 => Some("ITEMID_WAZAMASIN108"),
            Self::ITEMID_WAZAMASIN109 => Some("ITEMID_WAZAMASIN109"),
            Self::ITEMID_WAZAMASIN110 => Some("ITEMID_WAZAMASIN110"),
            Self::ITEMID_WAZAMASIN111 => Some("ITEMID_WAZAMASIN111"),
            Self::ITEMID_WAZAMASIN112 => Some("ITEMID_WAZAMASIN112"),
            Self::ITEMID_WAZAMASIN113 => Some("ITEMID_WAZAMASIN113"),
            Self::ITEMID_WAZAMASIN114 => Some("ITEMID_WAZAMASIN114"),
            Self::ITEMID_WAZAMASIN115 => Some("ITEMID_WAZAMASIN115"),
            Self::ITEMID_WAZAMASIN116 => Some("ITEMID_WAZAMASIN116"),
            Self::ITEMID_WAZAMASIN117 => Some("ITEMID_WAZAMASIN117"),
            Self::ITEMID_WAZAMASIN118 => Some("ITEMID_WAZAMASIN118"),
            Self::ITEMID_WAZAMASIN119 => Some("ITEMID_WAZAMASIN119"),
            Self::ITEMID_WAZAMASIN120 => Some("ITEMID_WAZAMASIN120"),
            Self::ITEMID_WAZAMASIN121 => Some("ITEMID_WAZAMASIN121"),
            Self::ITEMID_WAZAMASIN122 => Some("ITEMID_WAZAMASIN122"),
            Self::ITEMID_WAZAMASIN123 => Some("ITEMID_WAZAMASIN123"),
            Self::ITEMID_WAZAMASIN124 => Some("ITEMID_WAZAMASIN124"),
            Self::ITEMID_WAZAMASIN125 => Some("ITEMID_WAZAMASIN125"),
            Self::ITEMID_WAZAMASIN126 => Some("ITEMID_WAZAMASIN126"),
            Self::ITEMID_WAZAMASIN127 => Some("ITEMID_WAZAMASIN127"),
            Self::ITEMID_WAZAMASIN128 => Some("ITEMID_WAZAMASIN128"),
            Self::ITEMID_WAZAMASIN129 => Some("ITEMID_WAZAMASIN129"),
            Self::ITEMID_WAZAMASIN130 => Some("ITEMID_WAZAMASIN130"),
            Self::ITEMID_WAZAMASIN131 => Some("ITEMID_WAZAMASIN131"),
            Self::ITEMID_WAZAMASIN132 => Some("ITEMID_WAZAMASIN132"),
            Self::ITEMID_WAZAMASIN133 => Some("ITEMID_WAZAMASIN133"),
            Self::ITEMID_WAZAMASIN134 => Some("ITEMID_WAZAMASIN134"),
            Self::ITEMID_WAZAMASIN135 => Some("ITEMID_WAZAMASIN135"),
            Self::ITEMID_WAZAMASIN136 => Some("ITEMID_WAZAMASIN136"),
            Self::ITEMID_WAZAMASIN137 => Some("ITEMID_WAZAMASIN137"),
            Self::ITEMID_WAZAMASIN138 => Some("ITEMID_WAZAMASIN138"),
            Self::ITEMID_WAZAMASIN139 => Some("ITEMID_WAZAMASIN139"),
            Self::ITEMID_WAZAMASIN140 => Some("ITEMID_WAZAMASIN140"),
            Self::ITEMID_WAZAMASIN141 => Some("ITEMID_WAZAMASIN141"),
            Self::ITEMID_WAZAMASIN142 => Some("ITEMID_WAZAMASIN142"),
            Self::ITEMID_WAZAMASIN143 => Some("ITEMID_WAZAMASIN143"),
            Self::ITEMID_WAZAMASIN144 => Some("ITEMID_WAZAMASIN144"),
            Self::ITEMID_WAZAMASIN145 => Some("ITEMID_WAZAMASIN145"),
            Self::ITEMID_WAZAMASIN146 => Some("ITEMID_WAZAMASIN146"),
            Self::ITEMID_WAZAMASIN147 => Some("ITEMID_WAZAMASIN147"),
            Self::ITEMID_WAZAMASIN148 => Some("ITEMID_WAZAMASIN148"),
            Self::ITEMID_WAZAMASIN149 => Some("ITEMID_WAZAMASIN149"),
            Self::ITEMID_WAZAMASIN150 => Some("ITEMID_WAZAMASIN150"),
            Self::ITEMID_WAZAMASIN151 => Some("ITEMID_WAZAMASIN151"),
            Self::ITEMID_WAZAMASIN152 => Some("ITEMID_WAZAMASIN152"),
            Self::ITEMID_WAZAMASIN153 => Some("ITEMID_WAZAMASIN153"),
            Self::ITEMID_WAZAMASIN154 => Some("ITEMID_WAZAMASIN154"),
            Self::ITEMID_WAZAMASIN155 => Some("ITEMID_WAZAMASIN155"),
            Self::ITEMID_WAZAMASIN156 => Some("ITEMID_WAZAMASIN156"),
            Self::ITEMID_WAZAMASIN157 => Some("ITEMID_WAZAMASIN157"),
            Self::ITEMID_WAZAMASIN158 => Some("ITEMID_WAZAMASIN158"),
            Self::ITEMID_WAZAMASIN159 => Some("ITEMID_WAZAMASIN159"),
            Self::ITEMID_WAZAMASIN160 => Some("ITEMID_WAZAMASIN160"),
            Self::ITEMID_WAZAMASIN161 => Some("ITEMID_WAZAMASIN161"),
            Self::ITEMID_WAZAMASIN162 => Some("ITEMID_WAZAMASIN162"),
            Self::ITEMID_WAZAMASIN163 => Some("ITEMID_WAZAMASIN163"),
            Self::ITEMID_WAZAMASIN164 => Some("ITEMID_WAZAMASIN164"),
            Self::ITEMID_WAZAMASIN165 => Some("ITEMID_WAZAMASIN165"),
            Self::ITEMID_WAZAMASIN166 => Some("ITEMID_WAZAMASIN166"),
            Self::ITEMID_WAZAMASIN167 => Some("ITEMID_WAZAMASIN167"),
            Self::ITEMID_WAZAMASIN168 => Some("ITEMID_WAZAMASIN168"),
            Self::ITEMID_WAZAMASIN169 => Some("ITEMID_WAZAMASIN169"),
            Self::ITEMID_WAZAMASIN170 => Some("ITEMID_WAZAMASIN170"),
            Self::ITEMID_WAZAMASIN171 => Some("ITEMID_WAZAMASIN171"),
            Self::ITEMID_PIKUNIKKUSETTO => Some("ITEMID_PIKUNIKKUSETTO"),
            Self::ITEMID_SUITOU1 => Some("ITEMID_SUITOU1"),
            Self::ITEMID_SUITOU2 => Some("ITEMID_SUITOU2"),
            Self::ITEMID_SUITOU3 => Some("ITEMID_SUITOU3"),
            Self::ITEMID_SUITOU4 => Some("ITEMID_SUITOU4"),
            Self::ITEMID_SUITOU5 => Some("ITEMID_SUITOU5"),
            Self::ITEMID_KOPPU1 => Some("ITEMID_KOPPU1"),
            Self::ITEMID_KOPPU2 => Some("ITEMID_KOPPU2"),
            Self::ITEMID_KOPPU3 => Some("ITEMID_KOPPU3"),
            Self::ITEMID_KOPPU4 => Some("ITEMID_KOPPU4"),
            Self::ITEMID_KOPPU5 => Some("ITEMID_KOPPU5"),
            Self::ITEMID_TEEBURUKABAA1 => Some("ITEMID_TEEBURUKABAA1"),
            Self::ITEMID_TEEBURUKABAA2 => Some("ITEMID_TEEBURUKABAA2"),
            Self::ITEMID_TEEBURUKABAA3 => Some("ITEMID_TEEBURUKABAA3"),
            Self::ITEMID_TEEBURUKABAA4 => Some("ITEMID_TEEBURUKABAA4"),
            Self::ITEMID_TEEBURUKABAA5 => Some("ITEMID_TEEBURUKABAA5"),
            Self::ITEMID_PIKUNIKKUBOORU1 => Some("ITEMID_PIKUNIKKUBOORU1"),
            Self::ITEMID_PIKUNIKKUBOORU2 => Some("ITEMID_PIKUNIKKUBOORU2"),
            Self::ITEMID_PIKUNIKKUBOORU3 => Some("ITEMID_PIKUNIKKUBOORU3"),
            Self::ITEMID_PIKUNIKKUBOORU4 => Some("ITEMID_PIKUNIKKUBOORU4"),
            Self::ITEMID_PIKUNIKKUBOORU5 => Some("ITEMID_PIKUNIKKUBOORU5"),
            Self::ITEMID_RANCHIPIKKU1 => Some("ITEMID_RANCHIPIKKU1"),
            Self::ITEMID_RANCHIPIKKU2 => Some("ITEMID_RANCHIPIKKU2"),
            Self::ITEMID_RANCHIPIKKU3 => Some("ITEMID_RANCHIPIKKU3"),
            Self::ITEMID_RANCHIPIKKU4 => Some("ITEMID_RANCHIPIKKU4"),
            Self::ITEMID_RANCHIPIKKU5 => Some("ITEMID_RANCHIPIKKU5"),
            Self::ITEMID_RANCHIPIKKU6 => Some("ITEMID_RANCHIPIKKU6"),
            Self::ITEMID_RANCHIPIKKU7 => Some("ITEMID_RANCHIPIKKU7"),
            Self::ITEMID_RANCHIPIKKU8 => Some("ITEMID_RANCHIPIKKU8"),
            Self::ITEMID_RANCHIPIKKU9 => Some("ITEMID_RANCHIPIKKU9"),
            Self::ITEMID_IWAINOYOROI => Some("ITEMID_IWAINOYOROI"),
            Self::ITEMID_KASIRANOAKASI => Some("ITEMID_KASIRANOAKASI"),
            Self::ITEMID_SUITOU6 => Some("ITEMID_SUITOU6"),
            Self::ITEMID_SUITOU7 => Some("ITEMID_SUITOU7"),
            Self::ITEMID_SUITOU8 => Some("ITEMID_SUITOU8"),
            Self::ITEMID_SUITOU9 => Some("ITEMID_SUITOU9"),
            Self::ITEMID_SUITOU10 => Some("ITEMID_SUITOU10"),
            Self::ITEMID_SUITOU11 => Some("ITEMID_SUITOU11"),
            Self::ITEMID_SUITOU12 => Some("ITEMID_SUITOU12"),
            Self::ITEMID_KOPPU6 => Some("ITEMID_KOPPU6"),
            Self::ITEMID_KOPPU7 => Some("ITEMID_KOPPU7"),
            Self::ITEMID_KOPPU8 => Some("ITEMID_KOPPU8"),
            Self::ITEMID_KOPPU9 => Some("ITEMID_KOPPU9"),
            Self::ITEMID_KOPPU10 => Some("ITEMID_KOPPU10"),
            Self::ITEMID_KOPPU11 => Some("ITEMID_KOPPU11"),
            Self::ITEMID_KOPPU12 => Some("ITEMID_KOPPU12"),
            Self::ITEMID_KOPPU13 => Some("ITEMID_KOPPU13"),
            Self::ITEMID_KOPPU14 => Some("ITEMID_KOPPU14"),
            Self::ITEMID_KOPPU15 => Some("ITEMID_KOPPU15"),
            Self::ITEMID_PIKUNIKKUBOORU6 => Some("ITEMID_PIKUNIKKUBOORU6"),
            Self::ITEMID_TEEBURUKABAA6 => Some("ITEMID_TEEBURUKABAA6"),
            Self::ITEMID_TEEBURUKABAA7 => Some("ITEMID_TEEBURUKABAA7"),
            Self::ITEMID_TEEBURUKABAA8 => Some("ITEMID_TEEBURUKABAA8"),
            Self::ITEMID_TEEBURUKABAA9 => Some("ITEMID_TEEBURUKABAA9"),
            Self::ITEMID_TEEBURUKABAA10 => Some("ITEMID_TEEBURUKABAA10"),
            Self::ITEMID_TEEBURUKABAA11 => Some("ITEMID_TEEBURUKABAA11"),
            Self::ITEMID_TEEBURUKABAA12 => Some("ITEMID_TEEBURUKABAA12"),
            Self::ITEMID_TEEBURUKABAA13 => Some("ITEMID_TEEBURUKABAA13"),
            Self::ITEMID_TEEBURUKABAA14 => Some("ITEMID_TEEBURUKABAA14"),
            Self::ITEMID_TEEBURUKABAA15 => Some("ITEMID_TEEBURUKABAA15"),
            Self::ITEMID_TEEBURUKABAA16 => Some("ITEMID_TEEBURUKABAA16"),
            Self::ITEMID_TEEBURUKABAA17 => Some("ITEMID_TEEBURUKABAA17"),
            Self::ITEMID_TEEBURUKABAA18 => Some("ITEMID_TEEBURUKABAA18"),
            Self::ITEMID_TEEBURUKABAA19 => Some("ITEMID_TEEBURUKABAA19"),
            Self::ITEMID_TEEBURUKABAA20 => Some("ITEMID_TEEBURUKABAA20"),
            Self::ITEMID_SUITOU13 => Some("ITEMID_SUITOU13"),
            Self::ITEMID_SUITOU14 => Some("ITEMID_SUITOU14"),
            Self::ITEMID_KOPPU16 => Some("ITEMID_KOPPU16"),
            Self::ITEMID_KOPPU17 => Some("ITEMID_KOPPU17"),
            Self::ITEMID_RANCHIPIKKU10 => Some("ITEMID_RANCHIPIKKU10"),
            Self::ITEMID_RANCHIPIKKU11 => Some("ITEMID_RANCHIPIKKU11"),
            Self::ITEMID_RANCHIPIKKU12 => Some("ITEMID_RANCHIPIKKU12"),
            Self::ITEMID_RANCHIPIKKU13 => Some("ITEMID_RANCHIPIKKU13"),
            Self::ITEMID_RANCHIPIKKU14 => Some("ITEMID_RANCHIPIKKU14"),
            Self::ITEMID_RANCHIPIKKU15 => Some("ITEMID_RANCHIPIKKU15"),
            Self::ITEMID_RANCHIPIKKU16 => Some("ITEMID_RANCHIPIKKU16"),
            Self::ITEMID_RANCHIPIKKU17 => Some("ITEMID_RANCHIPIKKU17"),
            Self::ITEMID_RANCHIPIKKU18 => Some("ITEMID_RANCHIPIKKU18"),
            Self::ITEMID_RANCHIPIKKU19 => Some("ITEMID_RANCHIPIKKU19"),
            Self::ITEMID_SARA2 => Some("ITEMID_SARA2"),
            _ => None,
        }
    }
}
impl core::fmt::Debug for ItemID {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        if let Some(name) = self.variant_name() {
            f.write_str(name)
        } else {
            f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
        }
    }
}
impl<'a> flatbuffers::Follow<'a> for ItemID {
    type Inner = Self;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
        Self(b)
    }
}

impl flatbuffers::Push for ItemID {
    type Output = ItemID;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for ItemID {
    type Scalar = i32;
    #[inline]
    fn to_little_endian(self) -> i32 {
        self.0.to_le()
    }
    #[inline]
    #[allow(clippy::wrong_self_convention)]
    fn from_little_endian(v: i32) -> Self {
        let b = i32::from_le(v);
        Self(b)
    }
}

impl<'a> flatbuffers::Verifiable for ItemID {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        i32::run_verifier(v, pos)
    }
}

impl flatbuffers::SimpleToVerifyInSlice for ItemID {}
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MIN_LANG_TYPE: i32 = 0;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MAX_LANG_TYPE: i32 = 9;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_LANG_TYPE: [LangType; 10] = [
    LangType::ROM_LANG,
    LangType::JAPAN,
    LangType::ENGLISH,
    LangType::FRANCE,
    LangType::ITALY,
    LangType::GERMANY,
    LangType::SPAIN,
    LangType::KOREA,
    LangType::SIMPLIFIED_CHINESE,
    LangType::TRADITIONAL_CHINESE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct LangType(pub i32);
#[allow(non_upper_case_globals)]
impl LangType {
    pub const ROM_LANG: Self = Self(0);
    pub const JAPAN: Self = Self(1);
    pub const ENGLISH: Self = Self(2);
    pub const FRANCE: Self = Self(3);
    pub const ITALY: Self = Self(4);
    pub const GERMANY: Self = Self(5);
    pub const SPAIN: Self = Self(6);
    pub const KOREA: Self = Self(7);
    pub const SIMPLIFIED_CHINESE: Self = Self(8);
    pub const TRADITIONAL_CHINESE: Self = Self(9);

    pub const ENUM_MIN: i32 = 0;
    pub const ENUM_MAX: i32 = 9;
    pub const ENUM_VALUES: &'static [Self] = &[
        Self::ROM_LANG,
        Self::JAPAN,
        Self::ENGLISH,
        Self::FRANCE,
        Self::ITALY,
        Self::GERMANY,
        Self::SPAIN,
        Self::KOREA,
        Self::SIMPLIFIED_CHINESE,
        Self::TRADITIONAL_CHINESE,
    ];
    /// Returns the variant's name or "" if unknown.
    pub fn variant_name(self) -> Option<&'static str> {
        match self {
            Self::ROM_LANG => Some("ROM_LANG"),
            Self::JAPAN => Some("JAPAN"),
            Self::ENGLISH => Some("ENGLISH"),
            Self::FRANCE => Some("FRANCE"),
            Self::ITALY => Some("ITALY"),
            Self::GERMANY => Some("GERMANY"),
            Self::SPAIN => Some("SPAIN"),
            Self::KOREA => Some("KOREA"),
            Self::SIMPLIFIED_CHINESE => Some("SIMPLIFIED_CHINESE"),
            Self::TRADITIONAL_CHINESE => Some("TRADITIONAL_CHINESE"),
            _ => None,
        }
    }
}
impl core::fmt::Debug for LangType {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        if let Some(name) = self.variant_name() {
            f.write_str(name)
        } else {
            f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
        }
    }
}
impl<'a> flatbuffers::Follow<'a> for LangType {
    type Inner = Self;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
        Self(b)
    }
}

impl flatbuffers::Push for LangType {
    type Output = LangType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for LangType {
    type Scalar = i32;
    #[inline]
    fn to_little_endian(self) -> i32 {
        self.0.to_le()
    }
    #[inline]
    #[allow(clippy::wrong_self_convention)]
    fn from_little_endian(v: i32) -> Self {
        let b = i32::from_le(v);
        Self(b)
    }
}

impl<'a> flatbuffers::Verifiable for LangType {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        i32::run_verifier(v, pos)
    }
}

impl flatbuffers::SimpleToVerifyInSlice for LangType {}
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MIN_POKE_MEMO_TYPE: i8 = 0;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MAX_POKE_MEMO_TYPE: i8 = 10;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_POKE_MEMO_TYPE: [PokeMemoType; 11] = [
    PokeMemoType::NONE,
    PokeMemoType::Capture,
    PokeMemoType::EventGet,
    PokeMemoType::EventCapture,
    PokeMemoType::InnerTrade,
    PokeMemoType::NetTrade,
    PokeMemoType::EggHatch,
    PokeMemoType::Bank,
    PokeMemoType::MysteryGift,
    PokeMemoType::EggTakenFirst,
    PokeMemoType::EggTakenTrade,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct PokeMemoType(pub i8);
#[allow(non_upper_case_globals)]
impl PokeMemoType {
    pub const NONE: Self = Self(0);
    pub const Capture: Self = Self(1);
    pub const EventGet: Self = Self(2);
    pub const EventCapture: Self = Self(3);
    pub const InnerTrade: Self = Self(4);
    pub const NetTrade: Self = Self(5);
    pub const EggHatch: Self = Self(6);
    pub const Bank: Self = Self(7);
    pub const MysteryGift: Self = Self(8);
    pub const EggTakenFirst: Self = Self(9);
    pub const EggTakenTrade: Self = Self(10);

    pub const ENUM_MIN: i8 = 0;
    pub const ENUM_MAX: i8 = 10;
    pub const ENUM_VALUES: &'static [Self] = &[
        Self::NONE,
        Self::Capture,
        Self::EventGet,
        Self::EventCapture,
        Self::InnerTrade,
        Self::NetTrade,
        Self::EggHatch,
        Self::Bank,
        Self::MysteryGift,
        Self::EggTakenFirst,
        Self::EggTakenTrade,
    ];
    /// Returns the variant's name or "" if unknown.
    pub fn variant_name(self) -> Option<&'static str> {
        match self {
            Self::NONE => Some("NONE"),
            Self::Capture => Some("Capture"),
            Self::EventGet => Some("EventGet"),
            Self::EventCapture => Some("EventCapture"),
            Self::InnerTrade => Some("InnerTrade"),
            Self::NetTrade => Some("NetTrade"),
            Self::EggHatch => Some("EggHatch"),
            Self::Bank => Some("Bank"),
            Self::MysteryGift => Some("MysteryGift"),
            Self::EggTakenFirst => Some("EggTakenFirst"),
            Self::EggTakenTrade => Some("EggTakenTrade"),
            _ => None,
        }
    }
}
impl core::fmt::Debug for PokeMemoType {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        if let Some(name) = self.variant_name() {
            f.write_str(name)
        } else {
            f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
        }
    }
}
impl<'a> flatbuffers::Follow<'a> for PokeMemoType {
    type Inner = Self;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
        Self(b)
    }
}

impl flatbuffers::Push for PokeMemoType {
    type Output = PokeMemoType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for PokeMemoType {
    type Scalar = i8;
    #[inline]
    fn to_little_endian(self) -> i8 {
        self.0.to_le()
    }
    #[inline]
    #[allow(clippy::wrong_self_convention)]
    fn from_little_endian(v: i8) -> Self {
        let b = i8::from_le(v);
        Self(b)
    }
}

impl<'a> flatbuffers::Verifiable for PokeMemoType {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        i8::run_verifier(v, pos)
    }
}

impl flatbuffers::SimpleToVerifyInSlice for PokeMemoType {}
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MIN_RAID_BOSS_EXTRA_ACT_TYPE: i16 = 0;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MAX_RAID_BOSS_EXTRA_ACT_TYPE: i16 = 4;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RAID_BOSS_EXTRA_ACT_TYPE: [RaidBossExtraActType; 5] = [
    RaidBossExtraActType::NONE,
    RaidBossExtraActType::BOSS_STATUS_RESET,
    RaidBossExtraActType::PLAYER_STATUS_RESET,
    RaidBossExtraActType::WAZA,
    RaidBossExtraActType::GEM_COUNT,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct RaidBossExtraActType(pub i16);
#[allow(non_upper_case_globals)]
impl RaidBossExtraActType {
    pub const NONE: Self = Self(0);
    pub const BOSS_STATUS_RESET: Self = Self(1);
    pub const PLAYER_STATUS_RESET: Self = Self(2);
    pub const WAZA: Self = Self(3);
    pub const GEM_COUNT: Self = Self(4);

    pub const ENUM_MIN: i16 = 0;
    pub const ENUM_MAX: i16 = 4;
    pub const ENUM_VALUES: &'static [Self] = &[
        Self::NONE,
        Self::BOSS_STATUS_RESET,
        Self::PLAYER_STATUS_RESET,
        Self::WAZA,
        Self::GEM_COUNT,
    ];
    /// Returns the variant's name or "" if unknown.
    pub fn variant_name(self) -> Option<&'static str> {
        match self {
            Self::NONE => Some("NONE"),
            Self::BOSS_STATUS_RESET => Some("BOSS_STATUS_RESET"),
            Self::PLAYER_STATUS_RESET => Some("PLAYER_STATUS_RESET"),
            Self::WAZA => Some("WAZA"),
            Self::GEM_COUNT => Some("GEM_COUNT"),
            _ => None,
        }
    }
}
impl core::fmt::Debug for RaidBossExtraActType {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        if let Some(name) = self.variant_name() {
            f.write_str(name)
        } else {
            f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
        }
    }
}
impl<'a> flatbuffers::Follow<'a> for RaidBossExtraActType {
    type Inner = Self;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        let b = flatbuffers::read_scalar_at::<i16>(buf, loc);
        Self(b)
    }
}

impl flatbuffers::Push for RaidBossExtraActType {
    type Output = RaidBossExtraActType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i16>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for RaidBossExtraActType {
    type Scalar = i16;
    #[inline]
    fn to_little_endian(self) -> i16 {
        self.0.to_le()
    }
    #[inline]
    #[allow(clippy::wrong_self_convention)]
    fn from_little_endian(v: i16) -> Self {
        let b = i16::from_le(v);
        Self(b)
    }
}

impl<'a> flatbuffers::Verifiable for RaidBossExtraActType {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        i16::run_verifier(v, pos)
    }
}

impl flatbuffers::SimpleToVerifyInSlice for RaidBossExtraActType {}
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MIN_RAID_BOSS_EXTRA_TIMING_TYPE: i16 = 0;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MAX_RAID_BOSS_EXTRA_TIMING_TYPE: i16 = 2;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RAID_BOSS_EXTRA_TIMING_TYPE: [RaidBossExtraTimingType; 3] = [
    RaidBossExtraTimingType::NONE,
    RaidBossExtraTimingType::TIME,
    RaidBossExtraTimingType::HP,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct RaidBossExtraTimingType(pub i16);
#[allow(non_upper_case_globals)]
impl RaidBossExtraTimingType {
    pub const NONE: Self = Self(0);
    pub const TIME: Self = Self(1);
    pub const HP: Self = Self(2);

    pub const ENUM_MIN: i16 = 0;
    pub const ENUM_MAX: i16 = 2;
    pub const ENUM_VALUES: &'static [Self] = &[Self::NONE, Self::TIME, Self::HP];
    /// Returns the variant's name or "" if unknown.
    pub fn variant_name(self) -> Option<&'static str> {
        match self {
            Self::NONE => Some("NONE"),
            Self::TIME => Some("TIME"),
            Self::HP => Some("HP"),
            _ => None,
        }
    }
}
impl core::fmt::Debug for RaidBossExtraTimingType {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        if let Some(name) = self.variant_name() {
            f.write_str(name)
        } else {
            f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
        }
    }
}
impl<'a> flatbuffers::Follow<'a> for RaidBossExtraTimingType {
    type Inner = Self;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        let b = flatbuffers::read_scalar_at::<i16>(buf, loc);
        Self(b)
    }
}

impl flatbuffers::Push for RaidBossExtraTimingType {
    type Output = RaidBossExtraTimingType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i16>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for RaidBossExtraTimingType {
    type Scalar = i16;
    #[inline]
    fn to_little_endian(self) -> i16 {
        self.0.to_le()
    }
    #[inline]
    #[allow(clippy::wrong_self_convention)]
    fn from_little_endian(v: i16) -> Self {
        let b = i16::from_le(v);
        Self(b)
    }
}

impl<'a> flatbuffers::Verifiable for RaidBossExtraTimingType {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        i16::run_verifier(v, pos)
    }
}

impl flatbuffers::SimpleToVerifyInSlice for RaidBossExtraTimingType {}
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MIN_RAID_ROM_TYPE: i16 = 0;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MAX_RAID_ROM_TYPE: i16 = 2;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RAID_ROM_TYPE: [RaidRomType; 3] =
    [RaidRomType::BOTH, RaidRomType::TYPE_A, RaidRomType::TYPE_B];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct RaidRomType(pub i16);
#[allow(non_upper_case_globals)]
impl RaidRomType {
    pub const BOTH: Self = Self(0);
    pub const TYPE_A: Self = Self(1);
    pub const TYPE_B: Self = Self(2);

    pub const ENUM_MIN: i16 = 0;
    pub const ENUM_MAX: i16 = 2;
    pub const ENUM_VALUES: &'static [Self] = &[Self::BOTH, Self::TYPE_A, Self::TYPE_B];
    /// Returns the variant's name or "" if unknown.
    pub fn variant_name(self) -> Option<&'static str> {
        match self {
            Self::BOTH => Some("BOTH"),
            Self::TYPE_A => Some("TYPE_A"),
            Self::TYPE_B => Some("TYPE_B"),
            _ => None,
        }
    }
}
impl core::fmt::Debug for RaidRomType {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        if let Some(name) = self.variant_name() {
            f.write_str(name)
        } else {
            f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
        }
    }
}
impl<'a> flatbuffers::Follow<'a> for RaidRomType {
    type Inner = Self;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        let b = flatbuffers::read_scalar_at::<i16>(buf, loc);
        Self(b)
    }
}

impl flatbuffers::Push for RaidRomType {
    type Output = RaidRomType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i16>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for RaidRomType {
    type Scalar = i16;
    #[inline]
    fn to_little_endian(self) -> i16 {
        self.0.to_le()
    }
    #[inline]
    #[allow(clippy::wrong_self_convention)]
    fn from_little_endian(v: i16) -> Self {
        let b = i16::from_le(v);
        Self(b)
    }
}

impl<'a> flatbuffers::Verifiable for RaidRomType {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        i16::run_verifier(v, pos)
    }
}

impl flatbuffers::SimpleToVerifyInSlice for RaidRomType {}
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MIN_RARE_TYPE: i32 = 0;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MAX_RARE_TYPE: i32 = 2;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RARE_TYPE: [RareType; 3] =
    [RareType::DEFAULT, RareType::NO_RARE, RareType::RARE];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct RareType(pub i32);
#[allow(non_upper_case_globals)]
impl RareType {
    pub const DEFAULT: Self = Self(0);
    pub const NO_RARE: Self = Self(1);
    pub const RARE: Self = Self(2);

    pub const ENUM_MIN: i32 = 0;
    pub const ENUM_MAX: i32 = 2;
    pub const ENUM_VALUES: &'static [Self] = &[Self::DEFAULT, Self::NO_RARE, Self::RARE];
    /// Returns the variant's name or "" if unknown.
    pub fn variant_name(self) -> Option<&'static str> {
        match self {
            Self::DEFAULT => Some("DEFAULT"),
            Self::NO_RARE => Some("NO_RARE"),
            Self::RARE => Some("RARE"),
            _ => None,
        }
    }
}
impl core::fmt::Debug for RareType {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        if let Some(name) = self.variant_name() {
            f.write_str(name)
        } else {
            f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
        }
    }
}
impl<'a> flatbuffers::Follow<'a> for RareType {
    type Inner = Self;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
        Self(b)
    }
}

impl flatbuffers::Push for RareType {
    type Output = RareType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for RareType {
    type Scalar = i32;
    #[inline]
    fn to_little_endian(self) -> i32 {
        self.0.to_le()
    }
    #[inline]
    #[allow(clippy::wrong_self_convention)]
    fn from_little_endian(v: i32) -> Self {
        let b = i32::from_le(v);
        Self(b)
    }
}

impl<'a> flatbuffers::Verifiable for RareType {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        i32::run_verifier(v, pos)
    }
}

impl flatbuffers::SimpleToVerifyInSlice for RareType {}
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MIN_RIBBON_TYPE: i32 = 0;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MAX_RIBBON_TYPE: i32 = 110;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RIBBON_TYPE: [RibbonType; 111] = [
    RibbonType::NONE,
    RibbonType::CAROS_CHAMP,
    RibbonType::HOUEN_CHAMP,
    RibbonType::SINOU_CHAMP,
    RibbonType::KAWAIGARI,
    RibbonType::TRAINING,
    RibbonType::SUPER_BATTLE,
    RibbonType::MASTER_BATTLE,
    RibbonType::GANBA,
    RibbonType::SYAKKIRI,
    RibbonType::DOKKIRI,
    RibbonType::SYONBORI,
    RibbonType::UKKARI,
    RibbonType::SUKKIRI,
    RibbonType::GUSSURI,
    RibbonType::NIKKORI,
    RibbonType::GORGEOUS,
    RibbonType::ROYAL,
    RibbonType::GORGEOUS_ROYAL,
    RibbonType::BROMIDE,
    RibbonType::ASHIATO,
    RibbonType::RECORD,
    RibbonType::LEGEND,
    RibbonType::COUNTRY,
    RibbonType::NATIONAL,
    RibbonType::EARTH,
    RibbonType::WORLD,
    RibbonType::CLASSIC,
    RibbonType::PREMIERE,
    RibbonType::EVENT,
    RibbonType::BIRTHDAY,
    RibbonType::SPECIAL,
    RibbonType::MEMORIAL,
    RibbonType::WISH,
    RibbonType::BATTLE_CHAMP,
    RibbonType::AREA_CHAMP,
    RibbonType::NATIONAL_CHAMP,
    RibbonType::WORLD_CHAMP,
    RibbonType::LUMPING_CONTEST,
    RibbonType::LUMPING_TOWER,
    RibbonType::SANGO_CHAMP,
    RibbonType::CONTEST_STAR,
    RibbonType::STYLE_MASTER,
    RibbonType::BEAUTIFUL_MASTER,
    RibbonType::CUTE_MASTER,
    RibbonType::CLEVER_MASTER,
    RibbonType::STRONG_MASTER,
    RibbonType::NIJI_CROWN,
    RibbonType::NIJI_ROYAL,
    RibbonType::NIJI_BTLTOWER,
    RibbonType::NIJI_MASTER,
    RibbonType::ORION_GARAL,
    RibbonType::ORION_MASTER_TOWER,
    RibbonType::ORION_MASTER_RANK,
    RibbonType::ORION_NOON,
    RibbonType::ORION_MIDNIGHT,
    RibbonType::ORION_TWILIGHT,
    RibbonType::ORION_DAYBREAK,
    RibbonType::ORION_CLOUDY_WEATHER,
    RibbonType::ORION_RAIN,
    RibbonType::ORION_THUNDER,
    RibbonType::ORION_SNOWFALL,
    RibbonType::ORION_HEAVY_SONWFALL,
    RibbonType::ORION_DRYING,
    RibbonType::ORION_SAND_DUST,
    RibbonType::ORION_DENSE_FOG,
    RibbonType::ORION_FATE,
    RibbonType::ORION_FISH,
    RibbonType::ORION_CURRY,
    RibbonType::ORION_SOMETIMES,
    RibbonType::ORION_NOTLOOKING,
    RibbonType::ORION_NAUGHTINESS,
    RibbonType::ORION_CAREFREE,
    RibbonType::ORION_TENSION,
    RibbonType::ORION_EXPECTATION,
    RibbonType::ORION_CHARISMA,
    RibbonType::ORION_CALM,
    RibbonType::ORION_PASSION,
    RibbonType::ORION_CARELESSNESS,
    RibbonType::ORION_EUPHORIA,
    RibbonType::ORION_FURY,
    RibbonType::ORION_SMILE,
    RibbonType::ORION_SAD,
    RibbonType::ORION_GOOD_CONDITION,
    RibbonType::ORION_EMERGENCY,
    RibbonType::ORION_REASON,
    RibbonType::ORION_INSTINCT,
    RibbonType::ORION_CUNNING,
    RibbonType::ORION_STRENGTH,
    RibbonType::ORION_WEAK,
    RibbonType::ORION_UPSET,
    RibbonType::ORION_ELEVATION,
    RibbonType::ORION_FATIGUE,
    RibbonType::ORION_CONFIDENCE,
    RibbonType::ORION_DISTRUST,
    RibbonType::ORION_ARTLESSNESS,
    RibbonType::ORION_IMPURITY,
    RibbonType::ORION_VIM,
    RibbonType::ORION_SLUMP,
    RibbonType::PIONEER,
    RibbonType::TWINKLE_STAR,
    RibbonType::TITAN_PALDEA_CHAMP,
    RibbonType::TITAN_HUGE,
    RibbonType::TITAN_TINY,
    RibbonType::TITAN_PICKING_UP_THINGS,
    RibbonType::TITAN_PARTNER,
    RibbonType::TITAN_GOURM,
    RibbonType::TITAN_ONE_CHANCE_IN_A_MILLION,
    RibbonType::TITAN_OYABUN,
    RibbonType::TITAN_STRONGEST,
    RibbonType::TITAN_NUSHI,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct RibbonType(pub i32);
#[allow(non_upper_case_globals)]
impl RibbonType {
    pub const NONE: Self = Self(0);
    pub const CAROS_CHAMP: Self = Self(1);
    pub const HOUEN_CHAMP: Self = Self(2);
    pub const SINOU_CHAMP: Self = Self(3);
    pub const KAWAIGARI: Self = Self(4);
    pub const TRAINING: Self = Self(5);
    pub const SUPER_BATTLE: Self = Self(6);
    pub const MASTER_BATTLE: Self = Self(7);
    pub const GANBA: Self = Self(8);
    pub const SYAKKIRI: Self = Self(9);
    pub const DOKKIRI: Self = Self(10);
    pub const SYONBORI: Self = Self(11);
    pub const UKKARI: Self = Self(12);
    pub const SUKKIRI: Self = Self(13);
    pub const GUSSURI: Self = Self(14);
    pub const NIKKORI: Self = Self(15);
    pub const GORGEOUS: Self = Self(16);
    pub const ROYAL: Self = Self(17);
    pub const GORGEOUS_ROYAL: Self = Self(18);
    pub const BROMIDE: Self = Self(19);
    pub const ASHIATO: Self = Self(20);
    pub const RECORD: Self = Self(21);
    pub const LEGEND: Self = Self(22);
    pub const COUNTRY: Self = Self(23);
    pub const NATIONAL: Self = Self(24);
    pub const EARTH: Self = Self(25);
    pub const WORLD: Self = Self(26);
    pub const CLASSIC: Self = Self(27);
    pub const PREMIERE: Self = Self(28);
    pub const EVENT: Self = Self(29);
    pub const BIRTHDAY: Self = Self(30);
    pub const SPECIAL: Self = Self(31);
    pub const MEMORIAL: Self = Self(32);
    pub const WISH: Self = Self(33);
    pub const BATTLE_CHAMP: Self = Self(34);
    pub const AREA_CHAMP: Self = Self(35);
    pub const NATIONAL_CHAMP: Self = Self(36);
    pub const WORLD_CHAMP: Self = Self(37);
    pub const LUMPING_CONTEST: Self = Self(38);
    pub const LUMPING_TOWER: Self = Self(39);
    pub const SANGO_CHAMP: Self = Self(40);
    pub const CONTEST_STAR: Self = Self(41);
    pub const STYLE_MASTER: Self = Self(42);
    pub const BEAUTIFUL_MASTER: Self = Self(43);
    pub const CUTE_MASTER: Self = Self(44);
    pub const CLEVER_MASTER: Self = Self(45);
    pub const STRONG_MASTER: Self = Self(46);
    pub const NIJI_CROWN: Self = Self(47);
    pub const NIJI_ROYAL: Self = Self(48);
    pub const NIJI_BTLTOWER: Self = Self(49);
    pub const NIJI_MASTER: Self = Self(50);
    pub const ORION_GARAL: Self = Self(51);
    pub const ORION_MASTER_TOWER: Self = Self(52);
    pub const ORION_MASTER_RANK: Self = Self(53);
    pub const ORION_NOON: Self = Self(54);
    pub const ORION_MIDNIGHT: Self = Self(55);
    pub const ORION_TWILIGHT: Self = Self(56);
    pub const ORION_DAYBREAK: Self = Self(57);
    pub const ORION_CLOUDY_WEATHER: Self = Self(58);
    pub const ORION_RAIN: Self = Self(59);
    pub const ORION_THUNDER: Self = Self(60);
    pub const ORION_SNOWFALL: Self = Self(61);
    pub const ORION_HEAVY_SONWFALL: Self = Self(62);
    pub const ORION_DRYING: Self = Self(63);
    pub const ORION_SAND_DUST: Self = Self(64);
    pub const ORION_DENSE_FOG: Self = Self(65);
    pub const ORION_FATE: Self = Self(66);
    pub const ORION_FISH: Self = Self(67);
    pub const ORION_CURRY: Self = Self(68);
    pub const ORION_SOMETIMES: Self = Self(69);
    pub const ORION_NOTLOOKING: Self = Self(70);
    pub const ORION_NAUGHTINESS: Self = Self(71);
    pub const ORION_CAREFREE: Self = Self(72);
    pub const ORION_TENSION: Self = Self(73);
    pub const ORION_EXPECTATION: Self = Self(74);
    pub const ORION_CHARISMA: Self = Self(75);
    pub const ORION_CALM: Self = Self(76);
    pub const ORION_PASSION: Self = Self(77);
    pub const ORION_CARELESSNESS: Self = Self(78);
    pub const ORION_EUPHORIA: Self = Self(79);
    pub const ORION_FURY: Self = Self(80);
    pub const ORION_SMILE: Self = Self(81);
    pub const ORION_SAD: Self = Self(82);
    pub const ORION_GOOD_CONDITION: Self = Self(83);
    pub const ORION_EMERGENCY: Self = Self(84);
    pub const ORION_REASON: Self = Self(85);
    pub const ORION_INSTINCT: Self = Self(86);
    pub const ORION_CUNNING: Self = Self(87);
    pub const ORION_STRENGTH: Self = Self(88);
    pub const ORION_WEAK: Self = Self(89);
    pub const ORION_UPSET: Self = Self(90);
    pub const ORION_ELEVATION: Self = Self(91);
    pub const ORION_FATIGUE: Self = Self(92);
    pub const ORION_CONFIDENCE: Self = Self(93);
    pub const ORION_DISTRUST: Self = Self(94);
    pub const ORION_ARTLESSNESS: Self = Self(95);
    pub const ORION_IMPURITY: Self = Self(96);
    pub const ORION_VIM: Self = Self(97);
    pub const ORION_SLUMP: Self = Self(98);
    pub const PIONEER: Self = Self(99);
    pub const TWINKLE_STAR: Self = Self(100);
    pub const TITAN_PALDEA_CHAMP: Self = Self(101);
    pub const TITAN_HUGE: Self = Self(102);
    pub const TITAN_TINY: Self = Self(103);
    pub const TITAN_PICKING_UP_THINGS: Self = Self(104);
    pub const TITAN_PARTNER: Self = Self(105);
    pub const TITAN_GOURM: Self = Self(106);
    pub const TITAN_ONE_CHANCE_IN_A_MILLION: Self = Self(107);
    pub const TITAN_OYABUN: Self = Self(108);
    pub const TITAN_STRONGEST: Self = Self(109);
    pub const TITAN_NUSHI: Self = Self(110);

    pub const ENUM_MIN: i32 = 0;
    pub const ENUM_MAX: i32 = 110;
    pub const ENUM_VALUES: &'static [Self] = &[
        Self::NONE,
        Self::CAROS_CHAMP,
        Self::HOUEN_CHAMP,
        Self::SINOU_CHAMP,
        Self::KAWAIGARI,
        Self::TRAINING,
        Self::SUPER_BATTLE,
        Self::MASTER_BATTLE,
        Self::GANBA,
        Self::SYAKKIRI,
        Self::DOKKIRI,
        Self::SYONBORI,
        Self::UKKARI,
        Self::SUKKIRI,
        Self::GUSSURI,
        Self::NIKKORI,
        Self::GORGEOUS,
        Self::ROYAL,
        Self::GORGEOUS_ROYAL,
        Self::BROMIDE,
        Self::ASHIATO,
        Self::RECORD,
        Self::LEGEND,
        Self::COUNTRY,
        Self::NATIONAL,
        Self::EARTH,
        Self::WORLD,
        Self::CLASSIC,
        Self::PREMIERE,
        Self::EVENT,
        Self::BIRTHDAY,
        Self::SPECIAL,
        Self::MEMORIAL,
        Self::WISH,
        Self::BATTLE_CHAMP,
        Self::AREA_CHAMP,
        Self::NATIONAL_CHAMP,
        Self::WORLD_CHAMP,
        Self::LUMPING_CONTEST,
        Self::LUMPING_TOWER,
        Self::SANGO_CHAMP,
        Self::CONTEST_STAR,
        Self::STYLE_MASTER,
        Self::BEAUTIFUL_MASTER,
        Self::CUTE_MASTER,
        Self::CLEVER_MASTER,
        Self::STRONG_MASTER,
        Self::NIJI_CROWN,
        Self::NIJI_ROYAL,
        Self::NIJI_BTLTOWER,
        Self::NIJI_MASTER,
        Self::ORION_GARAL,
        Self::ORION_MASTER_TOWER,
        Self::ORION_MASTER_RANK,
        Self::ORION_NOON,
        Self::ORION_MIDNIGHT,
        Self::ORION_TWILIGHT,
        Self::ORION_DAYBREAK,
        Self::ORION_CLOUDY_WEATHER,
        Self::ORION_RAIN,
        Self::ORION_THUNDER,
        Self::ORION_SNOWFALL,
        Self::ORION_HEAVY_SONWFALL,
        Self::ORION_DRYING,
        Self::ORION_SAND_DUST,
        Self::ORION_DENSE_FOG,
        Self::ORION_FATE,
        Self::ORION_FISH,
        Self::ORION_CURRY,
        Self::ORION_SOMETIMES,
        Self::ORION_NOTLOOKING,
        Self::ORION_NAUGHTINESS,
        Self::ORION_CAREFREE,
        Self::ORION_TENSION,
        Self::ORION_EXPECTATION,
        Self::ORION_CHARISMA,
        Self::ORION_CALM,
        Self::ORION_PASSION,
        Self::ORION_CARELESSNESS,
        Self::ORION_EUPHORIA,
        Self::ORION_FURY,
        Self::ORION_SMILE,
        Self::ORION_SAD,
        Self::ORION_GOOD_CONDITION,
        Self::ORION_EMERGENCY,
        Self::ORION_REASON,
        Self::ORION_INSTINCT,
        Self::ORION_CUNNING,
        Self::ORION_STRENGTH,
        Self::ORION_WEAK,
        Self::ORION_UPSET,
        Self::ORION_ELEVATION,
        Self::ORION_FATIGUE,
        Self::ORION_CONFIDENCE,
        Self::ORION_DISTRUST,
        Self::ORION_ARTLESSNESS,
        Self::ORION_IMPURITY,
        Self::ORION_VIM,
        Self::ORION_SLUMP,
        Self::PIONEER,
        Self::TWINKLE_STAR,
        Self::TITAN_PALDEA_CHAMP,
        Self::TITAN_HUGE,
        Self::TITAN_TINY,
        Self::TITAN_PICKING_UP_THINGS,
        Self::TITAN_PARTNER,
        Self::TITAN_GOURM,
        Self::TITAN_ONE_CHANCE_IN_A_MILLION,
        Self::TITAN_OYABUN,
        Self::TITAN_STRONGEST,
        Self::TITAN_NUSHI,
    ];
    /// Returns the variant's name or "" if unknown.
    pub fn variant_name(self) -> Option<&'static str> {
        match self {
            Self::NONE => Some("NONE"),
            Self::CAROS_CHAMP => Some("CAROS_CHAMP"),
            Self::HOUEN_CHAMP => Some("HOUEN_CHAMP"),
            Self::SINOU_CHAMP => Some("SINOU_CHAMP"),
            Self::KAWAIGARI => Some("KAWAIGARI"),
            Self::TRAINING => Some("TRAINING"),
            Self::SUPER_BATTLE => Some("SUPER_BATTLE"),
            Self::MASTER_BATTLE => Some("MASTER_BATTLE"),
            Self::GANBA => Some("GANBA"),
            Self::SYAKKIRI => Some("SYAKKIRI"),
            Self::DOKKIRI => Some("DOKKIRI"),
            Self::SYONBORI => Some("SYONBORI"),
            Self::UKKARI => Some("UKKARI"),
            Self::SUKKIRI => Some("SUKKIRI"),
            Self::GUSSURI => Some("GUSSURI"),
            Self::NIKKORI => Some("NIKKORI"),
            Self::GORGEOUS => Some("GORGEOUS"),
            Self::ROYAL => Some("ROYAL"),
            Self::GORGEOUS_ROYAL => Some("GORGEOUS_ROYAL"),
            Self::BROMIDE => Some("BROMIDE"),
            Self::ASHIATO => Some("ASHIATO"),
            Self::RECORD => Some("RECORD"),
            Self::LEGEND => Some("LEGEND"),
            Self::COUNTRY => Some("COUNTRY"),
            Self::NATIONAL => Some("NATIONAL"),
            Self::EARTH => Some("EARTH"),
            Self::WORLD => Some("WORLD"),
            Self::CLASSIC => Some("CLASSIC"),
            Self::PREMIERE => Some("PREMIERE"),
            Self::EVENT => Some("EVENT"),
            Self::BIRTHDAY => Some("BIRTHDAY"),
            Self::SPECIAL => Some("SPECIAL"),
            Self::MEMORIAL => Some("MEMORIAL"),
            Self::WISH => Some("WISH"),
            Self::BATTLE_CHAMP => Some("BATTLE_CHAMP"),
            Self::AREA_CHAMP => Some("AREA_CHAMP"),
            Self::NATIONAL_CHAMP => Some("NATIONAL_CHAMP"),
            Self::WORLD_CHAMP => Some("WORLD_CHAMP"),
            Self::LUMPING_CONTEST => Some("LUMPING_CONTEST"),
            Self::LUMPING_TOWER => Some("LUMPING_TOWER"),
            Self::SANGO_CHAMP => Some("SANGO_CHAMP"),
            Self::CONTEST_STAR => Some("CONTEST_STAR"),
            Self::STYLE_MASTER => Some("STYLE_MASTER"),
            Self::BEAUTIFUL_MASTER => Some("BEAUTIFUL_MASTER"),
            Self::CUTE_MASTER => Some("CUTE_MASTER"),
            Self::CLEVER_MASTER => Some("CLEVER_MASTER"),
            Self::STRONG_MASTER => Some("STRONG_MASTER"),
            Self::NIJI_CROWN => Some("NIJI_CROWN"),
            Self::NIJI_ROYAL => Some("NIJI_ROYAL"),
            Self::NIJI_BTLTOWER => Some("NIJI_BTLTOWER"),
            Self::NIJI_MASTER => Some("NIJI_MASTER"),
            Self::ORION_GARAL => Some("ORION_GARAL"),
            Self::ORION_MASTER_TOWER => Some("ORION_MASTER_TOWER"),
            Self::ORION_MASTER_RANK => Some("ORION_MASTER_RANK"),
            Self::ORION_NOON => Some("ORION_NOON"),
            Self::ORION_MIDNIGHT => Some("ORION_MIDNIGHT"),
            Self::ORION_TWILIGHT => Some("ORION_TWILIGHT"),
            Self::ORION_DAYBREAK => Some("ORION_DAYBREAK"),
            Self::ORION_CLOUDY_WEATHER => Some("ORION_CLOUDY_WEATHER"),
            Self::ORION_RAIN => Some("ORION_RAIN"),
            Self::ORION_THUNDER => Some("ORION_THUNDER"),
            Self::ORION_SNOWFALL => Some("ORION_SNOWFALL"),
            Self::ORION_HEAVY_SONWFALL => Some("ORION_HEAVY_SONWFALL"),
            Self::ORION_DRYING => Some("ORION_DRYING"),
            Self::ORION_SAND_DUST => Some("ORION_SAND_DUST"),
            Self::ORION_DENSE_FOG => Some("ORION_DENSE_FOG"),
            Self::ORION_FATE => Some("ORION_FATE"),
            Self::ORION_FISH => Some("ORION_FISH"),
            Self::ORION_CURRY => Some("ORION_CURRY"),
            Self::ORION_SOMETIMES => Some("ORION_SOMETIMES"),
            Self::ORION_NOTLOOKING => Some("ORION_NOTLOOKING"),
            Self::ORION_NAUGHTINESS => Some("ORION_NAUGHTINESS"),
            Self::ORION_CAREFREE => Some("ORION_CAREFREE"),
            Self::ORION_TENSION => Some("ORION_TENSION"),
            Self::ORION_EXPECTATION => Some("ORION_EXPECTATION"),
            Self::ORION_CHARISMA => Some("ORION_CHARISMA"),
            Self::ORION_CALM => Some("ORION_CALM"),
            Self::ORION_PASSION => Some("ORION_PASSION"),
            Self::ORION_CARELESSNESS => Some("ORION_CARELESSNESS"),
            Self::ORION_EUPHORIA => Some("ORION_EUPHORIA"),
            Self::ORION_FURY => Some("ORION_FURY"),
            Self::ORION_SMILE => Some("ORION_SMILE"),
            Self::ORION_SAD => Some("ORION_SAD"),
            Self::ORION_GOOD_CONDITION => Some("ORION_GOOD_CONDITION"),
            Self::ORION_EMERGENCY => Some("ORION_EMERGENCY"),
            Self::ORION_REASON => Some("ORION_REASON"),
            Self::ORION_INSTINCT => Some("ORION_INSTINCT"),
            Self::ORION_CUNNING => Some("ORION_CUNNING"),
            Self::ORION_STRENGTH => Some("ORION_STRENGTH"),
            Self::ORION_WEAK => Some("ORION_WEAK"),
            Self::ORION_UPSET => Some("ORION_UPSET"),
            Self::ORION_ELEVATION => Some("ORION_ELEVATION"),
            Self::ORION_FATIGUE => Some("ORION_FATIGUE"),
            Self::ORION_CONFIDENCE => Some("ORION_CONFIDENCE"),
            Self::ORION_DISTRUST => Some("ORION_DISTRUST"),
            Self::ORION_ARTLESSNESS => Some("ORION_ARTLESSNESS"),
            Self::ORION_IMPURITY => Some("ORION_IMPURITY"),
            Self::ORION_VIM => Some("ORION_VIM"),
            Self::ORION_SLUMP => Some("ORION_SLUMP"),
            Self::PIONEER => Some("PIONEER"),
            Self::TWINKLE_STAR => Some("TWINKLE_STAR"),
            Self::TITAN_PALDEA_CHAMP => Some("TITAN_PALDEA_CHAMP"),
            Self::TITAN_HUGE => Some("TITAN_HUGE"),
            Self::TITAN_TINY => Some("TITAN_TINY"),
            Self::TITAN_PICKING_UP_THINGS => Some("TITAN_PICKING_UP_THINGS"),
            Self::TITAN_PARTNER => Some("TITAN_PARTNER"),
            Self::TITAN_GOURM => Some("TITAN_GOURM"),
            Self::TITAN_ONE_CHANCE_IN_A_MILLION => Some("TITAN_ONE_CHANCE_IN_A_MILLION"),
            Self::TITAN_OYABUN => Some("TITAN_OYABUN"),
            Self::TITAN_STRONGEST => Some("TITAN_STRONGEST"),
            Self::TITAN_NUSHI => Some("TITAN_NUSHI"),
            _ => None,
        }
    }
}
impl core::fmt::Debug for RibbonType {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        if let Some(name) = self.variant_name() {
            f.write_str(name)
        } else {
            f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
        }
    }
}
impl<'a> flatbuffers::Follow<'a> for RibbonType {
    type Inner = Self;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
        Self(b)
    }
}

impl flatbuffers::Push for RibbonType {
    type Output = RibbonType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for RibbonType {
    type Scalar = i32;
    #[inline]
    fn to_little_endian(self) -> i32 {
        self.0.to_le()
    }
    #[inline]
    #[allow(clippy::wrong_self_convention)]
    fn from_little_endian(v: i32) -> Self {
        let b = i32::from_le(v);
        Self(b)
    }
}

impl<'a> flatbuffers::Verifiable for RibbonType {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        i32::run_verifier(v, pos)
    }
}

impl flatbuffers::SimpleToVerifyInSlice for RibbonType {}
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MIN_SEIKAKU_TYPE: i32 = 0;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MAX_SEIKAKU_TYPE: i32 = 25;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SEIKAKU_TYPE: [SeikakuType; 26] = [
    SeikakuType::DEFAULT,
    SeikakuType::GANBARIYA,
    SeikakuType::SAMISIGARIYA,
    SeikakuType::YUUKAN,
    SeikakuType::IJIPPARI,
    SeikakuType::YANTYA,
    SeikakuType::ZUBUTOI,
    SeikakuType::SUNAO,
    SeikakuType::NONKI,
    SeikakuType::WANPAKU,
    SeikakuType::NOUTENKI,
    SeikakuType::OKUBYOU,
    SeikakuType::SEKKATI,
    SeikakuType::MAJIME,
    SeikakuType::YOUKI,
    SeikakuType::MUJYAKI,
    SeikakuType::HIKAEME,
    SeikakuType::OTTORI,
    SeikakuType::REISEI,
    SeikakuType::TEREYA,
    SeikakuType::UKKARIYA,
    SeikakuType::ODAYAKA,
    SeikakuType::OTONASII,
    SeikakuType::NAMAIKI,
    SeikakuType::SINNTYOU,
    SeikakuType::KIMAGURE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SeikakuType(pub i32);
#[allow(non_upper_case_globals)]
impl SeikakuType {
    pub const DEFAULT: Self = Self(0);
    pub const GANBARIYA: Self = Self(1);
    pub const SAMISIGARIYA: Self = Self(2);
    pub const YUUKAN: Self = Self(3);
    pub const IJIPPARI: Self = Self(4);
    pub const YANTYA: Self = Self(5);
    pub const ZUBUTOI: Self = Self(6);
    pub const SUNAO: Self = Self(7);
    pub const NONKI: Self = Self(8);
    pub const WANPAKU: Self = Self(9);
    pub const NOUTENKI: Self = Self(10);
    pub const OKUBYOU: Self = Self(11);
    pub const SEKKATI: Self = Self(12);
    pub const MAJIME: Self = Self(13);
    pub const YOUKI: Self = Self(14);
    pub const MUJYAKI: Self = Self(15);
    pub const HIKAEME: Self = Self(16);
    pub const OTTORI: Self = Self(17);
    pub const REISEI: Self = Self(18);
    pub const TEREYA: Self = Self(19);
    pub const UKKARIYA: Self = Self(20);
    pub const ODAYAKA: Self = Self(21);
    pub const OTONASII: Self = Self(22);
    pub const NAMAIKI: Self = Self(23);
    pub const SINNTYOU: Self = Self(24);
    pub const KIMAGURE: Self = Self(25);

    pub const ENUM_MIN: i32 = 0;
    pub const ENUM_MAX: i32 = 25;
    pub const ENUM_VALUES: &'static [Self] = &[
        Self::DEFAULT,
        Self::GANBARIYA,
        Self::SAMISIGARIYA,
        Self::YUUKAN,
        Self::IJIPPARI,
        Self::YANTYA,
        Self::ZUBUTOI,
        Self::SUNAO,
        Self::NONKI,
        Self::WANPAKU,
        Self::NOUTENKI,
        Self::OKUBYOU,
        Self::SEKKATI,
        Self::MAJIME,
        Self::YOUKI,
        Self::MUJYAKI,
        Self::HIKAEME,
        Self::OTTORI,
        Self::REISEI,
        Self::TEREYA,
        Self::UKKARIYA,
        Self::ODAYAKA,
        Self::OTONASII,
        Self::NAMAIKI,
        Self::SINNTYOU,
        Self::KIMAGURE,
    ];
    /// Returns the variant's name or "" if unknown.
    pub fn variant_name(self) -> Option<&'static str> {
        match self {
            Self::DEFAULT => Some("DEFAULT"),
            Self::GANBARIYA => Some("GANBARIYA"),
            Self::SAMISIGARIYA => Some("SAMISIGARIYA"),
            Self::YUUKAN => Some("YUUKAN"),
            Self::IJIPPARI => Some("IJIPPARI"),
            Self::YANTYA => Some("YANTYA"),
            Self::ZUBUTOI => Some("ZUBUTOI"),
            Self::SUNAO => Some("SUNAO"),
            Self::NONKI => Some("NONKI"),
            Self::WANPAKU => Some("WANPAKU"),
            Self::NOUTENKI => Some("NOUTENKI"),
            Self::OKUBYOU => Some("OKUBYOU"),
            Self::SEKKATI => Some("SEKKATI"),
            Self::MAJIME => Some("MAJIME"),
            Self::YOUKI => Some("YOUKI"),
            Self::MUJYAKI => Some("MUJYAKI"),
            Self::HIKAEME => Some("HIKAEME"),
            Self::OTTORI => Some("OTTORI"),
            Self::REISEI => Some("REISEI"),
            Self::TEREYA => Some("TEREYA"),
            Self::UKKARIYA => Some("UKKARIYA"),
            Self::ODAYAKA => Some("ODAYAKA"),
            Self::OTONASII => Some("OTONASII"),
            Self::NAMAIKI => Some("NAMAIKI"),
            Self::SINNTYOU => Some("SINNTYOU"),
            Self::KIMAGURE => Some("KIMAGURE"),
            _ => None,
        }
    }
}
impl core::fmt::Debug for SeikakuType {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        if let Some(name) = self.variant_name() {
            f.write_str(name)
        } else {
            f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
        }
    }
}
impl<'a> flatbuffers::Follow<'a> for SeikakuType {
    type Inner = Self;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
        Self(b)
    }
}

impl flatbuffers::Push for SeikakuType {
    type Output = SeikakuType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SeikakuType {
    type Scalar = i32;
    #[inline]
    fn to_little_endian(self) -> i32 {
        self.0.to_le()
    }
    #[inline]
    #[allow(clippy::wrong_self_convention)]
    fn from_little_endian(v: i32) -> Self {
        let b = i32::from_le(v);
        Self(b)
    }
}

impl<'a> flatbuffers::Verifiable for SeikakuType {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        i32::run_verifier(v, pos)
    }
}

impl flatbuffers::SimpleToVerifyInSlice for SeikakuType {}
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MIN_SEX_TYPE: i32 = 0;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MAX_SEX_TYPE: i32 = 2;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SEX_TYPE: [SexType; 3] = [SexType::DEFAULT, SexType::MALE, SexType::FEMALE];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SexType(pub i32);
#[allow(non_upper_case_globals)]
impl SexType {
    pub const DEFAULT: Self = Self(0);
    pub const MALE: Self = Self(1);
    pub const FEMALE: Self = Self(2);

    pub const ENUM_MIN: i32 = 0;
    pub const ENUM_MAX: i32 = 2;
    pub const ENUM_VALUES: &'static [Self] = &[Self::DEFAULT, Self::MALE, Self::FEMALE];
    /// Returns the variant's name or "" if unknown.
    pub fn variant_name(self) -> Option<&'static str> {
        match self {
            Self::DEFAULT => Some("DEFAULT"),
            Self::MALE => Some("MALE"),
            Self::FEMALE => Some("FEMALE"),
            _ => None,
        }
    }
}
impl core::fmt::Debug for SexType {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        if let Some(name) = self.variant_name() {
            f.write_str(name)
        } else {
            f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
        }
    }
}
impl<'a> flatbuffers::Follow<'a> for SexType {
    type Inner = Self;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
        Self(b)
    }
}

impl flatbuffers::Push for SexType {
    type Output = SexType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SexType {
    type Scalar = i32;
    #[inline]
    fn to_little_endian(self) -> i32 {
        self.0.to_le()
    }
    #[inline]
    #[allow(clippy::wrong_self_convention)]
    fn from_little_endian(v: i32) -> Self {
        let b = i32::from_le(v);
        Self(b)
    }
}

impl<'a> flatbuffers::Verifiable for SexType {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        i32::run_verifier(v, pos)
    }
}

impl flatbuffers::SimpleToVerifyInSlice for SexType {}
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MIN_SIZE_TYPE: i32 = 0;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MAX_SIZE_TYPE: i32 = 6;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SIZE_TYPE: [SizeType; 7] = [
    SizeType::RANDOM,
    SizeType::XS,
    SizeType::S,
    SizeType::M,
    SizeType::L,
    SizeType::XL,
    SizeType::VALUE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SizeType(pub i32);
#[allow(non_upper_case_globals)]
impl SizeType {
    pub const RANDOM: Self = Self(0);
    pub const XS: Self = Self(1);
    pub const S: Self = Self(2);
    pub const M: Self = Self(3);
    pub const L: Self = Self(4);
    pub const XL: Self = Self(5);
    pub const VALUE: Self = Self(6);

    pub const ENUM_MIN: i32 = 0;
    pub const ENUM_MAX: i32 = 6;
    pub const ENUM_VALUES: &'static [Self] = &[
        Self::RANDOM,
        Self::XS,
        Self::S,
        Self::M,
        Self::L,
        Self::XL,
        Self::VALUE,
    ];
    /// Returns the variant's name or "" if unknown.
    pub fn variant_name(self) -> Option<&'static str> {
        match self {
            Self::RANDOM => Some("RANDOM"),
            Self::XS => Some("XS"),
            Self::S => Some("S"),
            Self::M => Some("M"),
            Self::L => Some("L"),
            Self::XL => Some("XL"),
            Self::VALUE => Some("VALUE"),
            _ => None,
        }
    }
}
impl core::fmt::Debug for SizeType {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        if let Some(name) = self.variant_name() {
            f.write_str(name)
        } else {
            f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
        }
    }
}
impl<'a> flatbuffers::Follow<'a> for SizeType {
    type Inner = Self;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
        Self(b)
    }
}

impl flatbuffers::Push for SizeType {
    type Output = SizeType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SizeType {
    type Scalar = i32;
    #[inline]
    fn to_little_endian(self) -> i32 {
        self.0.to_le()
    }
    #[inline]
    #[allow(clippy::wrong_self_convention)]
    fn from_little_endian(v: i32) -> Self {
        let b = i32::from_le(v);
        Self(b)
    }
}

impl<'a> flatbuffers::Verifiable for SizeType {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        i32::run_verifier(v, pos)
    }
}

impl flatbuffers::SimpleToVerifyInSlice for SizeType {}
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MIN_TALENT_TYPE: i32 = 0;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MAX_TALENT_TYPE: i32 = 2;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_TALENT_TYPE: [TalentType; 3] =
    [TalentType::RANDOM, TalentType::V_NUM, TalentType::VALUE];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct TalentType(pub i32);
#[allow(non_upper_case_globals)]
impl TalentType {
    pub const RANDOM: Self = Self(0);
    pub const V_NUM: Self = Self(1);
    pub const VALUE: Self = Self(2);

    pub const ENUM_MIN: i32 = 0;
    pub const ENUM_MAX: i32 = 2;
    pub const ENUM_VALUES: &'static [Self] = &[Self::RANDOM, Self::V_NUM, Self::VALUE];
    /// Returns the variant's name or "" if unknown.
    pub fn variant_name(self) -> Option<&'static str> {
        match self {
            Self::RANDOM => Some("RANDOM"),
            Self::V_NUM => Some("V_NUM"),
            Self::VALUE => Some("VALUE"),
            _ => None,
        }
    }
}
impl core::fmt::Debug for TalentType {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        if let Some(name) = self.variant_name() {
            f.write_str(name)
        } else {
            f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
        }
    }
}
impl<'a> flatbuffers::Follow<'a> for TalentType {
    type Inner = Self;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
        Self(b)
    }
}

impl flatbuffers::Push for TalentType {
    type Output = TalentType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for TalentType {
    type Scalar = i32;
    #[inline]
    fn to_little_endian(self) -> i32 {
        self.0.to_le()
    }
    #[inline]
    #[allow(clippy::wrong_self_convention)]
    fn from_little_endian(v: i32) -> Self {
        let b = i32::from_le(v);
        Self(b)
    }
}

impl<'a> flatbuffers::Verifiable for TalentType {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        i32::run_verifier(v, pos)
    }
}

impl flatbuffers::SimpleToVerifyInSlice for TalentType {}
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MIN_TOKUSEI_TYPE: i32 = 0;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MAX_TOKUSEI_TYPE: i32 = 4;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_TOKUSEI_TYPE: [TokuseiType; 5] = [
    TokuseiType::RANDOM_12,
    TokuseiType::RANDOM_123,
    TokuseiType::SET_1,
    TokuseiType::SET_2,
    TokuseiType::SET_3,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct TokuseiType(pub i32);
#[allow(non_upper_case_globals)]
impl TokuseiType {
    pub const RANDOM_12: Self = Self(0);
    pub const RANDOM_123: Self = Self(1);
    pub const SET_1: Self = Self(2);
    pub const SET_2: Self = Self(3);
    pub const SET_3: Self = Self(4);

    pub const ENUM_MIN: i32 = 0;
    pub const ENUM_MAX: i32 = 4;
    pub const ENUM_VALUES: &'static [Self] = &[
        Self::RANDOM_12,
        Self::RANDOM_123,
        Self::SET_1,
        Self::SET_2,
        Self::SET_3,
    ];
    /// Returns the variant's name or "" if unknown.
    pub fn variant_name(self) -> Option<&'static str> {
        match self {
            Self::RANDOM_12 => Some("RANDOM_12"),
            Self::RANDOM_123 => Some("RANDOM_123"),
            Self::SET_1 => Some("SET_1"),
            Self::SET_2 => Some("SET_2"),
            Self::SET_3 => Some("SET_3"),
            _ => None,
        }
    }
}
impl core::fmt::Debug for TokuseiType {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        if let Some(name) = self.variant_name() {
            f.write_str(name)
        } else {
            f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
        }
    }
}
impl<'a> flatbuffers::Follow<'a> for TokuseiType {
    type Inner = Self;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
        Self(b)
    }
}

impl flatbuffers::Push for TokuseiType {
    type Output = TokuseiType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for TokuseiType {
    type Scalar = i32;
    #[inline]
    fn to_little_endian(self) -> i32 {
        self.0.to_le()
    }
    #[inline]
    #[allow(clippy::wrong_self_convention)]
    fn from_little_endian(v: i32) -> Self {
        let b = i32::from_le(v);
        Self(b)
    }
}

impl<'a> flatbuffers::Verifiable for TokuseiType {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        i32::run_verifier(v, pos)
    }
}

impl flatbuffers::SimpleToVerifyInSlice for TokuseiType {}
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MIN_WAZA_TYPE: i32 = 0;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MAX_WAZA_TYPE: i32 = 1;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_WAZA_TYPE: [WazaType; 2] = [WazaType::DEFAULT, WazaType::MANUAL];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct WazaType(pub i32);
#[allow(non_upper_case_globals)]
impl WazaType {
    pub const DEFAULT: Self = Self(0);
    pub const MANUAL: Self = Self(1);

    pub const ENUM_MIN: i32 = 0;
    pub const ENUM_MAX: i32 = 1;
    pub const ENUM_VALUES: &'static [Self] = &[Self::DEFAULT, Self::MANUAL];
    /// Returns the variant's name or "" if unknown.
    pub fn variant_name(self) -> Option<&'static str> {
        match self {
            Self::DEFAULT => Some("DEFAULT"),
            Self::MANUAL => Some("MANUAL"),
            _ => None,
        }
    }
}
impl core::fmt::Debug for WazaType {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        if let Some(name) = self.variant_name() {
            f.write_str(name)
        } else {
            f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
        }
    }
}
impl<'a> flatbuffers::Follow<'a> for WazaType {
    type Inner = Self;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
        Self(b)
    }
}

impl flatbuffers::Push for WazaType {
    type Output = WazaType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for WazaType {
    type Scalar = i32;
    #[inline]
    fn to_little_endian(self) -> i32 {
        self.0.to_le()
    }
    #[inline]
    #[allow(clippy::wrong_self_convention)]
    fn from_little_endian(v: i32) -> Self {
        let b = i32::from_le(v);
        Self(b)
    }
}

impl<'a> flatbuffers::Verifiable for WazaType {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        i32::run_verifier(v, pos)
    }
}

impl flatbuffers::SimpleToVerifyInSlice for WazaType {}
pub enum DeliveryRaidEnemyTableOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DeliveryRaidEnemyTable<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DeliveryRaidEnemyTable<'a> {
    type Inner = DeliveryRaidEnemyTable<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> DeliveryRaidEnemyTable<'a> {
    pub const VT_RAIDENEMYINFO: flatbuffers::VOffsetT = 4;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        DeliveryRaidEnemyTable { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args DeliveryRaidEnemyTableArgs<'args>,
    ) -> flatbuffers::WIPOffset<DeliveryRaidEnemyTable<'bldr>> {
        let mut builder = DeliveryRaidEnemyTableBuilder::new(_fbb);
        if let Some(x) = args.raidEnemyInfo {
            builder.add_raidEnemyInfo(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn raidEnemyInfo(&self) -> RaidEnemyInfo<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<RaidEnemyInfo>>(
                    DeliveryRaidEnemyTable::VT_RAIDENEMYINFO,
                    None,
                )
                .unwrap()
        }
    }
}

impl flatbuffers::Verifiable for DeliveryRaidEnemyTable<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<RaidEnemyInfo>>(
                "raidEnemyInfo",
                Self::VT_RAIDENEMYINFO,
                false,
            )?
            .finish();
        Ok(())
    }
}
pub struct DeliveryRaidEnemyTableArgs<'a> {
    pub raidEnemyInfo: Option<flatbuffers::WIPOffset<RaidEnemyInfo<'a>>>,
}
impl<'a> Default for DeliveryRaidEnemyTableArgs<'a> {
    #[inline]
    fn default() -> Self {
        DeliveryRaidEnemyTableArgs {
            raidEnemyInfo: None,
        }
    }
}

pub struct DeliveryRaidEnemyTableBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DeliveryRaidEnemyTableBuilder<'a, 'b> {
    #[inline]
    pub fn add_raidEnemyInfo(&mut self, raidEnemyInfo: flatbuffers::WIPOffset<RaidEnemyInfo<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<RaidEnemyInfo>>(
                DeliveryRaidEnemyTable::VT_RAIDENEMYINFO,
                raidEnemyInfo,
            );
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    ) -> DeliveryRaidEnemyTableBuilder<'a, 'b> {
        let start = _fbb.start_table();
        DeliveryRaidEnemyTableBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<DeliveryRaidEnemyTable<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for DeliveryRaidEnemyTable<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("DeliveryRaidEnemyTable");
        ds.field("raidEnemyInfo", &self.raidEnemyInfo());
        ds.finish()
    }
}
pub enum DeliveryRaidEnemyTableArrayOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DeliveryRaidEnemyTableArray<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DeliveryRaidEnemyTableArray<'a> {
    type Inner = DeliveryRaidEnemyTableArray<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> DeliveryRaidEnemyTableArray<'a> {
    pub const VT_VALUES: flatbuffers::VOffsetT = 4;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        DeliveryRaidEnemyTableArray { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args DeliveryRaidEnemyTableArrayArgs<'args>,
    ) -> flatbuffers::WIPOffset<DeliveryRaidEnemyTableArray<'bldr>> {
        let mut builder = DeliveryRaidEnemyTableArrayBuilder::new(_fbb);
        if let Some(x) = args.values {
            builder.add_values(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn values(
        &self,
    ) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DeliveryRaidEnemyTable<'a>>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DeliveryRaidEnemyTable>>,
                >>(DeliveryRaidEnemyTableArray::VT_VALUES, None)
                .unwrap()
        }
    }
}

impl flatbuffers::Verifiable for DeliveryRaidEnemyTableArray<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<DeliveryRaidEnemyTable>>,
            >>("values", Self::VT_VALUES, false)?
            .finish();
        Ok(())
    }
}
pub struct DeliveryRaidEnemyTableArrayArgs<'a> {
    pub values: Option<
        flatbuffers::WIPOffset<
            flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DeliveryRaidEnemyTable<'a>>>,
        >,
    >,
}
impl<'a> Default for DeliveryRaidEnemyTableArrayArgs<'a> {
    #[inline]
    fn default() -> Self {
        DeliveryRaidEnemyTableArrayArgs { values: None }
    }
}

pub struct DeliveryRaidEnemyTableArrayBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DeliveryRaidEnemyTableArrayBuilder<'a, 'b> {
    #[inline]
    pub fn add_values(
        &mut self,
        values: flatbuffers::WIPOffset<
            flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<DeliveryRaidEnemyTable<'b>>>,
        >,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            DeliveryRaidEnemyTableArray::VT_VALUES,
            values,
        );
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    ) -> DeliveryRaidEnemyTableArrayBuilder<'a, 'b> {
        let start = _fbb.start_table();
        DeliveryRaidEnemyTableArrayBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<DeliveryRaidEnemyTableArray<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for DeliveryRaidEnemyTableArray<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("DeliveryRaidEnemyTableArray");
        ds.field("values", &self.values());
        ds.finish()
    }
}
pub enum OwnerInfoOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct OwnerInfo<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OwnerInfo<'a> {
    type Inner = OwnerInfo<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> OwnerInfo<'a> {
    pub const VT_TRAINERID: flatbuffers::VOffsetT = 4;
    pub const VT_SEX: flatbuffers::VOffsetT = 6;
    pub const VT_LANGID: flatbuffers::VOffsetT = 8;
    pub const VT_NAME: flatbuffers::VOffsetT = 10;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        OwnerInfo { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args OwnerInfoArgs<'args>,
    ) -> flatbuffers::WIPOffset<OwnerInfo<'bldr>> {
        let mut builder = OwnerInfoBuilder::new(_fbb);
        if let Some(x) = args.name {
            builder.add_name(x);
        }
        builder.add_langId(args.langId);
        builder.add_sex(args.sex);
        builder.add_trainerId(args.trainerId);
        builder.finish()
    }

    #[inline]
    pub fn trainerId(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(OwnerInfo::VT_TRAINERID, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn sex(&self) -> SexType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SexType>(OwnerInfo::VT_SEX, Some(SexType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn langId(&self) -> LangType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<LangType>(OwnerInfo::VT_LANGID, Some(LangType::ROM_LANG))
                .unwrap()
        }
    }
    #[inline]
    pub fn name(&self) -> &'a str {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<&str>>(OwnerInfo::VT_NAME, Some(&"0"))
                .unwrap()
        }
    }
}

impl flatbuffers::Verifiable for OwnerInfo<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<i32>("trainerId", Self::VT_TRAINERID, false)?
            .visit_field::<SexType>("sex", Self::VT_SEX, false)?
            .visit_field::<LangType>("langId", Self::VT_LANGID, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
            .finish();
        Ok(())
    }
}
pub struct OwnerInfoArgs<'a> {
    pub trainerId: i32,
    pub sex: SexType,
    pub langId: LangType,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for OwnerInfoArgs<'a> {
    #[inline]
    fn default() -> Self {
        OwnerInfoArgs {
            trainerId: 0,
            sex: SexType::DEFAULT,
            langId: LangType::ROM_LANG,
            name: None,
        }
    }
}

pub struct OwnerInfoBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> OwnerInfoBuilder<'a, 'b> {
    #[inline]
    pub fn add_trainerId(&mut self, trainerId: i32) {
        self.fbb_
            .push_slot::<i32>(OwnerInfo::VT_TRAINERID, trainerId, 0);
    }
    #[inline]
    pub fn add_sex(&mut self, sex: SexType) {
        self.fbb_
            .push_slot::<SexType>(OwnerInfo::VT_SEX, sex, SexType::DEFAULT);
    }
    #[inline]
    pub fn add_langId(&mut self, langId: LangType) {
        self.fbb_
            .push_slot::<LangType>(OwnerInfo::VT_LANGID, langId, LangType::ROM_LANG);
    }
    #[inline]
    pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b str>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(OwnerInfo::VT_NAME, name);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> OwnerInfoBuilder<'a, 'b> {
        let start = _fbb.start_table();
        OwnerInfoBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<OwnerInfo<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for OwnerInfo<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("OwnerInfo");
        ds.field("trainerId", &self.trainerId());
        ds.field("sex", &self.sex());
        ds.field("langId", &self.langId());
        ds.field("name", &self.name());
        ds.finish()
    }
}
pub enum ParamSetOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ParamSet<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ParamSet<'a> {
    type Inner = ParamSet<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> ParamSet<'a> {
    pub const VT_HP: flatbuffers::VOffsetT = 4;
    pub const VT_ATK: flatbuffers::VOffsetT = 6;
    pub const VT_DEF: flatbuffers::VOffsetT = 8;
    pub const VT_SPATK: flatbuffers::VOffsetT = 10;
    pub const VT_SPDEF: flatbuffers::VOffsetT = 12;
    pub const VT_AGI: flatbuffers::VOffsetT = 14;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ParamSet { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ParamSetArgs,
    ) -> flatbuffers::WIPOffset<ParamSet<'bldr>> {
        let mut builder = ParamSetBuilder::new(_fbb);
        builder.add_agi(args.agi);
        builder.add_spDef(args.spDef);
        builder.add_spAtk(args.spAtk);
        builder.add_def(args.def);
        builder.add_atk(args.atk);
        builder.add_hp(args.hp);
        builder.finish()
    }

    #[inline]
    pub fn hp(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<i32>(ParamSet::VT_HP, Some(0)).unwrap() }
    }
    #[inline]
    pub fn atk(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<i32>(ParamSet::VT_ATK, Some(0)).unwrap() }
    }
    #[inline]
    pub fn def(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<i32>(ParamSet::VT_DEF, Some(0)).unwrap() }
    }
    #[inline]
    pub fn spAtk(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<i32>(ParamSet::VT_SPATK, Some(0)).unwrap() }
    }
    #[inline]
    pub fn spDef(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<i32>(ParamSet::VT_SPDEF, Some(0)).unwrap() }
    }
    #[inline]
    pub fn agi(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<i32>(ParamSet::VT_AGI, Some(0)).unwrap() }
    }
}

impl flatbuffers::Verifiable for ParamSet<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<i32>("hp", Self::VT_HP, false)?
            .visit_field::<i32>("atk", Self::VT_ATK, false)?
            .visit_field::<i32>("def", Self::VT_DEF, false)?
            .visit_field::<i32>("spAtk", Self::VT_SPATK, false)?
            .visit_field::<i32>("spDef", Self::VT_SPDEF, false)?
            .visit_field::<i32>("agi", Self::VT_AGI, false)?
            .finish();
        Ok(())
    }
}
pub struct ParamSetArgs {
    pub hp: i32,
    pub atk: i32,
    pub def: i32,
    pub spAtk: i32,
    pub spDef: i32,
    pub agi: i32,
}
impl<'a> Default for ParamSetArgs {
    #[inline]
    fn default() -> Self {
        ParamSetArgs {
            hp: 0,
            atk: 0,
            def: 0,
            spAtk: 0,
            spDef: 0,
            agi: 0,
        }
    }
}

pub struct ParamSetBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ParamSetBuilder<'a, 'b> {
    #[inline]
    pub fn add_hp(&mut self, hp: i32) {
        self.fbb_.push_slot::<i32>(ParamSet::VT_HP, hp, 0);
    }
    #[inline]
    pub fn add_atk(&mut self, atk: i32) {
        self.fbb_.push_slot::<i32>(ParamSet::VT_ATK, atk, 0);
    }
    #[inline]
    pub fn add_def(&mut self, def: i32) {
        self.fbb_.push_slot::<i32>(ParamSet::VT_DEF, def, 0);
    }
    #[inline]
    pub fn add_spAtk(&mut self, spAtk: i32) {
        self.fbb_.push_slot::<i32>(ParamSet::VT_SPATK, spAtk, 0);
    }
    #[inline]
    pub fn add_spDef(&mut self, spDef: i32) {
        self.fbb_.push_slot::<i32>(ParamSet::VT_SPDEF, spDef, 0);
    }
    #[inline]
    pub fn add_agi(&mut self, agi: i32) {
        self.fbb_.push_slot::<i32>(ParamSet::VT_AGI, agi, 0);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ParamSetBuilder<'a, 'b> {
        let start = _fbb.start_table();
        ParamSetBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<ParamSet<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for ParamSet<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("ParamSet");
        ds.field("hp", &self.hp());
        ds.field("atk", &self.atk());
        ds.field("def", &self.def());
        ds.field("spAtk", &self.spAtk());
        ds.field("spDef", &self.spDef());
        ds.field("agi", &self.agi());
        ds.finish()
    }
}
pub enum PokeDataBattleOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PokeDataBattle<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PokeDataBattle<'a> {
    type Inner = PokeDataBattle<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> PokeDataBattle<'a> {
    pub const VT_DEVID: flatbuffers::VOffsetT = 4;
    pub const VT_FORMID: flatbuffers::VOffsetT = 6;
    pub const VT_SEX: flatbuffers::VOffsetT = 8;
    pub const VT_ITEM: flatbuffers::VOffsetT = 10;
    pub const VT_LEVEL: flatbuffers::VOffsetT = 12;
    pub const VT_BALLID: flatbuffers::VOffsetT = 14;
    pub const VT_WAZATYPE: flatbuffers::VOffsetT = 16;
    pub const VT_WAZA1: flatbuffers::VOffsetT = 18;
    pub const VT_WAZA2: flatbuffers::VOffsetT = 20;
    pub const VT_WAZA3: flatbuffers::VOffsetT = 22;
    pub const VT_WAZA4: flatbuffers::VOffsetT = 24;
    pub const VT_GEMTYPE: flatbuffers::VOffsetT = 26;
    pub const VT_SEIKAKU: flatbuffers::VOffsetT = 28;
    pub const VT_TOKUSEI: flatbuffers::VOffsetT = 30;
    pub const VT_TALENTTYPE: flatbuffers::VOffsetT = 32;
    pub const VT_TALENTVALUE: flatbuffers::VOffsetT = 34;
    pub const VT_TALENTVNUM: flatbuffers::VOffsetT = 36;
    pub const VT_EFFORTVALUE: flatbuffers::VOffsetT = 38;
    pub const VT_RARETYPE: flatbuffers::VOffsetT = 40;
    pub const VT_SCALETYPE: flatbuffers::VOffsetT = 42;
    pub const VT_SCALEVALUE: flatbuffers::VOffsetT = 44;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        PokeDataBattle { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args PokeDataBattleArgs<'args>,
    ) -> flatbuffers::WIPOffset<PokeDataBattle<'bldr>> {
        let mut builder = PokeDataBattleBuilder::new(_fbb);
        builder.add_scaleType(args.scaleType);
        builder.add_rareType(args.rareType);
        if let Some(x) = args.effortValue {
            builder.add_effortValue(x);
        }
        if let Some(x) = args.talentValue {
            builder.add_talentValue(x);
        }
        builder.add_talentType(args.talentType);
        builder.add_tokusei(args.tokusei);
        builder.add_seikaku(args.seikaku);
        builder.add_gemType(args.gemType);
        if let Some(x) = args.waza4 {
            builder.add_waza4(x);
        }
        if let Some(x) = args.waza3 {
            builder.add_waza3(x);
        }
        if let Some(x) = args.waza2 {
            builder.add_waza2(x);
        }
        if let Some(x) = args.waza1 {
            builder.add_waza1(x);
        }
        builder.add_wazaType(args.wazaType);
        builder.add_ballId(args.ballId);
        builder.add_level(args.level);
        builder.add_item(args.item);
        builder.add_sex(args.sex);
        builder.add_scaleValue(args.scaleValue);
        builder.add_formId(args.formId);
        builder.add_devId(args.devId);
        builder.add_talentVnum(args.talentVnum);
        builder.finish()
    }

    #[inline]
    pub fn devId(&self) -> pml::common::DevID {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<pml::common::DevID>(
                    PokeDataBattle::VT_DEVID,
                    Some(pml::common::DevID::DEV_NULL),
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn formId(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(PokeDataBattle::VT_FORMID, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn sex(&self) -> SexType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SexType>(PokeDataBattle::VT_SEX, Some(SexType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn item(&self) -> ItemID {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<ItemID>(PokeDataBattle::VT_ITEM, Some(ItemID::ITEMID_NONE))
                .unwrap()
        }
    }
    #[inline]
    pub fn level(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(PokeDataBattle::VT_LEVEL, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn ballId(&self) -> BallType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<BallType>(PokeDataBattle::VT_BALLID, Some(BallType::NONE))
                .unwrap()
        }
    }
    #[inline]
    pub fn wazaType(&self) -> WazaType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<WazaType>(PokeDataBattle::VT_WAZATYPE, Some(WazaType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn waza1(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataBattle::VT_WAZA1, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn waza2(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataBattle::VT_WAZA2, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn waza3(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataBattle::VT_WAZA3, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn waza4(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataBattle::VT_WAZA4, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn gemType(&self) -> GemType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<GemType>(PokeDataBattle::VT_GEMTYPE, Some(GemType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn seikaku(&self) -> SeikakuType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SeikakuType>(PokeDataBattle::VT_SEIKAKU, Some(SeikakuType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn tokusei(&self) -> TokuseiType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<TokuseiType>(PokeDataBattle::VT_TOKUSEI, Some(TokuseiType::RANDOM_12))
                .unwrap()
        }
    }
    #[inline]
    pub fn talentType(&self) -> TalentType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<TalentType>(PokeDataBattle::VT_TALENTTYPE, Some(TalentType::RANDOM))
                .unwrap()
        }
    }
    #[inline]
    pub fn talentValue(&self) -> ParamSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<ParamSet>>(PokeDataBattle::VT_TALENTVALUE, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn talentVnum(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(PokeDataBattle::VT_TALENTVNUM, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn effortValue(&self) -> ParamSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<ParamSet>>(PokeDataBattle::VT_EFFORTVALUE, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn rareType(&self) -> RareType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<RareType>(PokeDataBattle::VT_RARETYPE, Some(RareType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn scaleType(&self) -> SizeType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SizeType>(PokeDataBattle::VT_SCALETYPE, Some(SizeType::RANDOM))
                .unwrap()
        }
    }
    #[inline]
    pub fn scaleValue(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(PokeDataBattle::VT_SCALEVALUE, Some(0))
                .unwrap()
        }
    }
}

impl flatbuffers::Verifiable for PokeDataBattle<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<pml::common::DevID>("devId", Self::VT_DEVID, false)?
            .visit_field::<i16>("formId", Self::VT_FORMID, false)?
            .visit_field::<SexType>("sex", Self::VT_SEX, false)?
            .visit_field::<ItemID>("item", Self::VT_ITEM, false)?
            .visit_field::<i32>("level", Self::VT_LEVEL, false)?
            .visit_field::<BallType>("ballId", Self::VT_BALLID, false)?
            .visit_field::<WazaType>("wazaType", Self::VT_WAZATYPE, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza1", Self::VT_WAZA1, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza2", Self::VT_WAZA2, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza3", Self::VT_WAZA3, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza4", Self::VT_WAZA4, false)?
            .visit_field::<GemType>("gemType", Self::VT_GEMTYPE, false)?
            .visit_field::<SeikakuType>("seikaku", Self::VT_SEIKAKU, false)?
            .visit_field::<TokuseiType>("tokusei", Self::VT_TOKUSEI, false)?
            .visit_field::<TalentType>("talentType", Self::VT_TALENTTYPE, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<ParamSet>>(
                "talentValue",
                Self::VT_TALENTVALUE,
                false,
            )?
            .visit_field::<i8>("talentVnum", Self::VT_TALENTVNUM, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<ParamSet>>(
                "effortValue",
                Self::VT_EFFORTVALUE,
                false,
            )?
            .visit_field::<RareType>("rareType", Self::VT_RARETYPE, false)?
            .visit_field::<SizeType>("scaleType", Self::VT_SCALETYPE, false)?
            .visit_field::<i16>("scaleValue", Self::VT_SCALEVALUE, false)?
            .finish();
        Ok(())
    }
}
pub struct PokeDataBattleArgs<'a> {
    pub devId: pml::common::DevID,
    pub formId: i16,
    pub sex: SexType,
    pub item: ItemID,
    pub level: i32,
    pub ballId: BallType,
    pub wazaType: WazaType,
    pub waza1: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub waza2: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub waza3: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub waza4: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub gemType: GemType,
    pub seikaku: SeikakuType,
    pub tokusei: TokuseiType,
    pub talentType: TalentType,
    pub talentValue: Option<flatbuffers::WIPOffset<ParamSet<'a>>>,
    pub talentVnum: i8,
    pub effortValue: Option<flatbuffers::WIPOffset<ParamSet<'a>>>,
    pub rareType: RareType,
    pub scaleType: SizeType,
    pub scaleValue: i16,
}
impl<'a> Default for PokeDataBattleArgs<'a> {
    #[inline]
    fn default() -> Self {
        PokeDataBattleArgs {
            devId: pml::common::DevID::DEV_NULL,
            formId: 0,
            sex: SexType::DEFAULT,
            item: ItemID::ITEMID_NONE,
            level: 0,
            ballId: BallType::NONE,
            wazaType: WazaType::DEFAULT,
            waza1: None,
            waza2: None,
            waza3: None,
            waza4: None,
            gemType: GemType::DEFAULT,
            seikaku: SeikakuType::DEFAULT,
            tokusei: TokuseiType::RANDOM_12,
            talentType: TalentType::RANDOM,
            talentValue: None,
            talentVnum: 0,
            effortValue: None,
            rareType: RareType::DEFAULT,
            scaleType: SizeType::RANDOM,
            scaleValue: 0,
        }
    }
}

pub struct PokeDataBattleBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PokeDataBattleBuilder<'a, 'b> {
    #[inline]
    pub fn add_devId(&mut self, devId: pml::common::DevID) {
        self.fbb_.push_slot::<pml::common::DevID>(
            PokeDataBattle::VT_DEVID,
            devId,
            pml::common::DevID::DEV_NULL,
        );
    }
    #[inline]
    pub fn add_formId(&mut self, formId: i16) {
        self.fbb_
            .push_slot::<i16>(PokeDataBattle::VT_FORMID, formId, 0);
    }
    #[inline]
    pub fn add_sex(&mut self, sex: SexType) {
        self.fbb_
            .push_slot::<SexType>(PokeDataBattle::VT_SEX, sex, SexType::DEFAULT);
    }
    #[inline]
    pub fn add_item(&mut self, item: ItemID) {
        self.fbb_
            .push_slot::<ItemID>(PokeDataBattle::VT_ITEM, item, ItemID::ITEMID_NONE);
    }
    #[inline]
    pub fn add_level(&mut self, level: i32) {
        self.fbb_
            .push_slot::<i32>(PokeDataBattle::VT_LEVEL, level, 0);
    }
    #[inline]
    pub fn add_ballId(&mut self, ballId: BallType) {
        self.fbb_
            .push_slot::<BallType>(PokeDataBattle::VT_BALLID, ballId, BallType::NONE);
    }
    #[inline]
    pub fn add_wazaType(&mut self, wazaType: WazaType) {
        self.fbb_
            .push_slot::<WazaType>(PokeDataBattle::VT_WAZATYPE, wazaType, WazaType::DEFAULT);
    }
    #[inline]
    pub fn add_waza1(&mut self, waza1: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(PokeDataBattle::VT_WAZA1, waza1);
    }
    #[inline]
    pub fn add_waza2(&mut self, waza2: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(PokeDataBattle::VT_WAZA2, waza2);
    }
    #[inline]
    pub fn add_waza3(&mut self, waza3: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(PokeDataBattle::VT_WAZA3, waza3);
    }
    #[inline]
    pub fn add_waza4(&mut self, waza4: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(PokeDataBattle::VT_WAZA4, waza4);
    }
    #[inline]
    pub fn add_gemType(&mut self, gemType: GemType) {
        self.fbb_
            .push_slot::<GemType>(PokeDataBattle::VT_GEMTYPE, gemType, GemType::DEFAULT);
    }
    #[inline]
    pub fn add_seikaku(&mut self, seikaku: SeikakuType) {
        self.fbb_.push_slot::<SeikakuType>(
            PokeDataBattle::VT_SEIKAKU,
            seikaku,
            SeikakuType::DEFAULT,
        );
    }
    #[inline]
    pub fn add_tokusei(&mut self, tokusei: TokuseiType) {
        self.fbb_.push_slot::<TokuseiType>(
            PokeDataBattle::VT_TOKUSEI,
            tokusei,
            TokuseiType::RANDOM_12,
        );
    }
    #[inline]
    pub fn add_talentType(&mut self, talentType: TalentType) {
        self.fbb_.push_slot::<TalentType>(
            PokeDataBattle::VT_TALENTTYPE,
            talentType,
            TalentType::RANDOM,
        );
    }
    #[inline]
    pub fn add_talentValue(&mut self, talentValue: flatbuffers::WIPOffset<ParamSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<ParamSet>>(
                PokeDataBattle::VT_TALENTVALUE,
                talentValue,
            );
    }
    #[inline]
    pub fn add_talentVnum(&mut self, talentVnum: i8) {
        self.fbb_
            .push_slot::<i8>(PokeDataBattle::VT_TALENTVNUM, talentVnum, 0);
    }
    #[inline]
    pub fn add_effortValue(&mut self, effortValue: flatbuffers::WIPOffset<ParamSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<ParamSet>>(
                PokeDataBattle::VT_EFFORTVALUE,
                effortValue,
            );
    }
    #[inline]
    pub fn add_rareType(&mut self, rareType: RareType) {
        self.fbb_
            .push_slot::<RareType>(PokeDataBattle::VT_RARETYPE, rareType, RareType::DEFAULT);
    }
    #[inline]
    pub fn add_scaleType(&mut self, scaleType: SizeType) {
        self.fbb_
            .push_slot::<SizeType>(PokeDataBattle::VT_SCALETYPE, scaleType, SizeType::RANDOM);
    }
    #[inline]
    pub fn add_scaleValue(&mut self, scaleValue: i16) {
        self.fbb_
            .push_slot::<i16>(PokeDataBattle::VT_SCALEVALUE, scaleValue, 0);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PokeDataBattleBuilder<'a, 'b> {
        let start = _fbb.start_table();
        PokeDataBattleBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<PokeDataBattle<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for PokeDataBattle<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("PokeDataBattle");
        ds.field("devId", &self.devId());
        ds.field("formId", &self.formId());
        ds.field("sex", &self.sex());
        ds.field("item", &self.item());
        ds.field("level", &self.level());
        ds.field("ballId", &self.ballId());
        ds.field("wazaType", &self.wazaType());
        ds.field("waza1", &self.waza1());
        ds.field("waza2", &self.waza2());
        ds.field("waza3", &self.waza3());
        ds.field("waza4", &self.waza4());
        ds.field("gemType", &self.gemType());
        ds.field("seikaku", &self.seikaku());
        ds.field("tokusei", &self.tokusei());
        ds.field("talentType", &self.talentType());
        ds.field("talentValue", &self.talentValue());
        ds.field("talentVnum", &self.talentVnum());
        ds.field("effortValue", &self.effortValue());
        ds.field("rareType", &self.rareType());
        ds.field("scaleType", &self.scaleType());
        ds.field("scaleValue", &self.scaleValue());
        ds.finish()
    }
}
pub enum PokeDataEventBattleOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PokeDataEventBattle<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PokeDataEventBattle<'a> {
    type Inner = PokeDataEventBattle<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> PokeDataEventBattle<'a> {
    pub const VT_DEVID: flatbuffers::VOffsetT = 4;
    pub const VT_FORMID: flatbuffers::VOffsetT = 6;
    pub const VT_SEX: flatbuffers::VOffsetT = 8;
    pub const VT_LEVEL: flatbuffers::VOffsetT = 10;
    pub const VT_RARETYPE: flatbuffers::VOffsetT = 12;
    pub const VT_TALENTTYPE: flatbuffers::VOffsetT = 14;
    pub const VT_TALENTVNUM: flatbuffers::VOffsetT = 16;
    pub const VT_TALENTVALUE: flatbuffers::VOffsetT = 18;
    pub const VT_EFFORTVALUE: flatbuffers::VOffsetT = 20;
    pub const VT_ITEM: flatbuffers::VOffsetT = 22;
    pub const VT_DROPITEM: flatbuffers::VOffsetT = 24;
    pub const VT_DROPITEMNUM: flatbuffers::VOffsetT = 26;
    pub const VT_SEIKAKU: flatbuffers::VOffsetT = 28;
    pub const VT_SEIKAKUHOSEI: flatbuffers::VOffsetT = 30;
    pub const VT_TOKUSEI: flatbuffers::VOffsetT = 32;
    pub const VT_WAZATYPE: flatbuffers::VOffsetT = 34;
    pub const VT_WAZA1: flatbuffers::VOffsetT = 36;
    pub const VT_WAZA2: flatbuffers::VOffsetT = 38;
    pub const VT_WAZA3: flatbuffers::VOffsetT = 40;
    pub const VT_WAZA4: flatbuffers::VOffsetT = 42;
    pub const VT_GEMTYPE: flatbuffers::VOffsetT = 44;
    pub const VT_SCALETYPE: flatbuffers::VOffsetT = 46;
    pub const VT_SCALEVALUE: flatbuffers::VOffsetT = 48;
    pub const VT_SETRIBBON: flatbuffers::VOffsetT = 50;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        PokeDataEventBattle { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args PokeDataEventBattleArgs<'args>,
    ) -> flatbuffers::WIPOffset<PokeDataEventBattle<'bldr>> {
        let mut builder = PokeDataEventBattleBuilder::new(_fbb);
        builder.add_setRibbon(args.setRibbon);
        builder.add_scaleType(args.scaleType);
        builder.add_gemType(args.gemType);
        if let Some(x) = args.waza4 {
            builder.add_waza4(x);
        }
        if let Some(x) = args.waza3 {
            builder.add_waza3(x);
        }
        if let Some(x) = args.waza2 {
            builder.add_waza2(x);
        }
        if let Some(x) = args.waza1 {
            builder.add_waza1(x);
        }
        builder.add_wazaType(args.wazaType);
        builder.add_tokusei(args.tokusei);
        builder.add_seikakuHosei(args.seikakuHosei);
        builder.add_seikaku(args.seikaku);
        builder.add_dropItem(args.dropItem);
        builder.add_item(args.item);
        if let Some(x) = args.effortValue {
            builder.add_effortValue(x);
        }
        if let Some(x) = args.talentValue {
            builder.add_talentValue(x);
        }
        builder.add_talentType(args.talentType);
        builder.add_rareType(args.rareType);
        builder.add_level(args.level);
        builder.add_sex(args.sex);
        builder.add_scaleValue(args.scaleValue);
        builder.add_formId(args.formId);
        builder.add_devId(args.devId);
        builder.add_dropItemNum(args.dropItemNum);
        builder.add_talentVnum(args.talentVnum);
        builder.finish()
    }

    #[inline]
    pub fn devId(&self) -> pml::common::DevID {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<pml::common::DevID>(
                    PokeDataEventBattle::VT_DEVID,
                    Some(pml::common::DevID::DEV_NULL),
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn formId(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(PokeDataEventBattle::VT_FORMID, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn sex(&self) -> SexType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SexType>(PokeDataEventBattle::VT_SEX, Some(SexType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn level(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(PokeDataEventBattle::VT_LEVEL, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn rareType(&self) -> RareType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<RareType>(PokeDataEventBattle::VT_RARETYPE, Some(RareType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn talentType(&self) -> TalentType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<TalentType>(PokeDataEventBattle::VT_TALENTTYPE, Some(TalentType::RANDOM))
                .unwrap()
        }
    }
    #[inline]
    pub fn talentVnum(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(PokeDataEventBattle::VT_TALENTVNUM, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn talentValue(&self) -> ParamSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<ParamSet>>(
                    PokeDataEventBattle::VT_TALENTVALUE,
                    None,
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn effortValue(&self) -> ParamSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<ParamSet>>(
                    PokeDataEventBattle::VT_EFFORTVALUE,
                    None,
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn item(&self) -> ItemID {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<ItemID>(PokeDataEventBattle::VT_ITEM, Some(ItemID::ITEMID_NONE))
                .unwrap()
        }
    }
    #[inline]
    pub fn dropItem(&self) -> ItemID {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<ItemID>(PokeDataEventBattle::VT_DROPITEM, Some(ItemID::ITEMID_NONE))
                .unwrap()
        }
    }
    #[inline]
    pub fn dropItemNum(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(PokeDataEventBattle::VT_DROPITEMNUM, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn seikaku(&self) -> SeikakuType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SeikakuType>(PokeDataEventBattle::VT_SEIKAKU, Some(SeikakuType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn seikakuHosei(&self) -> SeikakuType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SeikakuType>(
                    PokeDataEventBattle::VT_SEIKAKUHOSEI,
                    Some(SeikakuType::DEFAULT),
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn tokusei(&self) -> TokuseiType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<TokuseiType>(
                    PokeDataEventBattle::VT_TOKUSEI,
                    Some(TokuseiType::RANDOM_12),
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn wazaType(&self) -> WazaType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<WazaType>(PokeDataEventBattle::VT_WAZATYPE, Some(WazaType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn waza1(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataEventBattle::VT_WAZA1, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn waza2(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataEventBattle::VT_WAZA2, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn waza3(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataEventBattle::VT_WAZA3, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn waza4(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataEventBattle::VT_WAZA4, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn gemType(&self) -> GemType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<GemType>(PokeDataEventBattle::VT_GEMTYPE, Some(GemType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn scaleType(&self) -> SizeType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SizeType>(PokeDataEventBattle::VT_SCALETYPE, Some(SizeType::RANDOM))
                .unwrap()
        }
    }
    #[inline]
    pub fn scaleValue(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(PokeDataEventBattle::VT_SCALEVALUE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn setRibbon(&self) -> RibbonType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<RibbonType>(PokeDataEventBattle::VT_SETRIBBON, Some(RibbonType::NONE))
                .unwrap()
        }
    }
}

impl flatbuffers::Verifiable for PokeDataEventBattle<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<pml::common::DevID>("devId", Self::VT_DEVID, false)?
            .visit_field::<i16>("formId", Self::VT_FORMID, false)?
            .visit_field::<SexType>("sex", Self::VT_SEX, false)?
            .visit_field::<i32>("level", Self::VT_LEVEL, false)?
            .visit_field::<RareType>("rareType", Self::VT_RARETYPE, false)?
            .visit_field::<TalentType>("talentType", Self::VT_TALENTTYPE, false)?
            .visit_field::<i8>("talentVnum", Self::VT_TALENTVNUM, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<ParamSet>>(
                "talentValue",
                Self::VT_TALENTVALUE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<ParamSet>>(
                "effortValue",
                Self::VT_EFFORTVALUE,
                false,
            )?
            .visit_field::<ItemID>("item", Self::VT_ITEM, false)?
            .visit_field::<ItemID>("dropItem", Self::VT_DROPITEM, false)?
            .visit_field::<i8>("dropItemNum", Self::VT_DROPITEMNUM, false)?
            .visit_field::<SeikakuType>("seikaku", Self::VT_SEIKAKU, false)?
            .visit_field::<SeikakuType>("seikakuHosei", Self::VT_SEIKAKUHOSEI, false)?
            .visit_field::<TokuseiType>("tokusei", Self::VT_TOKUSEI, false)?
            .visit_field::<WazaType>("wazaType", Self::VT_WAZATYPE, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza1", Self::VT_WAZA1, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza2", Self::VT_WAZA2, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza3", Self::VT_WAZA3, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza4", Self::VT_WAZA4, false)?
            .visit_field::<GemType>("gemType", Self::VT_GEMTYPE, false)?
            .visit_field::<SizeType>("scaleType", Self::VT_SCALETYPE, false)?
            .visit_field::<i16>("scaleValue", Self::VT_SCALEVALUE, false)?
            .visit_field::<RibbonType>("setRibbon", Self::VT_SETRIBBON, false)?
            .finish();
        Ok(())
    }
}
pub struct PokeDataEventBattleArgs<'a> {
    pub devId: pml::common::DevID,
    pub formId: i16,
    pub sex: SexType,
    pub level: i32,
    pub rareType: RareType,
    pub talentType: TalentType,
    pub talentVnum: i8,
    pub talentValue: Option<flatbuffers::WIPOffset<ParamSet<'a>>>,
    pub effortValue: Option<flatbuffers::WIPOffset<ParamSet<'a>>>,
    pub item: ItemID,
    pub dropItem: ItemID,
    pub dropItemNum: i8,
    pub seikaku: SeikakuType,
    pub seikakuHosei: SeikakuType,
    pub tokusei: TokuseiType,
    pub wazaType: WazaType,
    pub waza1: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub waza2: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub waza3: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub waza4: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub gemType: GemType,
    pub scaleType: SizeType,
    pub scaleValue: i16,
    pub setRibbon: RibbonType,
}
impl<'a> Default for PokeDataEventBattleArgs<'a> {
    #[inline]
    fn default() -> Self {
        PokeDataEventBattleArgs {
            devId: pml::common::DevID::DEV_NULL,
            formId: 0,
            sex: SexType::DEFAULT,
            level: 0,
            rareType: RareType::DEFAULT,
            talentType: TalentType::RANDOM,
            talentVnum: 0,
            talentValue: None,
            effortValue: None,
            item: ItemID::ITEMID_NONE,
            dropItem: ItemID::ITEMID_NONE,
            dropItemNum: 0,
            seikaku: SeikakuType::DEFAULT,
            seikakuHosei: SeikakuType::DEFAULT,
            tokusei: TokuseiType::RANDOM_12,
            wazaType: WazaType::DEFAULT,
            waza1: None,
            waza2: None,
            waza3: None,
            waza4: None,
            gemType: GemType::DEFAULT,
            scaleType: SizeType::RANDOM,
            scaleValue: 0,
            setRibbon: RibbonType::NONE,
        }
    }
}

pub struct PokeDataEventBattleBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PokeDataEventBattleBuilder<'a, 'b> {
    #[inline]
    pub fn add_devId(&mut self, devId: pml::common::DevID) {
        self.fbb_.push_slot::<pml::common::DevID>(
            PokeDataEventBattle::VT_DEVID,
            devId,
            pml::common::DevID::DEV_NULL,
        );
    }
    #[inline]
    pub fn add_formId(&mut self, formId: i16) {
        self.fbb_
            .push_slot::<i16>(PokeDataEventBattle::VT_FORMID, formId, 0);
    }
    #[inline]
    pub fn add_sex(&mut self, sex: SexType) {
        self.fbb_
            .push_slot::<SexType>(PokeDataEventBattle::VT_SEX, sex, SexType::DEFAULT);
    }
    #[inline]
    pub fn add_level(&mut self, level: i32) {
        self.fbb_
            .push_slot::<i32>(PokeDataEventBattle::VT_LEVEL, level, 0);
    }
    #[inline]
    pub fn add_rareType(&mut self, rareType: RareType) {
        self.fbb_.push_slot::<RareType>(
            PokeDataEventBattle::VT_RARETYPE,
            rareType,
            RareType::DEFAULT,
        );
    }
    #[inline]
    pub fn add_talentType(&mut self, talentType: TalentType) {
        self.fbb_.push_slot::<TalentType>(
            PokeDataEventBattle::VT_TALENTTYPE,
            talentType,
            TalentType::RANDOM,
        );
    }
    #[inline]
    pub fn add_talentVnum(&mut self, talentVnum: i8) {
        self.fbb_
            .push_slot::<i8>(PokeDataEventBattle::VT_TALENTVNUM, talentVnum, 0);
    }
    #[inline]
    pub fn add_talentValue(&mut self, talentValue: flatbuffers::WIPOffset<ParamSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<ParamSet>>(
                PokeDataEventBattle::VT_TALENTVALUE,
                talentValue,
            );
    }
    #[inline]
    pub fn add_effortValue(&mut self, effortValue: flatbuffers::WIPOffset<ParamSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<ParamSet>>(
                PokeDataEventBattle::VT_EFFORTVALUE,
                effortValue,
            );
    }
    #[inline]
    pub fn add_item(&mut self, item: ItemID) {
        self.fbb_
            .push_slot::<ItemID>(PokeDataEventBattle::VT_ITEM, item, ItemID::ITEMID_NONE);
    }
    #[inline]
    pub fn add_dropItem(&mut self, dropItem: ItemID) {
        self.fbb_.push_slot::<ItemID>(
            PokeDataEventBattle::VT_DROPITEM,
            dropItem,
            ItemID::ITEMID_NONE,
        );
    }
    #[inline]
    pub fn add_dropItemNum(&mut self, dropItemNum: i8) {
        self.fbb_
            .push_slot::<i8>(PokeDataEventBattle::VT_DROPITEMNUM, dropItemNum, 0);
    }
    #[inline]
    pub fn add_seikaku(&mut self, seikaku: SeikakuType) {
        self.fbb_.push_slot::<SeikakuType>(
            PokeDataEventBattle::VT_SEIKAKU,
            seikaku,
            SeikakuType::DEFAULT,
        );
    }
    #[inline]
    pub fn add_seikakuHosei(&mut self, seikakuHosei: SeikakuType) {
        self.fbb_.push_slot::<SeikakuType>(
            PokeDataEventBattle::VT_SEIKAKUHOSEI,
            seikakuHosei,
            SeikakuType::DEFAULT,
        );
    }
    #[inline]
    pub fn add_tokusei(&mut self, tokusei: TokuseiType) {
        self.fbb_.push_slot::<TokuseiType>(
            PokeDataEventBattle::VT_TOKUSEI,
            tokusei,
            TokuseiType::RANDOM_12,
        );
    }
    #[inline]
    pub fn add_wazaType(&mut self, wazaType: WazaType) {
        self.fbb_.push_slot::<WazaType>(
            PokeDataEventBattle::VT_WAZATYPE,
            wazaType,
            WazaType::DEFAULT,
        );
    }
    #[inline]
    pub fn add_waza1(&mut self, waza1: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(
                PokeDataEventBattle::VT_WAZA1,
                waza1,
            );
    }
    #[inline]
    pub fn add_waza2(&mut self, waza2: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(
                PokeDataEventBattle::VT_WAZA2,
                waza2,
            );
    }
    #[inline]
    pub fn add_waza3(&mut self, waza3: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(
                PokeDataEventBattle::VT_WAZA3,
                waza3,
            );
    }
    #[inline]
    pub fn add_waza4(&mut self, waza4: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(
                PokeDataEventBattle::VT_WAZA4,
                waza4,
            );
    }
    #[inline]
    pub fn add_gemType(&mut self, gemType: GemType) {
        self.fbb_
            .push_slot::<GemType>(PokeDataEventBattle::VT_GEMTYPE, gemType, GemType::DEFAULT);
    }
    #[inline]
    pub fn add_scaleType(&mut self, scaleType: SizeType) {
        self.fbb_.push_slot::<SizeType>(
            PokeDataEventBattle::VT_SCALETYPE,
            scaleType,
            SizeType::RANDOM,
        );
    }
    #[inline]
    pub fn add_scaleValue(&mut self, scaleValue: i16) {
        self.fbb_
            .push_slot::<i16>(PokeDataEventBattle::VT_SCALEVALUE, scaleValue, 0);
    }
    #[inline]
    pub fn add_setRibbon(&mut self, setRibbon: RibbonType) {
        self.fbb_.push_slot::<RibbonType>(
            PokeDataEventBattle::VT_SETRIBBON,
            setRibbon,
            RibbonType::NONE,
        );
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    ) -> PokeDataEventBattleBuilder<'a, 'b> {
        let start = _fbb.start_table();
        PokeDataEventBattleBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<PokeDataEventBattle<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for PokeDataEventBattle<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("PokeDataEventBattle");
        ds.field("devId", &self.devId());
        ds.field("formId", &self.formId());
        ds.field("sex", &self.sex());
        ds.field("level", &self.level());
        ds.field("rareType", &self.rareType());
        ds.field("talentType", &self.talentType());
        ds.field("talentVnum", &self.talentVnum());
        ds.field("talentValue", &self.talentValue());
        ds.field("effortValue", &self.effortValue());
        ds.field("item", &self.item());
        ds.field("dropItem", &self.dropItem());
        ds.field("dropItemNum", &self.dropItemNum());
        ds.field("seikaku", &self.seikaku());
        ds.field("seikakuHosei", &self.seikakuHosei());
        ds.field("tokusei", &self.tokusei());
        ds.field("wazaType", &self.wazaType());
        ds.field("waza1", &self.waza1());
        ds.field("waza2", &self.waza2());
        ds.field("waza3", &self.waza3());
        ds.field("waza4", &self.waza4());
        ds.field("gemType", &self.gemType());
        ds.field("scaleType", &self.scaleType());
        ds.field("scaleValue", &self.scaleValue());
        ds.field("setRibbon", &self.setRibbon());
        ds.finish()
    }
}
pub enum PokeDataFullOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PokeDataFull<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PokeDataFull<'a> {
    type Inner = PokeDataFull<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> PokeDataFull<'a> {
    pub const VT_DEVID: flatbuffers::VOffsetT = 4;
    pub const VT_FORMID: flatbuffers::VOffsetT = 6;
    pub const VT_ITEM: flatbuffers::VOffsetT = 8;
    pub const VT_LEVEL: flatbuffers::VOffsetT = 10;
    pub const VT_SEX: flatbuffers::VOffsetT = 12;
    pub const VT_SEIKAKU: flatbuffers::VOffsetT = 14;
    pub const VT_SEIKAKUHOSEI: flatbuffers::VOffsetT = 16;
    pub const VT_TOKUSEI: flatbuffers::VOffsetT = 18;
    pub const VT_RARETYPE: flatbuffers::VOffsetT = 20;
    pub const VT_RARETRYCOUNT: flatbuffers::VOffsetT = 22;
    pub const VT_TALENTTYPE: flatbuffers::VOffsetT = 24;
    pub const VT_TALENTVALUE: flatbuffers::VOffsetT = 26;
    pub const VT_TALENTVNUM: flatbuffers::VOffsetT = 28;
    pub const VT_EFFORTVALUE: flatbuffers::VOffsetT = 30;
    pub const VT_FRIENDSHIP: flatbuffers::VOffsetT = 32;
    pub const VT_HEIGHTTYPE: flatbuffers::VOffsetT = 34;
    pub const VT_HEIGNTVALUE: flatbuffers::VOffsetT = 36;
    pub const VT_WEIGHTTYPE: flatbuffers::VOffsetT = 38;
    pub const VT_WAIGHTVALUE: flatbuffers::VOffsetT = 40;
    pub const VT_SCALETYPE: flatbuffers::VOffsetT = 42;
    pub const VT_SCALEVALUE: flatbuffers::VOffsetT = 44;
    pub const VT_SETPERSONALRAND: flatbuffers::VOffsetT = 46;
    pub const VT_PERSONALRAND: flatbuffers::VOffsetT = 48;
    pub const VT_SETRANDSEED: flatbuffers::VOffsetT = 50;
    pub const VT_RANDSEED: flatbuffers::VOffsetT = 52;
    pub const VT_WAZATYPE: flatbuffers::VOffsetT = 54;
    pub const VT_WAZA1: flatbuffers::VOffsetT = 56;
    pub const VT_WAZA2: flatbuffers::VOffsetT = 58;
    pub const VT_WAZA3: flatbuffers::VOffsetT = 60;
    pub const VT_WAZA4: flatbuffers::VOffsetT = 62;
    pub const VT_USENICKNAME: flatbuffers::VOffsetT = 64;
    pub const VT_NICKNAMELABEL: flatbuffers::VOffsetT = 66;
    pub const VT_PARENTNAMELABEL: flatbuffers::VOffsetT = 68;
    pub const VT_PARENTSEX: flatbuffers::VOffsetT = 70;
    pub const VT_PARENTLANGID: flatbuffers::VOffsetT = 72;
    pub const VT_PARENTMEMORYCODE: flatbuffers::VOffsetT = 74;
    pub const VT_PARENTMEMORYDATA: flatbuffers::VOffsetT = 76;
    pub const VT_PARENTMEMORYFEEL: flatbuffers::VOffsetT = 78;
    pub const VT_PARENTMEMORYLEVEL: flatbuffers::VOffsetT = 80;
    pub const VT_LANGID: flatbuffers::VOffsetT = 82;
    pub const VT_BALLID: flatbuffers::VOffsetT = 84;
    pub const VT_SETRIBBON: flatbuffers::VOffsetT = 86;
    pub const VT_EVENTFLG: flatbuffers::VOffsetT = 88;
    pub const VT_GEMTYPE: flatbuffers::VOffsetT = 90;
    pub const VT_WAZACONFIRMLEVEL: flatbuffers::VOffsetT = 92;
    pub const VT_POKEMEMO: flatbuffers::VOffsetT = 94;
    pub const VT_POKEMEMOPLACE: flatbuffers::VOffsetT = 96;
    pub const VT_TRAINERID: flatbuffers::VOffsetT = 98;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        PokeDataFull { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args PokeDataFullArgs<'args>,
    ) -> flatbuffers::WIPOffset<PokeDataFull<'bldr>> {
        let mut builder = PokeDataFullBuilder::new(_fbb);
        builder.add_trainerId(args.trainerId);
        builder.add_parentNameLabel(args.parentNameLabel);
        builder.add_nicknameLabel(args.nicknameLabel);
        builder.add_randSeed(args.randSeed);
        builder.add_personalRand(args.personalRand);
        builder.add_pokememoPlace(args.pokememoPlace);
        builder.add_gemType(args.gemType);
        builder.add_setRibbon(args.setRibbon);
        builder.add_ballId(args.ballId);
        builder.add_langId(args.langId);
        builder.add_parentMemoryLevel(args.parentMemoryLevel);
        builder.add_parentMemoryFeel(args.parentMemoryFeel);
        builder.add_parentMemoryData(args.parentMemoryData);
        builder.add_parentMemoryCode(args.parentMemoryCode);
        builder.add_parentLangId(args.parentLangId);
        builder.add_parentSex(args.parentSex);
        if let Some(x) = args.waza4 {
            builder.add_waza4(x);
        }
        if let Some(x) = args.waza3 {
            builder.add_waza3(x);
        }
        if let Some(x) = args.waza2 {
            builder.add_waza2(x);
        }
        if let Some(x) = args.waza1 {
            builder.add_waza1(x);
        }
        builder.add_wazaType(args.wazaType);
        builder.add_scaleType(args.scaleType);
        builder.add_weightType(args.weightType);
        builder.add_heightType(args.heightType);
        builder.add_friendship(args.friendship);
        if let Some(x) = args.effortValue {
            builder.add_effortValue(x);
        }
        if let Some(x) = args.talentValue {
            builder.add_talentValue(x);
        }
        builder.add_talentType(args.talentType);
        builder.add_rareTryCount(args.rareTryCount);
        builder.add_rareType(args.rareType);
        builder.add_tokusei(args.tokusei);
        builder.add_seikakuHosei(args.seikakuHosei);
        builder.add_seikaku(args.seikaku);
        builder.add_sex(args.sex);
        builder.add_level(args.level);
        builder.add_item(args.item);
        builder.add_scaleValue(args.scaleValue);
        builder.add_waightValue(args.waightValue);
        builder.add_heigntValue(args.heigntValue);
        builder.add_formId(args.formId);
        builder.add_devId(args.devId);
        builder.add_pokememo(args.pokememo);
        builder.add_wazaConfirmLevel(args.wazaConfirmLevel);
        builder.add_eventFlg(args.eventFlg);
        builder.add_useNickName(args.useNickName);
        builder.add_setRandSeed(args.setRandSeed);
        builder.add_setPersonalRand(args.setPersonalRand);
        builder.add_talentVnum(args.talentVnum);
        builder.finish()
    }

    #[inline]
    pub fn devId(&self) -> pml::common::DevID {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<pml::common::DevID>(
                    PokeDataFull::VT_DEVID,
                    Some(pml::common::DevID::DEV_NULL),
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn formId(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(PokeDataFull::VT_FORMID, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn item(&self) -> ItemID {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<ItemID>(PokeDataFull::VT_ITEM, Some(ItemID::ITEMID_NONE))
                .unwrap()
        }
    }
    #[inline]
    pub fn level(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(PokeDataFull::VT_LEVEL, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn sex(&self) -> SexType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SexType>(PokeDataFull::VT_SEX, Some(SexType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn seikaku(&self) -> SeikakuType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SeikakuType>(PokeDataFull::VT_SEIKAKU, Some(SeikakuType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn seikakuHosei(&self) -> SeikakuType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SeikakuType>(PokeDataFull::VT_SEIKAKUHOSEI, Some(SeikakuType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn tokusei(&self) -> TokuseiType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<TokuseiType>(PokeDataFull::VT_TOKUSEI, Some(TokuseiType::RANDOM_12))
                .unwrap()
        }
    }
    #[inline]
    pub fn rareType(&self) -> RareType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<RareType>(PokeDataFull::VT_RARETYPE, Some(RareType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn rareTryCount(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(PokeDataFull::VT_RARETRYCOUNT, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn talentType(&self) -> TalentType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<TalentType>(PokeDataFull::VT_TALENTTYPE, Some(TalentType::RANDOM))
                .unwrap()
        }
    }
    #[inline]
    pub fn talentValue(&self) -> ParamSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<ParamSet>>(PokeDataFull::VT_TALENTVALUE, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn talentVnum(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(PokeDataFull::VT_TALENTVNUM, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn effortValue(&self) -> ParamSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<ParamSet>>(PokeDataFull::VT_EFFORTVALUE, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn friendship(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(PokeDataFull::VT_FRIENDSHIP, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn heightType(&self) -> SizeType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SizeType>(PokeDataFull::VT_HEIGHTTYPE, Some(SizeType::RANDOM))
                .unwrap()
        }
    }
    #[inline]
    pub fn heigntValue(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(PokeDataFull::VT_HEIGNTVALUE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn weightType(&self) -> SizeType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SizeType>(PokeDataFull::VT_WEIGHTTYPE, Some(SizeType::RANDOM))
                .unwrap()
        }
    }
    #[inline]
    pub fn waightValue(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(PokeDataFull::VT_WAIGHTVALUE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn scaleType(&self) -> SizeType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SizeType>(PokeDataFull::VT_SCALETYPE, Some(SizeType::RANDOM))
                .unwrap()
        }
    }
    #[inline]
    pub fn scaleValue(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(PokeDataFull::VT_SCALEVALUE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn setPersonalRand(&self) -> bool {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<bool>(PokeDataFull::VT_SETPERSONALRAND, Some(false))
                .unwrap()
        }
    }
    #[inline]
    pub fn personalRand(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u64>(PokeDataFull::VT_PERSONALRAND, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn setRandSeed(&self) -> bool {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<bool>(PokeDataFull::VT_SETRANDSEED, Some(false))
                .unwrap()
        }
    }
    #[inline]
    pub fn randSeed(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u64>(PokeDataFull::VT_RANDSEED, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn wazaType(&self) -> WazaType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<WazaType>(PokeDataFull::VT_WAZATYPE, Some(WazaType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn waza1(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataFull::VT_WAZA1, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn waza2(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataFull::VT_WAZA2, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn waza3(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataFull::VT_WAZA3, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn waza4(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataFull::VT_WAZA4, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn useNickName(&self) -> bool {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<bool>(PokeDataFull::VT_USENICKNAME, Some(false))
                .unwrap()
        }
    }
    #[inline]
    pub fn nicknameLabel(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u64>(PokeDataFull::VT_NICKNAMELABEL, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn parentNameLabel(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u64>(PokeDataFull::VT_PARENTNAMELABEL, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn parentSex(&self) -> SexType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SexType>(PokeDataFull::VT_PARENTSEX, Some(SexType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn parentLangId(&self) -> LangType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<LangType>(PokeDataFull::VT_PARENTLANGID, Some(LangType::ROM_LANG))
                .unwrap()
        }
    }
    #[inline]
    pub fn parentMemoryCode(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(PokeDataFull::VT_PARENTMEMORYCODE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn parentMemoryData(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(PokeDataFull::VT_PARENTMEMORYDATA, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn parentMemoryFeel(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(PokeDataFull::VT_PARENTMEMORYFEEL, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn parentMemoryLevel(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(PokeDataFull::VT_PARENTMEMORYLEVEL, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn langId(&self) -> LangType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<LangType>(PokeDataFull::VT_LANGID, Some(LangType::ROM_LANG))
                .unwrap()
        }
    }
    #[inline]
    pub fn ballId(&self) -> BallType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<BallType>(PokeDataFull::VT_BALLID, Some(BallType::NONE))
                .unwrap()
        }
    }
    #[inline]
    pub fn setRibbon(&self) -> RibbonType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<RibbonType>(PokeDataFull::VT_SETRIBBON, Some(RibbonType::NONE))
                .unwrap()
        }
    }
    #[inline]
    pub fn eventFlg(&self) -> bool {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<bool>(PokeDataFull::VT_EVENTFLG, Some(false))
                .unwrap()
        }
    }
    #[inline]
    pub fn gemType(&self) -> GemType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<GemType>(PokeDataFull::VT_GEMTYPE, Some(GemType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn wazaConfirmLevel(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(PokeDataFull::VT_WAZACONFIRMLEVEL, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn pokememo(&self) -> PokeMemoType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<PokeMemoType>(PokeDataFull::VT_POKEMEMO, Some(PokeMemoType::NONE))
                .unwrap()
        }
    }
    #[inline]
    pub fn pokememoPlace(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(PokeDataFull::VT_POKEMEMOPLACE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn trainerId(&self) -> i64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i64>(PokeDataFull::VT_TRAINERID, Some(0))
                .unwrap()
        }
    }
}

impl flatbuffers::Verifiable for PokeDataFull<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<pml::common::DevID>("devId", Self::VT_DEVID, false)?
            .visit_field::<i16>("formId", Self::VT_FORMID, false)?
            .visit_field::<ItemID>("item", Self::VT_ITEM, false)?
            .visit_field::<i32>("level", Self::VT_LEVEL, false)?
            .visit_field::<SexType>("sex", Self::VT_SEX, false)?
            .visit_field::<SeikakuType>("seikaku", Self::VT_SEIKAKU, false)?
            .visit_field::<SeikakuType>("seikakuHosei", Self::VT_SEIKAKUHOSEI, false)?
            .visit_field::<TokuseiType>("tokusei", Self::VT_TOKUSEI, false)?
            .visit_field::<RareType>("rareType", Self::VT_RARETYPE, false)?
            .visit_field::<i32>("rareTryCount", Self::VT_RARETRYCOUNT, false)?
            .visit_field::<TalentType>("talentType", Self::VT_TALENTTYPE, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<ParamSet>>(
                "talentValue",
                Self::VT_TALENTVALUE,
                false,
            )?
            .visit_field::<i8>("talentVnum", Self::VT_TALENTVNUM, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<ParamSet>>(
                "effortValue",
                Self::VT_EFFORTVALUE,
                false,
            )?
            .visit_field::<i32>("friendship", Self::VT_FRIENDSHIP, false)?
            .visit_field::<SizeType>("heightType", Self::VT_HEIGHTTYPE, false)?
            .visit_field::<i16>("heigntValue", Self::VT_HEIGNTVALUE, false)?
            .visit_field::<SizeType>("weightType", Self::VT_WEIGHTTYPE, false)?
            .visit_field::<i16>("waightValue", Self::VT_WAIGHTVALUE, false)?
            .visit_field::<SizeType>("scaleType", Self::VT_SCALETYPE, false)?
            .visit_field::<i16>("scaleValue", Self::VT_SCALEVALUE, false)?
            .visit_field::<bool>("setPersonalRand", Self::VT_SETPERSONALRAND, false)?
            .visit_field::<u64>("personalRand", Self::VT_PERSONALRAND, false)?
            .visit_field::<bool>("setRandSeed", Self::VT_SETRANDSEED, false)?
            .visit_field::<u64>("randSeed", Self::VT_RANDSEED, false)?
            .visit_field::<WazaType>("wazaType", Self::VT_WAZATYPE, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza1", Self::VT_WAZA1, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza2", Self::VT_WAZA2, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza3", Self::VT_WAZA3, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza4", Self::VT_WAZA4, false)?
            .visit_field::<bool>("useNickName", Self::VT_USENICKNAME, false)?
            .visit_field::<u64>("nicknameLabel", Self::VT_NICKNAMELABEL, false)?
            .visit_field::<u64>("parentNameLabel", Self::VT_PARENTNAMELABEL, false)?
            .visit_field::<SexType>("parentSex", Self::VT_PARENTSEX, false)?
            .visit_field::<LangType>("parentLangId", Self::VT_PARENTLANGID, false)?
            .visit_field::<i32>("parentMemoryCode", Self::VT_PARENTMEMORYCODE, false)?
            .visit_field::<i32>("parentMemoryData", Self::VT_PARENTMEMORYDATA, false)?
            .visit_field::<i32>("parentMemoryFeel", Self::VT_PARENTMEMORYFEEL, false)?
            .visit_field::<i32>("parentMemoryLevel", Self::VT_PARENTMEMORYLEVEL, false)?
            .visit_field::<LangType>("langId", Self::VT_LANGID, false)?
            .visit_field::<BallType>("ballId", Self::VT_BALLID, false)?
            .visit_field::<RibbonType>("setRibbon", Self::VT_SETRIBBON, false)?
            .visit_field::<bool>("eventFlg", Self::VT_EVENTFLG, false)?
            .visit_field::<GemType>("gemType", Self::VT_GEMTYPE, false)?
            .visit_field::<i8>("wazaConfirmLevel", Self::VT_WAZACONFIRMLEVEL, false)?
            .visit_field::<PokeMemoType>("pokememo", Self::VT_POKEMEMO, false)?
            .visit_field::<i32>("pokememoPlace", Self::VT_POKEMEMOPLACE, false)?
            .visit_field::<i64>("trainerId", Self::VT_TRAINERID, false)?
            .finish();
        Ok(())
    }
}
pub struct PokeDataFullArgs<'a> {
    pub devId: pml::common::DevID,
    pub formId: i16,
    pub item: ItemID,
    pub level: i32,
    pub sex: SexType,
    pub seikaku: SeikakuType,
    pub seikakuHosei: SeikakuType,
    pub tokusei: TokuseiType,
    pub rareType: RareType,
    pub rareTryCount: i32,
    pub talentType: TalentType,
    pub talentValue: Option<flatbuffers::WIPOffset<ParamSet<'a>>>,
    pub talentVnum: i8,
    pub effortValue: Option<flatbuffers::WIPOffset<ParamSet<'a>>>,
    pub friendship: i32,
    pub heightType: SizeType,
    pub heigntValue: i16,
    pub weightType: SizeType,
    pub waightValue: i16,
    pub scaleType: SizeType,
    pub scaleValue: i16,
    pub setPersonalRand: bool,
    pub personalRand: u64,
    pub setRandSeed: bool,
    pub randSeed: u64,
    pub wazaType: WazaType,
    pub waza1: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub waza2: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub waza3: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub waza4: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub useNickName: bool,
    pub nicknameLabel: u64,
    pub parentNameLabel: u64,
    pub parentSex: SexType,
    pub parentLangId: LangType,
    pub parentMemoryCode: i32,
    pub parentMemoryData: i32,
    pub parentMemoryFeel: i32,
    pub parentMemoryLevel: i32,
    pub langId: LangType,
    pub ballId: BallType,
    pub setRibbon: RibbonType,
    pub eventFlg: bool,
    pub gemType: GemType,
    pub wazaConfirmLevel: i8,
    pub pokememo: PokeMemoType,
    pub pokememoPlace: i32,
    pub trainerId: i64,
}
impl<'a> Default for PokeDataFullArgs<'a> {
    #[inline]
    fn default() -> Self {
        PokeDataFullArgs {
            devId: pml::common::DevID::DEV_NULL,
            formId: 0,
            item: ItemID::ITEMID_NONE,
            level: 0,
            sex: SexType::DEFAULT,
            seikaku: SeikakuType::DEFAULT,
            seikakuHosei: SeikakuType::DEFAULT,
            tokusei: TokuseiType::RANDOM_12,
            rareType: RareType::DEFAULT,
            rareTryCount: 0,
            talentType: TalentType::RANDOM,
            talentValue: None,
            talentVnum: 0,
            effortValue: None,
            friendship: 0,
            heightType: SizeType::RANDOM,
            heigntValue: 0,
            weightType: SizeType::RANDOM,
            waightValue: 0,
            scaleType: SizeType::RANDOM,
            scaleValue: 0,
            setPersonalRand: false,
            personalRand: 0,
            setRandSeed: false,
            randSeed: 0,
            wazaType: WazaType::DEFAULT,
            waza1: None,
            waza2: None,
            waza3: None,
            waza4: None,
            useNickName: false,
            nicknameLabel: 0,
            parentNameLabel: 0,
            parentSex: SexType::DEFAULT,
            parentLangId: LangType::ROM_LANG,
            parentMemoryCode: 0,
            parentMemoryData: 0,
            parentMemoryFeel: 0,
            parentMemoryLevel: 0,
            langId: LangType::ROM_LANG,
            ballId: BallType::NONE,
            setRibbon: RibbonType::NONE,
            eventFlg: false,
            gemType: GemType::DEFAULT,
            wazaConfirmLevel: 0,
            pokememo: PokeMemoType::NONE,
            pokememoPlace: 0,
            trainerId: 0,
        }
    }
}

pub struct PokeDataFullBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PokeDataFullBuilder<'a, 'b> {
    #[inline]
    pub fn add_devId(&mut self, devId: pml::common::DevID) {
        self.fbb_.push_slot::<pml::common::DevID>(
            PokeDataFull::VT_DEVID,
            devId,
            pml::common::DevID::DEV_NULL,
        );
    }
    #[inline]
    pub fn add_formId(&mut self, formId: i16) {
        self.fbb_
            .push_slot::<i16>(PokeDataFull::VT_FORMID, formId, 0);
    }
    #[inline]
    pub fn add_item(&mut self, item: ItemID) {
        self.fbb_
            .push_slot::<ItemID>(PokeDataFull::VT_ITEM, item, ItemID::ITEMID_NONE);
    }
    #[inline]
    pub fn add_level(&mut self, level: i32) {
        self.fbb_.push_slot::<i32>(PokeDataFull::VT_LEVEL, level, 0);
    }
    #[inline]
    pub fn add_sex(&mut self, sex: SexType) {
        self.fbb_
            .push_slot::<SexType>(PokeDataFull::VT_SEX, sex, SexType::DEFAULT);
    }
    #[inline]
    pub fn add_seikaku(&mut self, seikaku: SeikakuType) {
        self.fbb_
            .push_slot::<SeikakuType>(PokeDataFull::VT_SEIKAKU, seikaku, SeikakuType::DEFAULT);
    }
    #[inline]
    pub fn add_seikakuHosei(&mut self, seikakuHosei: SeikakuType) {
        self.fbb_.push_slot::<SeikakuType>(
            PokeDataFull::VT_SEIKAKUHOSEI,
            seikakuHosei,
            SeikakuType::DEFAULT,
        );
    }
    #[inline]
    pub fn add_tokusei(&mut self, tokusei: TokuseiType) {
        self.fbb_.push_slot::<TokuseiType>(
            PokeDataFull::VT_TOKUSEI,
            tokusei,
            TokuseiType::RANDOM_12,
        );
    }
    #[inline]
    pub fn add_rareType(&mut self, rareType: RareType) {
        self.fbb_
            .push_slot::<RareType>(PokeDataFull::VT_RARETYPE, rareType, RareType::DEFAULT);
    }
    #[inline]
    pub fn add_rareTryCount(&mut self, rareTryCount: i32) {
        self.fbb_
            .push_slot::<i32>(PokeDataFull::VT_RARETRYCOUNT, rareTryCount, 0);
    }
    #[inline]
    pub fn add_talentType(&mut self, talentType: TalentType) {
        self.fbb_.push_slot::<TalentType>(
            PokeDataFull::VT_TALENTTYPE,
            talentType,
            TalentType::RANDOM,
        );
    }
    #[inline]
    pub fn add_talentValue(&mut self, talentValue: flatbuffers::WIPOffset<ParamSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<ParamSet>>(
                PokeDataFull::VT_TALENTVALUE,
                talentValue,
            );
    }
    #[inline]
    pub fn add_talentVnum(&mut self, talentVnum: i8) {
        self.fbb_
            .push_slot::<i8>(PokeDataFull::VT_TALENTVNUM, talentVnum, 0);
    }
    #[inline]
    pub fn add_effortValue(&mut self, effortValue: flatbuffers::WIPOffset<ParamSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<ParamSet>>(
                PokeDataFull::VT_EFFORTVALUE,
                effortValue,
            );
    }
    #[inline]
    pub fn add_friendship(&mut self, friendship: i32) {
        self.fbb_
            .push_slot::<i32>(PokeDataFull::VT_FRIENDSHIP, friendship, 0);
    }
    #[inline]
    pub fn add_heightType(&mut self, heightType: SizeType) {
        self.fbb_
            .push_slot::<SizeType>(PokeDataFull::VT_HEIGHTTYPE, heightType, SizeType::RANDOM);
    }
    #[inline]
    pub fn add_heigntValue(&mut self, heigntValue: i16) {
        self.fbb_
            .push_slot::<i16>(PokeDataFull::VT_HEIGNTVALUE, heigntValue, 0);
    }
    #[inline]
    pub fn add_weightType(&mut self, weightType: SizeType) {
        self.fbb_
            .push_slot::<SizeType>(PokeDataFull::VT_WEIGHTTYPE, weightType, SizeType::RANDOM);
    }
    #[inline]
    pub fn add_waightValue(&mut self, waightValue: i16) {
        self.fbb_
            .push_slot::<i16>(PokeDataFull::VT_WAIGHTVALUE, waightValue, 0);
    }
    #[inline]
    pub fn add_scaleType(&mut self, scaleType: SizeType) {
        self.fbb_
            .push_slot::<SizeType>(PokeDataFull::VT_SCALETYPE, scaleType, SizeType::RANDOM);
    }
    #[inline]
    pub fn add_scaleValue(&mut self, scaleValue: i16) {
        self.fbb_
            .push_slot::<i16>(PokeDataFull::VT_SCALEVALUE, scaleValue, 0);
    }
    #[inline]
    pub fn add_setPersonalRand(&mut self, setPersonalRand: bool) {
        self.fbb_
            .push_slot::<bool>(PokeDataFull::VT_SETPERSONALRAND, setPersonalRand, false);
    }
    #[inline]
    pub fn add_personalRand(&mut self, personalRand: u64) {
        self.fbb_
            .push_slot::<u64>(PokeDataFull::VT_PERSONALRAND, personalRand, 0);
    }
    #[inline]
    pub fn add_setRandSeed(&mut self, setRandSeed: bool) {
        self.fbb_
            .push_slot::<bool>(PokeDataFull::VT_SETRANDSEED, setRandSeed, false);
    }
    #[inline]
    pub fn add_randSeed(&mut self, randSeed: u64) {
        self.fbb_
            .push_slot::<u64>(PokeDataFull::VT_RANDSEED, randSeed, 0);
    }
    #[inline]
    pub fn add_wazaType(&mut self, wazaType: WazaType) {
        self.fbb_
            .push_slot::<WazaType>(PokeDataFull::VT_WAZATYPE, wazaType, WazaType::DEFAULT);
    }
    #[inline]
    pub fn add_waza1(&mut self, waza1: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(PokeDataFull::VT_WAZA1, waza1);
    }
    #[inline]
    pub fn add_waza2(&mut self, waza2: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(PokeDataFull::VT_WAZA2, waza2);
    }
    #[inline]
    pub fn add_waza3(&mut self, waza3: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(PokeDataFull::VT_WAZA3, waza3);
    }
    #[inline]
    pub fn add_waza4(&mut self, waza4: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(PokeDataFull::VT_WAZA4, waza4);
    }
    #[inline]
    pub fn add_useNickName(&mut self, useNickName: bool) {
        self.fbb_
            .push_slot::<bool>(PokeDataFull::VT_USENICKNAME, useNickName, false);
    }
    #[inline]
    pub fn add_nicknameLabel(&mut self, nicknameLabel: u64) {
        self.fbb_
            .push_slot::<u64>(PokeDataFull::VT_NICKNAMELABEL, nicknameLabel, 0);
    }
    #[inline]
    pub fn add_parentNameLabel(&mut self, parentNameLabel: u64) {
        self.fbb_
            .push_slot::<u64>(PokeDataFull::VT_PARENTNAMELABEL, parentNameLabel, 0);
    }
    #[inline]
    pub fn add_parentSex(&mut self, parentSex: SexType) {
        self.fbb_
            .push_slot::<SexType>(PokeDataFull::VT_PARENTSEX, parentSex, SexType::DEFAULT);
    }
    #[inline]
    pub fn add_parentLangId(&mut self, parentLangId: LangType) {
        self.fbb_.push_slot::<LangType>(
            PokeDataFull::VT_PARENTLANGID,
            parentLangId,
            LangType::ROM_LANG,
        );
    }
    #[inline]
    pub fn add_parentMemoryCode(&mut self, parentMemoryCode: i32) {
        self.fbb_
            .push_slot::<i32>(PokeDataFull::VT_PARENTMEMORYCODE, parentMemoryCode, 0);
    }
    #[inline]
    pub fn add_parentMemoryData(&mut self, parentMemoryData: i32) {
        self.fbb_
            .push_slot::<i32>(PokeDataFull::VT_PARENTMEMORYDATA, parentMemoryData, 0);
    }
    #[inline]
    pub fn add_parentMemoryFeel(&mut self, parentMemoryFeel: i32) {
        self.fbb_
            .push_slot::<i32>(PokeDataFull::VT_PARENTMEMORYFEEL, parentMemoryFeel, 0);
    }
    #[inline]
    pub fn add_parentMemoryLevel(&mut self, parentMemoryLevel: i32) {
        self.fbb_
            .push_slot::<i32>(PokeDataFull::VT_PARENTMEMORYLEVEL, parentMemoryLevel, 0);
    }
    #[inline]
    pub fn add_langId(&mut self, langId: LangType) {
        self.fbb_
            .push_slot::<LangType>(PokeDataFull::VT_LANGID, langId, LangType::ROM_LANG);
    }
    #[inline]
    pub fn add_ballId(&mut self, ballId: BallType) {
        self.fbb_
            .push_slot::<BallType>(PokeDataFull::VT_BALLID, ballId, BallType::NONE);
    }
    #[inline]
    pub fn add_setRibbon(&mut self, setRibbon: RibbonType) {
        self.fbb_
            .push_slot::<RibbonType>(PokeDataFull::VT_SETRIBBON, setRibbon, RibbonType::NONE);
    }
    #[inline]
    pub fn add_eventFlg(&mut self, eventFlg: bool) {
        self.fbb_
            .push_slot::<bool>(PokeDataFull::VT_EVENTFLG, eventFlg, false);
    }
    #[inline]
    pub fn add_gemType(&mut self, gemType: GemType) {
        self.fbb_
            .push_slot::<GemType>(PokeDataFull::VT_GEMTYPE, gemType, GemType::DEFAULT);
    }
    #[inline]
    pub fn add_wazaConfirmLevel(&mut self, wazaConfirmLevel: i8) {
        self.fbb_
            .push_slot::<i8>(PokeDataFull::VT_WAZACONFIRMLEVEL, wazaConfirmLevel, 0);
    }
    #[inline]
    pub fn add_pokememo(&mut self, pokememo: PokeMemoType) {
        self.fbb_.push_slot::<PokeMemoType>(
            PokeDataFull::VT_POKEMEMO,
            pokememo,
            PokeMemoType::NONE,
        );
    }
    #[inline]
    pub fn add_pokememoPlace(&mut self, pokememoPlace: i32) {
        self.fbb_
            .push_slot::<i32>(PokeDataFull::VT_POKEMEMOPLACE, pokememoPlace, 0);
    }
    #[inline]
    pub fn add_trainerId(&mut self, trainerId: i64) {
        self.fbb_
            .push_slot::<i64>(PokeDataFull::VT_TRAINERID, trainerId, 0);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PokeDataFullBuilder<'a, 'b> {
        let start = _fbb.start_table();
        PokeDataFullBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<PokeDataFull<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for PokeDataFull<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("PokeDataFull");
        ds.field("devId", &self.devId());
        ds.field("formId", &self.formId());
        ds.field("item", &self.item());
        ds.field("level", &self.level());
        ds.field("sex", &self.sex());
        ds.field("seikaku", &self.seikaku());
        ds.field("seikakuHosei", &self.seikakuHosei());
        ds.field("tokusei", &self.tokusei());
        ds.field("rareType", &self.rareType());
        ds.field("rareTryCount", &self.rareTryCount());
        ds.field("talentType", &self.talentType());
        ds.field("talentValue", &self.talentValue());
        ds.field("talentVnum", &self.talentVnum());
        ds.field("effortValue", &self.effortValue());
        ds.field("friendship", &self.friendship());
        ds.field("heightType", &self.heightType());
        ds.field("heigntValue", &self.heigntValue());
        ds.field("weightType", &self.weightType());
        ds.field("waightValue", &self.waightValue());
        ds.field("scaleType", &self.scaleType());
        ds.field("scaleValue", &self.scaleValue());
        ds.field("setPersonalRand", &self.setPersonalRand());
        ds.field("personalRand", &self.personalRand());
        ds.field("setRandSeed", &self.setRandSeed());
        ds.field("randSeed", &self.randSeed());
        ds.field("wazaType", &self.wazaType());
        ds.field("waza1", &self.waza1());
        ds.field("waza2", &self.waza2());
        ds.field("waza3", &self.waza3());
        ds.field("waza4", &self.waza4());
        ds.field("useNickName", &self.useNickName());
        ds.field("nicknameLabel", &self.nicknameLabel());
        ds.field("parentNameLabel", &self.parentNameLabel());
        ds.field("parentSex", &self.parentSex());
        ds.field("parentLangId", &self.parentLangId());
        ds.field("parentMemoryCode", &self.parentMemoryCode());
        ds.field("parentMemoryData", &self.parentMemoryData());
        ds.field("parentMemoryFeel", &self.parentMemoryFeel());
        ds.field("parentMemoryLevel", &self.parentMemoryLevel());
        ds.field("langId", &self.langId());
        ds.field("ballId", &self.ballId());
        ds.field("setRibbon", &self.setRibbon());
        ds.field("eventFlg", &self.eventFlg());
        ds.field("gemType", &self.gemType());
        ds.field("wazaConfirmLevel", &self.wazaConfirmLevel());
        ds.field("pokememo", &self.pokememo());
        ds.field("pokememoPlace", &self.pokememoPlace());
        ds.field("trainerId", &self.trainerId());
        ds.finish()
    }
}
pub enum PokeDataSymbolOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PokeDataSymbol<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PokeDataSymbol<'a> {
    type Inner = PokeDataSymbol<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> PokeDataSymbol<'a> {
    pub const VT_DEVID: flatbuffers::VOffsetT = 4;
    pub const VT_FORMID: flatbuffers::VOffsetT = 6;
    pub const VT_LEVEL: flatbuffers::VOffsetT = 8;
    pub const VT_SEX: flatbuffers::VOffsetT = 10;
    pub const VT_RARETYPE: flatbuffers::VOffsetT = 12;
    pub const VT_TALENTTYPE: flatbuffers::VOffsetT = 14;
    pub const VT_TALENTVALUE: flatbuffers::VOffsetT = 16;
    pub const VT_TALENTVNUM: flatbuffers::VOffsetT = 18;
    pub const VT_WAZATYPE: flatbuffers::VOffsetT = 20;
    pub const VT_WAZA1: flatbuffers::VOffsetT = 22;
    pub const VT_WAZA2: flatbuffers::VOffsetT = 24;
    pub const VT_WAZA3: flatbuffers::VOffsetT = 26;
    pub const VT_WAZA4: flatbuffers::VOffsetT = 28;
    pub const VT_TOKUSEIINDEX: flatbuffers::VOffsetT = 30;
    pub const VT_SCALETYPE: flatbuffers::VOffsetT = 32;
    pub const VT_SCALEVALUE: flatbuffers::VOffsetT = 34;
    pub const VT_GEMTYPE: flatbuffers::VOffsetT = 36;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        PokeDataSymbol { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args PokeDataSymbolArgs<'args>,
    ) -> flatbuffers::WIPOffset<PokeDataSymbol<'bldr>> {
        let mut builder = PokeDataSymbolBuilder::new(_fbb);
        builder.add_gemType(args.gemType);
        builder.add_scaleType(args.scaleType);
        builder.add_tokuseiIndex(args.tokuseiIndex);
        if let Some(x) = args.waza4 {
            builder.add_waza4(x);
        }
        if let Some(x) = args.waza3 {
            builder.add_waza3(x);
        }
        if let Some(x) = args.waza2 {
            builder.add_waza2(x);
        }
        if let Some(x) = args.waza1 {
            builder.add_waza1(x);
        }
        builder.add_wazaType(args.wazaType);
        if let Some(x) = args.talentValue {
            builder.add_talentValue(x);
        }
        builder.add_talentType(args.talentType);
        builder.add_rareType(args.rareType);
        builder.add_sex(args.sex);
        builder.add_level(args.level);
        builder.add_scaleValue(args.scaleValue);
        builder.add_formId(args.formId);
        builder.add_devId(args.devId);
        builder.add_talentVNum(args.talentVNum);
        builder.finish()
    }

    #[inline]
    pub fn devId(&self) -> pml::common::DevID {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<pml::common::DevID>(
                    PokeDataSymbol::VT_DEVID,
                    Some(pml::common::DevID::DEV_NULL),
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn formId(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(PokeDataSymbol::VT_FORMID, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn level(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(PokeDataSymbol::VT_LEVEL, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn sex(&self) -> SexType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SexType>(PokeDataSymbol::VT_SEX, Some(SexType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn rareType(&self) -> RareType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<RareType>(PokeDataSymbol::VT_RARETYPE, Some(RareType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn talentType(&self) -> TalentType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<TalentType>(PokeDataSymbol::VT_TALENTTYPE, Some(TalentType::RANDOM))
                .unwrap()
        }
    }
    #[inline]
    pub fn talentValue(&self) -> ParamSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<ParamSet>>(PokeDataSymbol::VT_TALENTVALUE, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn talentVNum(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(PokeDataSymbol::VT_TALENTVNUM, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn wazaType(&self) -> WazaType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<WazaType>(PokeDataSymbol::VT_WAZATYPE, Some(WazaType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn waza1(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataSymbol::VT_WAZA1, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn waza2(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataSymbol::VT_WAZA2, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn waza3(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataSymbol::VT_WAZA3, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn waza4(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataSymbol::VT_WAZA4, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn tokuseiIndex(&self) -> TokuseiType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<TokuseiType>(
                    PokeDataSymbol::VT_TOKUSEIINDEX,
                    Some(TokuseiType::RANDOM_12),
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn scaleType(&self) -> SizeType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SizeType>(PokeDataSymbol::VT_SCALETYPE, Some(SizeType::RANDOM))
                .unwrap()
        }
    }
    #[inline]
    pub fn scaleValue(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(PokeDataSymbol::VT_SCALEVALUE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn gemType(&self) -> GemType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<GemType>(PokeDataSymbol::VT_GEMTYPE, Some(GemType::DEFAULT))
                .unwrap()
        }
    }
}

impl flatbuffers::Verifiable for PokeDataSymbol<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<pml::common::DevID>("devId", Self::VT_DEVID, false)?
            .visit_field::<i16>("formId", Self::VT_FORMID, false)?
            .visit_field::<i32>("level", Self::VT_LEVEL, false)?
            .visit_field::<SexType>("sex", Self::VT_SEX, false)?
            .visit_field::<RareType>("rareType", Self::VT_RARETYPE, false)?
            .visit_field::<TalentType>("talentType", Self::VT_TALENTTYPE, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<ParamSet>>(
                "talentValue",
                Self::VT_TALENTVALUE,
                false,
            )?
            .visit_field::<i8>("talentVNum", Self::VT_TALENTVNUM, false)?
            .visit_field::<WazaType>("wazaType", Self::VT_WAZATYPE, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza1", Self::VT_WAZA1, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza2", Self::VT_WAZA2, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza3", Self::VT_WAZA3, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza4", Self::VT_WAZA4, false)?
            .visit_field::<TokuseiType>("tokuseiIndex", Self::VT_TOKUSEIINDEX, false)?
            .visit_field::<SizeType>("scaleType", Self::VT_SCALETYPE, false)?
            .visit_field::<i16>("scaleValue", Self::VT_SCALEVALUE, false)?
            .visit_field::<GemType>("gemType", Self::VT_GEMTYPE, false)?
            .finish();
        Ok(())
    }
}
pub struct PokeDataSymbolArgs<'a> {
    pub devId: pml::common::DevID,
    pub formId: i16,
    pub level: i32,
    pub sex: SexType,
    pub rareType: RareType,
    pub talentType: TalentType,
    pub talentValue: Option<flatbuffers::WIPOffset<ParamSet<'a>>>,
    pub talentVNum: i8,
    pub wazaType: WazaType,
    pub waza1: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub waza2: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub waza3: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub waza4: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub tokuseiIndex: TokuseiType,
    pub scaleType: SizeType,
    pub scaleValue: i16,
    pub gemType: GemType,
}
impl<'a> Default for PokeDataSymbolArgs<'a> {
    #[inline]
    fn default() -> Self {
        PokeDataSymbolArgs {
            devId: pml::common::DevID::DEV_NULL,
            formId: 0,
            level: 0,
            sex: SexType::DEFAULT,
            rareType: RareType::DEFAULT,
            talentType: TalentType::RANDOM,
            talentValue: None,
            talentVNum: 0,
            wazaType: WazaType::DEFAULT,
            waza1: None,
            waza2: None,
            waza3: None,
            waza4: None,
            tokuseiIndex: TokuseiType::RANDOM_12,
            scaleType: SizeType::RANDOM,
            scaleValue: 0,
            gemType: GemType::DEFAULT,
        }
    }
}

pub struct PokeDataSymbolBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PokeDataSymbolBuilder<'a, 'b> {
    #[inline]
    pub fn add_devId(&mut self, devId: pml::common::DevID) {
        self.fbb_.push_slot::<pml::common::DevID>(
            PokeDataSymbol::VT_DEVID,
            devId,
            pml::common::DevID::DEV_NULL,
        );
    }
    #[inline]
    pub fn add_formId(&mut self, formId: i16) {
        self.fbb_
            .push_slot::<i16>(PokeDataSymbol::VT_FORMID, formId, 0);
    }
    #[inline]
    pub fn add_level(&mut self, level: i32) {
        self.fbb_
            .push_slot::<i32>(PokeDataSymbol::VT_LEVEL, level, 0);
    }
    #[inline]
    pub fn add_sex(&mut self, sex: SexType) {
        self.fbb_
            .push_slot::<SexType>(PokeDataSymbol::VT_SEX, sex, SexType::DEFAULT);
    }
    #[inline]
    pub fn add_rareType(&mut self, rareType: RareType) {
        self.fbb_
            .push_slot::<RareType>(PokeDataSymbol::VT_RARETYPE, rareType, RareType::DEFAULT);
    }
    #[inline]
    pub fn add_talentType(&mut self, talentType: TalentType) {
        self.fbb_.push_slot::<TalentType>(
            PokeDataSymbol::VT_TALENTTYPE,
            talentType,
            TalentType::RANDOM,
        );
    }
    #[inline]
    pub fn add_talentValue(&mut self, talentValue: flatbuffers::WIPOffset<ParamSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<ParamSet>>(
                PokeDataSymbol::VT_TALENTVALUE,
                talentValue,
            );
    }
    #[inline]
    pub fn add_talentVNum(&mut self, talentVNum: i8) {
        self.fbb_
            .push_slot::<i8>(PokeDataSymbol::VT_TALENTVNUM, talentVNum, 0);
    }
    #[inline]
    pub fn add_wazaType(&mut self, wazaType: WazaType) {
        self.fbb_
            .push_slot::<WazaType>(PokeDataSymbol::VT_WAZATYPE, wazaType, WazaType::DEFAULT);
    }
    #[inline]
    pub fn add_waza1(&mut self, waza1: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(PokeDataSymbol::VT_WAZA1, waza1);
    }
    #[inline]
    pub fn add_waza2(&mut self, waza2: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(PokeDataSymbol::VT_WAZA2, waza2);
    }
    #[inline]
    pub fn add_waza3(&mut self, waza3: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(PokeDataSymbol::VT_WAZA3, waza3);
    }
    #[inline]
    pub fn add_waza4(&mut self, waza4: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(PokeDataSymbol::VT_WAZA4, waza4);
    }
    #[inline]
    pub fn add_tokuseiIndex(&mut self, tokuseiIndex: TokuseiType) {
        self.fbb_.push_slot::<TokuseiType>(
            PokeDataSymbol::VT_TOKUSEIINDEX,
            tokuseiIndex,
            TokuseiType::RANDOM_12,
        );
    }
    #[inline]
    pub fn add_scaleType(&mut self, scaleType: SizeType) {
        self.fbb_
            .push_slot::<SizeType>(PokeDataSymbol::VT_SCALETYPE, scaleType, SizeType::RANDOM);
    }
    #[inline]
    pub fn add_scaleValue(&mut self, scaleValue: i16) {
        self.fbb_
            .push_slot::<i16>(PokeDataSymbol::VT_SCALEVALUE, scaleValue, 0);
    }
    #[inline]
    pub fn add_gemType(&mut self, gemType: GemType) {
        self.fbb_
            .push_slot::<GemType>(PokeDataSymbol::VT_GEMTYPE, gemType, GemType::DEFAULT);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PokeDataSymbolBuilder<'a, 'b> {
        let start = _fbb.start_table();
        PokeDataSymbolBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<PokeDataSymbol<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for PokeDataSymbol<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("PokeDataSymbol");
        ds.field("devId", &self.devId());
        ds.field("formId", &self.formId());
        ds.field("level", &self.level());
        ds.field("sex", &self.sex());
        ds.field("rareType", &self.rareType());
        ds.field("talentType", &self.talentType());
        ds.field("talentValue", &self.talentValue());
        ds.field("talentVNum", &self.talentVNum());
        ds.field("wazaType", &self.wazaType());
        ds.field("waza1", &self.waza1());
        ds.field("waza2", &self.waza2());
        ds.field("waza3", &self.waza3());
        ds.field("waza4", &self.waza4());
        ds.field("tokuseiIndex", &self.tokuseiIndex());
        ds.field("scaleType", &self.scaleType());
        ds.field("scaleValue", &self.scaleValue());
        ds.field("gemType", &self.gemType());
        ds.finish()
    }
}
pub enum PokeDataTradeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PokeDataTrade<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PokeDataTrade<'a> {
    type Inner = PokeDataTrade<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> PokeDataTrade<'a> {
    pub const VT_DEVID: flatbuffers::VOffsetT = 4;
    pub const VT_FORMID: flatbuffers::VOffsetT = 6;
    pub const VT_LEVEL: flatbuffers::VOffsetT = 8;
    pub const VT_SEX: flatbuffers::VOffsetT = 10;
    pub const VT_TOKUSEI: flatbuffers::VOffsetT = 12;
    pub const VT_GEMTYPE: flatbuffers::VOffsetT = 14;
    pub const VT_RARETYPE: flatbuffers::VOffsetT = 16;
    pub const VT_SCALETYPE: flatbuffers::VOffsetT = 18;
    pub const VT_SCALEVALUE: flatbuffers::VOffsetT = 20;
    pub const VT_WEIGHTTYPE: flatbuffers::VOffsetT = 22;
    pub const VT_WAIGHTVALUE: flatbuffers::VOffsetT = 24;
    pub const VT_TALENTTYPE: flatbuffers::VOffsetT = 26;
    pub const VT_TALENTVNUM: flatbuffers::VOffsetT = 28;
    pub const VT_TALENTVALUE: flatbuffers::VOffsetT = 30;
    pub const VT_EFFORTVALUE: flatbuffers::VOffsetT = 32;
    pub const VT_ITEM: flatbuffers::VOffsetT = 34;
    pub const VT_SEIKAKU: flatbuffers::VOffsetT = 36;
    pub const VT_SEIKAKUHOSEI: flatbuffers::VOffsetT = 38;
    pub const VT_WAZATYPE: flatbuffers::VOffsetT = 40;
    pub const VT_WAZA1: flatbuffers::VOffsetT = 42;
    pub const VT_WAZA2: flatbuffers::VOffsetT = 44;
    pub const VT_WAZA3: flatbuffers::VOffsetT = 46;
    pub const VT_WAZA4: flatbuffers::VOffsetT = 48;
    pub const VT_BALLID: flatbuffers::VOffsetT = 50;
    pub const VT_USENICKNAME: flatbuffers::VOffsetT = 52;
    pub const VT_NICKNAMELABEL: flatbuffers::VOffsetT = 54;
    pub const VT_PARENTNAMELABEL: flatbuffers::VOffsetT = 56;
    pub const VT_TRAINERID: flatbuffers::VOffsetT = 58;
    pub const VT_PARENTSEX: flatbuffers::VOffsetT = 60;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        PokeDataTrade { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args PokeDataTradeArgs<'args>,
    ) -> flatbuffers::WIPOffset<PokeDataTrade<'bldr>> {
        let mut builder = PokeDataTradeBuilder::new(_fbb);
        builder.add_trainerId(args.trainerId);
        builder.add_parentNameLabel(args.parentNameLabel);
        builder.add_nicknameLabel(args.nicknameLabel);
        builder.add_parentSex(args.parentSex);
        builder.add_ballId(args.ballId);
        if let Some(x) = args.waza4 {
            builder.add_waza4(x);
        }
        if let Some(x) = args.waza3 {
            builder.add_waza3(x);
        }
        if let Some(x) = args.waza2 {
            builder.add_waza2(x);
        }
        if let Some(x) = args.waza1 {
            builder.add_waza1(x);
        }
        builder.add_wazaType(args.wazaType);
        builder.add_seikakuHosei(args.seikakuHosei);
        builder.add_seikaku(args.seikaku);
        builder.add_item(args.item);
        if let Some(x) = args.effortValue {
            builder.add_effortValue(x);
        }
        if let Some(x) = args.talentValue {
            builder.add_talentValue(x);
        }
        builder.add_talentType(args.talentType);
        builder.add_weightType(args.weightType);
        builder.add_scaleType(args.scaleType);
        builder.add_rareType(args.rareType);
        builder.add_gemType(args.gemType);
        builder.add_tokusei(args.tokusei);
        builder.add_sex(args.sex);
        builder.add_level(args.level);
        builder.add_waightValue(args.waightValue);
        builder.add_scaleValue(args.scaleValue);
        builder.add_formId(args.formId);
        builder.add_devId(args.devId);
        builder.add_useNickName(args.useNickName);
        builder.add_talentVnum(args.talentVnum);
        builder.finish()
    }

    #[inline]
    pub fn devId(&self) -> pml::common::DevID {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<pml::common::DevID>(
                    PokeDataTrade::VT_DEVID,
                    Some(pml::common::DevID::DEV_NULL),
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn formId(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(PokeDataTrade::VT_FORMID, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn level(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(PokeDataTrade::VT_LEVEL, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn sex(&self) -> SexType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SexType>(PokeDataTrade::VT_SEX, Some(SexType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn tokusei(&self) -> TokuseiType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<TokuseiType>(PokeDataTrade::VT_TOKUSEI, Some(TokuseiType::RANDOM_12))
                .unwrap()
        }
    }
    #[inline]
    pub fn gemType(&self) -> GemType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<GemType>(PokeDataTrade::VT_GEMTYPE, Some(GemType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn rareType(&self) -> RareType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<RareType>(PokeDataTrade::VT_RARETYPE, Some(RareType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn scaleType(&self) -> SizeType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SizeType>(PokeDataTrade::VT_SCALETYPE, Some(SizeType::RANDOM))
                .unwrap()
        }
    }
    #[inline]
    pub fn scaleValue(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(PokeDataTrade::VT_SCALEVALUE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn weightType(&self) -> SizeType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SizeType>(PokeDataTrade::VT_WEIGHTTYPE, Some(SizeType::RANDOM))
                .unwrap()
        }
    }
    #[inline]
    pub fn waightValue(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(PokeDataTrade::VT_WAIGHTVALUE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn talentType(&self) -> TalentType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<TalentType>(PokeDataTrade::VT_TALENTTYPE, Some(TalentType::RANDOM))
                .unwrap()
        }
    }
    #[inline]
    pub fn talentVnum(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(PokeDataTrade::VT_TALENTVNUM, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn talentValue(&self) -> ParamSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<ParamSet>>(PokeDataTrade::VT_TALENTVALUE, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn effortValue(&self) -> ParamSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<ParamSet>>(PokeDataTrade::VT_EFFORTVALUE, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn item(&self) -> ItemID {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<ItemID>(PokeDataTrade::VT_ITEM, Some(ItemID::ITEMID_NONE))
                .unwrap()
        }
    }
    #[inline]
    pub fn seikaku(&self) -> SeikakuType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SeikakuType>(PokeDataTrade::VT_SEIKAKU, Some(SeikakuType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn seikakuHosei(&self) -> SeikakuType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SeikakuType>(PokeDataTrade::VT_SEIKAKUHOSEI, Some(SeikakuType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn wazaType(&self) -> WazaType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<WazaType>(PokeDataTrade::VT_WAZATYPE, Some(WazaType::DEFAULT))
                .unwrap()
        }
    }
    #[inline]
    pub fn waza1(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataTrade::VT_WAZA1, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn waza2(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataTrade::VT_WAZA2, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn waza3(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataTrade::VT_WAZA3, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn waza4(&self) -> WazaSet<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WazaSet>>(PokeDataTrade::VT_WAZA4, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn ballId(&self) -> BallType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<BallType>(PokeDataTrade::VT_BALLID, Some(BallType::NONE))
                .unwrap()
        }
    }
    #[inline]
    pub fn useNickName(&self) -> bool {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<bool>(PokeDataTrade::VT_USENICKNAME, Some(false))
                .unwrap()
        }
    }
    #[inline]
    pub fn nicknameLabel(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u64>(PokeDataTrade::VT_NICKNAMELABEL, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn parentNameLabel(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u64>(PokeDataTrade::VT_PARENTNAMELABEL, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn trainerId(&self) -> i64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i64>(PokeDataTrade::VT_TRAINERID, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn parentSex(&self) -> SexType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SexType>(PokeDataTrade::VT_PARENTSEX, Some(SexType::DEFAULT))
                .unwrap()
        }
    }
}

impl flatbuffers::Verifiable for PokeDataTrade<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<pml::common::DevID>("devId", Self::VT_DEVID, false)?
            .visit_field::<i16>("formId", Self::VT_FORMID, false)?
            .visit_field::<i32>("level", Self::VT_LEVEL, false)?
            .visit_field::<SexType>("sex", Self::VT_SEX, false)?
            .visit_field::<TokuseiType>("tokusei", Self::VT_TOKUSEI, false)?
            .visit_field::<GemType>("gemType", Self::VT_GEMTYPE, false)?
            .visit_field::<RareType>("rareType", Self::VT_RARETYPE, false)?
            .visit_field::<SizeType>("scaleType", Self::VT_SCALETYPE, false)?
            .visit_field::<i16>("scaleValue", Self::VT_SCALEVALUE, false)?
            .visit_field::<SizeType>("weightType", Self::VT_WEIGHTTYPE, false)?
            .visit_field::<i16>("waightValue", Self::VT_WAIGHTVALUE, false)?
            .visit_field::<TalentType>("talentType", Self::VT_TALENTTYPE, false)?
            .visit_field::<i8>("talentVnum", Self::VT_TALENTVNUM, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<ParamSet>>(
                "talentValue",
                Self::VT_TALENTVALUE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<ParamSet>>(
                "effortValue",
                Self::VT_EFFORTVALUE,
                false,
            )?
            .visit_field::<ItemID>("item", Self::VT_ITEM, false)?
            .visit_field::<SeikakuType>("seikaku", Self::VT_SEIKAKU, false)?
            .visit_field::<SeikakuType>("seikakuHosei", Self::VT_SEIKAKUHOSEI, false)?
            .visit_field::<WazaType>("wazaType", Self::VT_WAZATYPE, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza1", Self::VT_WAZA1, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza2", Self::VT_WAZA2, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza3", Self::VT_WAZA3, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<WazaSet>>("waza4", Self::VT_WAZA4, false)?
            .visit_field::<BallType>("ballId", Self::VT_BALLID, false)?
            .visit_field::<bool>("useNickName", Self::VT_USENICKNAME, false)?
            .visit_field::<u64>("nicknameLabel", Self::VT_NICKNAMELABEL, false)?
            .visit_field::<u64>("parentNameLabel", Self::VT_PARENTNAMELABEL, false)?
            .visit_field::<i64>("trainerId", Self::VT_TRAINERID, false)?
            .visit_field::<SexType>("parentSex", Self::VT_PARENTSEX, false)?
            .finish();
        Ok(())
    }
}
pub struct PokeDataTradeArgs<'a> {
    pub devId: pml::common::DevID,
    pub formId: i16,
    pub level: i32,
    pub sex: SexType,
    pub tokusei: TokuseiType,
    pub gemType: GemType,
    pub rareType: RareType,
    pub scaleType: SizeType,
    pub scaleValue: i16,
    pub weightType: SizeType,
    pub waightValue: i16,
    pub talentType: TalentType,
    pub talentVnum: i8,
    pub talentValue: Option<flatbuffers::WIPOffset<ParamSet<'a>>>,
    pub effortValue: Option<flatbuffers::WIPOffset<ParamSet<'a>>>,
    pub item: ItemID,
    pub seikaku: SeikakuType,
    pub seikakuHosei: SeikakuType,
    pub wazaType: WazaType,
    pub waza1: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub waza2: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub waza3: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub waza4: Option<flatbuffers::WIPOffset<WazaSet<'a>>>,
    pub ballId: BallType,
    pub useNickName: bool,
    pub nicknameLabel: u64,
    pub parentNameLabel: u64,
    pub trainerId: i64,
    pub parentSex: SexType,
}
impl<'a> Default for PokeDataTradeArgs<'a> {
    #[inline]
    fn default() -> Self {
        PokeDataTradeArgs {
            devId: pml::common::DevID::DEV_NULL,
            formId: 0,
            level: 0,
            sex: SexType::DEFAULT,
            tokusei: TokuseiType::RANDOM_12,
            gemType: GemType::DEFAULT,
            rareType: RareType::DEFAULT,
            scaleType: SizeType::RANDOM,
            scaleValue: 0,
            weightType: SizeType::RANDOM,
            waightValue: 0,
            talentType: TalentType::RANDOM,
            talentVnum: 0,
            talentValue: None,
            effortValue: None,
            item: ItemID::ITEMID_NONE,
            seikaku: SeikakuType::DEFAULT,
            seikakuHosei: SeikakuType::DEFAULT,
            wazaType: WazaType::DEFAULT,
            waza1: None,
            waza2: None,
            waza3: None,
            waza4: None,
            ballId: BallType::NONE,
            useNickName: false,
            nicknameLabel: 0,
            parentNameLabel: 0,
            trainerId: 0,
            parentSex: SexType::DEFAULT,
        }
    }
}

pub struct PokeDataTradeBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PokeDataTradeBuilder<'a, 'b> {
    #[inline]
    pub fn add_devId(&mut self, devId: pml::common::DevID) {
        self.fbb_.push_slot::<pml::common::DevID>(
            PokeDataTrade::VT_DEVID,
            devId,
            pml::common::DevID::DEV_NULL,
        );
    }
    #[inline]
    pub fn add_formId(&mut self, formId: i16) {
        self.fbb_
            .push_slot::<i16>(PokeDataTrade::VT_FORMID, formId, 0);
    }
    #[inline]
    pub fn add_level(&mut self, level: i32) {
        self.fbb_
            .push_slot::<i32>(PokeDataTrade::VT_LEVEL, level, 0);
    }
    #[inline]
    pub fn add_sex(&mut self, sex: SexType) {
        self.fbb_
            .push_slot::<SexType>(PokeDataTrade::VT_SEX, sex, SexType::DEFAULT);
    }
    #[inline]
    pub fn add_tokusei(&mut self, tokusei: TokuseiType) {
        self.fbb_.push_slot::<TokuseiType>(
            PokeDataTrade::VT_TOKUSEI,
            tokusei,
            TokuseiType::RANDOM_12,
        );
    }
    #[inline]
    pub fn add_gemType(&mut self, gemType: GemType) {
        self.fbb_
            .push_slot::<GemType>(PokeDataTrade::VT_GEMTYPE, gemType, GemType::DEFAULT);
    }
    #[inline]
    pub fn add_rareType(&mut self, rareType: RareType) {
        self.fbb_
            .push_slot::<RareType>(PokeDataTrade::VT_RARETYPE, rareType, RareType::DEFAULT);
    }
    #[inline]
    pub fn add_scaleType(&mut self, scaleType: SizeType) {
        self.fbb_
            .push_slot::<SizeType>(PokeDataTrade::VT_SCALETYPE, scaleType, SizeType::RANDOM);
    }
    #[inline]
    pub fn add_scaleValue(&mut self, scaleValue: i16) {
        self.fbb_
            .push_slot::<i16>(PokeDataTrade::VT_SCALEVALUE, scaleValue, 0);
    }
    #[inline]
    pub fn add_weightType(&mut self, weightType: SizeType) {
        self.fbb_
            .push_slot::<SizeType>(PokeDataTrade::VT_WEIGHTTYPE, weightType, SizeType::RANDOM);
    }
    #[inline]
    pub fn add_waightValue(&mut self, waightValue: i16) {
        self.fbb_
            .push_slot::<i16>(PokeDataTrade::VT_WAIGHTVALUE, waightValue, 0);
    }
    #[inline]
    pub fn add_talentType(&mut self, talentType: TalentType) {
        self.fbb_.push_slot::<TalentType>(
            PokeDataTrade::VT_TALENTTYPE,
            talentType,
            TalentType::RANDOM,
        );
    }
    #[inline]
    pub fn add_talentVnum(&mut self, talentVnum: i8) {
        self.fbb_
            .push_slot::<i8>(PokeDataTrade::VT_TALENTVNUM, talentVnum, 0);
    }
    #[inline]
    pub fn add_talentValue(&mut self, talentValue: flatbuffers::WIPOffset<ParamSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<ParamSet>>(
                PokeDataTrade::VT_TALENTVALUE,
                talentValue,
            );
    }
    #[inline]
    pub fn add_effortValue(&mut self, effortValue: flatbuffers::WIPOffset<ParamSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<ParamSet>>(
                PokeDataTrade::VT_EFFORTVALUE,
                effortValue,
            );
    }
    #[inline]
    pub fn add_item(&mut self, item: ItemID) {
        self.fbb_
            .push_slot::<ItemID>(PokeDataTrade::VT_ITEM, item, ItemID::ITEMID_NONE);
    }
    #[inline]
    pub fn add_seikaku(&mut self, seikaku: SeikakuType) {
        self.fbb_.push_slot::<SeikakuType>(
            PokeDataTrade::VT_SEIKAKU,
            seikaku,
            SeikakuType::DEFAULT,
        );
    }
    #[inline]
    pub fn add_seikakuHosei(&mut self, seikakuHosei: SeikakuType) {
        self.fbb_.push_slot::<SeikakuType>(
            PokeDataTrade::VT_SEIKAKUHOSEI,
            seikakuHosei,
            SeikakuType::DEFAULT,
        );
    }
    #[inline]
    pub fn add_wazaType(&mut self, wazaType: WazaType) {
        self.fbb_
            .push_slot::<WazaType>(PokeDataTrade::VT_WAZATYPE, wazaType, WazaType::DEFAULT);
    }
    #[inline]
    pub fn add_waza1(&mut self, waza1: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(PokeDataTrade::VT_WAZA1, waza1);
    }
    #[inline]
    pub fn add_waza2(&mut self, waza2: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(PokeDataTrade::VT_WAZA2, waza2);
    }
    #[inline]
    pub fn add_waza3(&mut self, waza3: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(PokeDataTrade::VT_WAZA3, waza3);
    }
    #[inline]
    pub fn add_waza4(&mut self, waza4: flatbuffers::WIPOffset<WazaSet<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<WazaSet>>(PokeDataTrade::VT_WAZA4, waza4);
    }
    #[inline]
    pub fn add_ballId(&mut self, ballId: BallType) {
        self.fbb_
            .push_slot::<BallType>(PokeDataTrade::VT_BALLID, ballId, BallType::NONE);
    }
    #[inline]
    pub fn add_useNickName(&mut self, useNickName: bool) {
        self.fbb_
            .push_slot::<bool>(PokeDataTrade::VT_USENICKNAME, useNickName, false);
    }
    #[inline]
    pub fn add_nicknameLabel(&mut self, nicknameLabel: u64) {
        self.fbb_
            .push_slot::<u64>(PokeDataTrade::VT_NICKNAMELABEL, nicknameLabel, 0);
    }
    #[inline]
    pub fn add_parentNameLabel(&mut self, parentNameLabel: u64) {
        self.fbb_
            .push_slot::<u64>(PokeDataTrade::VT_PARENTNAMELABEL, parentNameLabel, 0);
    }
    #[inline]
    pub fn add_trainerId(&mut self, trainerId: i64) {
        self.fbb_
            .push_slot::<i64>(PokeDataTrade::VT_TRAINERID, trainerId, 0);
    }
    #[inline]
    pub fn add_parentSex(&mut self, parentSex: SexType) {
        self.fbb_
            .push_slot::<SexType>(PokeDataTrade::VT_PARENTSEX, parentSex, SexType::DEFAULT);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PokeDataTradeBuilder<'a, 'b> {
        let start = _fbb.start_table();
        PokeDataTradeBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<PokeDataTrade<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for PokeDataTrade<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("PokeDataTrade");
        ds.field("devId", &self.devId());
        ds.field("formId", &self.formId());
        ds.field("level", &self.level());
        ds.field("sex", &self.sex());
        ds.field("tokusei", &self.tokusei());
        ds.field("gemType", &self.gemType());
        ds.field("rareType", &self.rareType());
        ds.field("scaleType", &self.scaleType());
        ds.field("scaleValue", &self.scaleValue());
        ds.field("weightType", &self.weightType());
        ds.field("waightValue", &self.waightValue());
        ds.field("talentType", &self.talentType());
        ds.field("talentVnum", &self.talentVnum());
        ds.field("talentValue", &self.talentValue());
        ds.field("effortValue", &self.effortValue());
        ds.field("item", &self.item());
        ds.field("seikaku", &self.seikaku());
        ds.field("seikakuHosei", &self.seikakuHosei());
        ds.field("wazaType", &self.wazaType());
        ds.field("waza1", &self.waza1());
        ds.field("waza2", &self.waza2());
        ds.field("waza3", &self.waza3());
        ds.field("waza4", &self.waza4());
        ds.field("ballId", &self.ballId());
        ds.field("useNickName", &self.useNickName());
        ds.field("nicknameLabel", &self.nicknameLabel());
        ds.field("parentNameLabel", &self.parentNameLabel());
        ds.field("trainerId", &self.trainerId());
        ds.field("parentSex", &self.parentSex());
        ds.finish()
    }
}
pub enum RaidBossDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RaidBossData<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RaidBossData<'a> {
    type Inner = RaidBossData<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> RaidBossData<'a> {
    pub const VT_HPCOEF: flatbuffers::VOffsetT = 4;
    pub const VT_POWERCHARGETRIGERHP: flatbuffers::VOffsetT = 6;
    pub const VT_POWERCHARGETRIGERTIME: flatbuffers::VOffsetT = 8;
    pub const VT_POWERCHARGELIMITTIME: flatbuffers::VOffsetT = 10;
    pub const VT_POWERCHARGECANCELDAMAGE: flatbuffers::VOffsetT = 12;
    pub const VT_POWERCHARGEPENALTYTIME: flatbuffers::VOffsetT = 14;
    pub const VT_POWERCHARGEPENALTYACTION: flatbuffers::VOffsetT = 16;
    pub const VT_POWERCHARGEDAMAGERATE: flatbuffers::VOffsetT = 18;
    pub const VT_POWERCHARGEGEMDAMAGERATE: flatbuffers::VOffsetT = 20;
    pub const VT_POWERCHARGECHANGEGEMDAMAGERATE: flatbuffers::VOffsetT = 22;
    pub const VT_EXTRAACTION1: flatbuffers::VOffsetT = 24;
    pub const VT_EXTRAACTION2: flatbuffers::VOffsetT = 26;
    pub const VT_EXTRAACTION3: flatbuffers::VOffsetT = 28;
    pub const VT_EXTRAACTION4: flatbuffers::VOffsetT = 30;
    pub const VT_EXTRAACTION5: flatbuffers::VOffsetT = 32;
    pub const VT_EXTRAACTION6: flatbuffers::VOffsetT = 34;
    pub const VT_DOUBLEACTIONTRIGERHP: flatbuffers::VOffsetT = 36;
    pub const VT_DOUBLEACTIONTRIGERTIME: flatbuffers::VOffsetT = 38;
    pub const VT_DOUBLEACTIONRATE: flatbuffers::VOffsetT = 40;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        RaidBossData { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args RaidBossDataArgs<'args>,
    ) -> flatbuffers::WIPOffset<RaidBossData<'bldr>> {
        let mut builder = RaidBossDataBuilder::new(_fbb);
        if let Some(x) = args.extraAction6 {
            builder.add_extraAction6(x);
        }
        if let Some(x) = args.extraAction5 {
            builder.add_extraAction5(x);
        }
        if let Some(x) = args.extraAction4 {
            builder.add_extraAction4(x);
        }
        if let Some(x) = args.extraAction3 {
            builder.add_extraAction3(x);
        }
        if let Some(x) = args.extraAction2 {
            builder.add_extraAction2(x);
        }
        if let Some(x) = args.extraAction1 {
            builder.add_extraAction1(x);
        }
        builder.add_powerChargePenaltyAction(args.powerChargePenaltyAction);
        builder.add_powerChargePenaltyTime(args.powerChargePenaltyTime);
        builder.add_powerChargeLimitTime(args.powerChargeLimitTime);
        builder.add_hpCoef(args.hpCoef);
        builder.add_doubleActionRate(args.doubleActionRate);
        builder.add_doubleActionTrigerTime(args.doubleActionTrigerTime);
        builder.add_doubleActionTrigerHp(args.doubleActionTrigerHp);
        builder.add_powerChargeChangeGemDamageRate(args.powerChargeChangeGemDamageRate);
        builder.add_powerChargeGemDamageRate(args.powerChargeGemDamageRate);
        builder.add_powerChargeDamageRate(args.powerChargeDamageRate);
        builder.add_powerChargeCancelDamage(args.powerChargeCancelDamage);
        builder.add_powerChargeTrigerTime(args.powerChargeTrigerTime);
        builder.add_powerChargeTrigerHp(args.powerChargeTrigerHp);
        builder.finish()
    }

    #[inline]
    pub fn hpCoef(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(RaidBossData::VT_HPCOEF, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn powerChargeTrigerHp(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(RaidBossData::VT_POWERCHARGETRIGERHP, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn powerChargeTrigerTime(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(RaidBossData::VT_POWERCHARGETRIGERTIME, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn powerChargeLimitTime(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(RaidBossData::VT_POWERCHARGELIMITTIME, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn powerChargeCancelDamage(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(RaidBossData::VT_POWERCHARGECANCELDAMAGE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn powerChargePenaltyTime(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(RaidBossData::VT_POWERCHARGEPENALTYTIME, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn powerChargePenaltyAction(&self) -> pml::common::WazaID {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<pml::common::WazaID>(
                    RaidBossData::VT_POWERCHARGEPENALTYACTION,
                    Some(pml::common::WazaID::WAZA_NULL),
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn powerChargeDamageRate(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(RaidBossData::VT_POWERCHARGEDAMAGERATE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn powerChargeGemDamageRate(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(RaidBossData::VT_POWERCHARGEGEMDAMAGERATE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn powerChargeChangeGemDamageRate(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(RaidBossData::VT_POWERCHARGECHANGEGEMDAMAGERATE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn extraAction1(&self) -> RaidBossExtraData<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<RaidBossExtraData>>(
                    RaidBossData::VT_EXTRAACTION1,
                    None,
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn extraAction2(&self) -> RaidBossExtraData<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<RaidBossExtraData>>(
                    RaidBossData::VT_EXTRAACTION2,
                    None,
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn extraAction3(&self) -> RaidBossExtraData<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<RaidBossExtraData>>(
                    RaidBossData::VT_EXTRAACTION3,
                    None,
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn extraAction4(&self) -> RaidBossExtraData<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<RaidBossExtraData>>(
                    RaidBossData::VT_EXTRAACTION4,
                    None,
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn extraAction5(&self) -> RaidBossExtraData<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<RaidBossExtraData>>(
                    RaidBossData::VT_EXTRAACTION5,
                    None,
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn extraAction6(&self) -> RaidBossExtraData<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<RaidBossExtraData>>(
                    RaidBossData::VT_EXTRAACTION6,
                    None,
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn doubleActionTrigerHp(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(RaidBossData::VT_DOUBLEACTIONTRIGERHP, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn doubleActionTrigerTime(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(RaidBossData::VT_DOUBLEACTIONTRIGERTIME, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn doubleActionRate(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(RaidBossData::VT_DOUBLEACTIONRATE, Some(0))
                .unwrap()
        }
    }
}

impl flatbuffers::Verifiable for RaidBossData<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<i16>("hpCoef", Self::VT_HPCOEF, false)?
            .visit_field::<i8>("powerChargeTrigerHp", Self::VT_POWERCHARGETRIGERHP, false)?
            .visit_field::<i8>(
                "powerChargeTrigerTime",
                Self::VT_POWERCHARGETRIGERTIME,
                false,
            )?
            .visit_field::<i16>("powerChargeLimitTime", Self::VT_POWERCHARGELIMITTIME, false)?
            .visit_field::<i8>(
                "powerChargeCancelDamage",
                Self::VT_POWERCHARGECANCELDAMAGE,
                false,
            )?
            .visit_field::<i16>(
                "powerChargePenaltyTime",
                Self::VT_POWERCHARGEPENALTYTIME,
                false,
            )?
            .visit_field::<pml::common::WazaID>(
                "powerChargePenaltyAction",
                Self::VT_POWERCHARGEPENALTYACTION,
                false,
            )?
            .visit_field::<i8>(
                "powerChargeDamageRate",
                Self::VT_POWERCHARGEDAMAGERATE,
                false,
            )?
            .visit_field::<i8>(
                "powerChargeGemDamageRate",
                Self::VT_POWERCHARGEGEMDAMAGERATE,
                false,
            )?
            .visit_field::<i8>(
                "powerChargeChangeGemDamageRate",
                Self::VT_POWERCHARGECHANGEGEMDAMAGERATE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<RaidBossExtraData>>(
                "extraAction1",
                Self::VT_EXTRAACTION1,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<RaidBossExtraData>>(
                "extraAction2",
                Self::VT_EXTRAACTION2,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<RaidBossExtraData>>(
                "extraAction3",
                Self::VT_EXTRAACTION3,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<RaidBossExtraData>>(
                "extraAction4",
                Self::VT_EXTRAACTION4,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<RaidBossExtraData>>(
                "extraAction5",
                Self::VT_EXTRAACTION5,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<RaidBossExtraData>>(
                "extraAction6",
                Self::VT_EXTRAACTION6,
                false,
            )?
            .visit_field::<i8>("doubleActionTrigerHp", Self::VT_DOUBLEACTIONTRIGERHP, false)?
            .visit_field::<i8>(
                "doubleActionTrigerTime",
                Self::VT_DOUBLEACTIONTRIGERTIME,
                false,
            )?
            .visit_field::<i8>("doubleActionRate", Self::VT_DOUBLEACTIONRATE, false)?
            .finish();
        Ok(())
    }
}
pub struct RaidBossDataArgs<'a> {
    pub hpCoef: i16,
    pub powerChargeTrigerHp: i8,
    pub powerChargeTrigerTime: i8,
    pub powerChargeLimitTime: i16,
    pub powerChargeCancelDamage: i8,
    pub powerChargePenaltyTime: i16,
    pub powerChargePenaltyAction: pml::common::WazaID,
    pub powerChargeDamageRate: i8,
    pub powerChargeGemDamageRate: i8,
    pub powerChargeChangeGemDamageRate: i8,
    pub extraAction1: Option<flatbuffers::WIPOffset<RaidBossExtraData<'a>>>,
    pub extraAction2: Option<flatbuffers::WIPOffset<RaidBossExtraData<'a>>>,
    pub extraAction3: Option<flatbuffers::WIPOffset<RaidBossExtraData<'a>>>,
    pub extraAction4: Option<flatbuffers::WIPOffset<RaidBossExtraData<'a>>>,
    pub extraAction5: Option<flatbuffers::WIPOffset<RaidBossExtraData<'a>>>,
    pub extraAction6: Option<flatbuffers::WIPOffset<RaidBossExtraData<'a>>>,
    pub doubleActionTrigerHp: i8,
    pub doubleActionTrigerTime: i8,
    pub doubleActionRate: i8,
}
impl<'a> Default for RaidBossDataArgs<'a> {
    #[inline]
    fn default() -> Self {
        RaidBossDataArgs {
            hpCoef: 0,
            powerChargeTrigerHp: 0,
            powerChargeTrigerTime: 0,
            powerChargeLimitTime: 0,
            powerChargeCancelDamage: 0,
            powerChargePenaltyTime: 0,
            powerChargePenaltyAction: pml::common::WazaID::WAZA_NULL,
            powerChargeDamageRate: 0,
            powerChargeGemDamageRate: 0,
            powerChargeChangeGemDamageRate: 0,
            extraAction1: None,
            extraAction2: None,
            extraAction3: None,
            extraAction4: None,
            extraAction5: None,
            extraAction6: None,
            doubleActionTrigerHp: 0,
            doubleActionTrigerTime: 0,
            doubleActionRate: 0,
        }
    }
}

pub struct RaidBossDataBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RaidBossDataBuilder<'a, 'b> {
    #[inline]
    pub fn add_hpCoef(&mut self, hpCoef: i16) {
        self.fbb_
            .push_slot::<i16>(RaidBossData::VT_HPCOEF, hpCoef, 0);
    }
    #[inline]
    pub fn add_powerChargeTrigerHp(&mut self, powerChargeTrigerHp: i8) {
        self.fbb_
            .push_slot::<i8>(RaidBossData::VT_POWERCHARGETRIGERHP, powerChargeTrigerHp, 0);
    }
    #[inline]
    pub fn add_powerChargeTrigerTime(&mut self, powerChargeTrigerTime: i8) {
        self.fbb_.push_slot::<i8>(
            RaidBossData::VT_POWERCHARGETRIGERTIME,
            powerChargeTrigerTime,
            0,
        );
    }
    #[inline]
    pub fn add_powerChargeLimitTime(&mut self, powerChargeLimitTime: i16) {
        self.fbb_.push_slot::<i16>(
            RaidBossData::VT_POWERCHARGELIMITTIME,
            powerChargeLimitTime,
            0,
        );
    }
    #[inline]
    pub fn add_powerChargeCancelDamage(&mut self, powerChargeCancelDamage: i8) {
        self.fbb_.push_slot::<i8>(
            RaidBossData::VT_POWERCHARGECANCELDAMAGE,
            powerChargeCancelDamage,
            0,
        );
    }
    #[inline]
    pub fn add_powerChargePenaltyTime(&mut self, powerChargePenaltyTime: i16) {
        self.fbb_.push_slot::<i16>(
            RaidBossData::VT_POWERCHARGEPENALTYTIME,
            powerChargePenaltyTime,
            0,
        );
    }
    #[inline]
    pub fn add_powerChargePenaltyAction(&mut self, powerChargePenaltyAction: pml::common::WazaID) {
        self.fbb_.push_slot::<pml::common::WazaID>(
            RaidBossData::VT_POWERCHARGEPENALTYACTION,
            powerChargePenaltyAction,
            pml::common::WazaID::WAZA_NULL,
        );
    }
    #[inline]
    pub fn add_powerChargeDamageRate(&mut self, powerChargeDamageRate: i8) {
        self.fbb_.push_slot::<i8>(
            RaidBossData::VT_POWERCHARGEDAMAGERATE,
            powerChargeDamageRate,
            0,
        );
    }
    #[inline]
    pub fn add_powerChargeGemDamageRate(&mut self, powerChargeGemDamageRate: i8) {
        self.fbb_.push_slot::<i8>(
            RaidBossData::VT_POWERCHARGEGEMDAMAGERATE,
            powerChargeGemDamageRate,
            0,
        );
    }
    #[inline]
    pub fn add_powerChargeChangeGemDamageRate(&mut self, powerChargeChangeGemDamageRate: i8) {
        self.fbb_.push_slot::<i8>(
            RaidBossData::VT_POWERCHARGECHANGEGEMDAMAGERATE,
            powerChargeChangeGemDamageRate,
            0,
        );
    }
    #[inline]
    pub fn add_extraAction1(
        &mut self,
        extraAction1: flatbuffers::WIPOffset<RaidBossExtraData<'b>>,
    ) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<RaidBossExtraData>>(
                RaidBossData::VT_EXTRAACTION1,
                extraAction1,
            );
    }
    #[inline]
    pub fn add_extraAction2(
        &mut self,
        extraAction2: flatbuffers::WIPOffset<RaidBossExtraData<'b>>,
    ) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<RaidBossExtraData>>(
                RaidBossData::VT_EXTRAACTION2,
                extraAction2,
            );
    }
    #[inline]
    pub fn add_extraAction3(
        &mut self,
        extraAction3: flatbuffers::WIPOffset<RaidBossExtraData<'b>>,
    ) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<RaidBossExtraData>>(
                RaidBossData::VT_EXTRAACTION3,
                extraAction3,
            );
    }
    #[inline]
    pub fn add_extraAction4(
        &mut self,
        extraAction4: flatbuffers::WIPOffset<RaidBossExtraData<'b>>,
    ) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<RaidBossExtraData>>(
                RaidBossData::VT_EXTRAACTION4,
                extraAction4,
            );
    }
    #[inline]
    pub fn add_extraAction5(
        &mut self,
        extraAction5: flatbuffers::WIPOffset<RaidBossExtraData<'b>>,
    ) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<RaidBossExtraData>>(
                RaidBossData::VT_EXTRAACTION5,
                extraAction5,
            );
    }
    #[inline]
    pub fn add_extraAction6(
        &mut self,
        extraAction6: flatbuffers::WIPOffset<RaidBossExtraData<'b>>,
    ) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<RaidBossExtraData>>(
                RaidBossData::VT_EXTRAACTION6,
                extraAction6,
            );
    }
    #[inline]
    pub fn add_doubleActionTrigerHp(&mut self, doubleActionTrigerHp: i8) {
        self.fbb_.push_slot::<i8>(
            RaidBossData::VT_DOUBLEACTIONTRIGERHP,
            doubleActionTrigerHp,
            0,
        );
    }
    #[inline]
    pub fn add_doubleActionTrigerTime(&mut self, doubleActionTrigerTime: i8) {
        self.fbb_.push_slot::<i8>(
            RaidBossData::VT_DOUBLEACTIONTRIGERTIME,
            doubleActionTrigerTime,
            0,
        );
    }
    #[inline]
    pub fn add_doubleActionRate(&mut self, doubleActionRate: i8) {
        self.fbb_
            .push_slot::<i8>(RaidBossData::VT_DOUBLEACTIONRATE, doubleActionRate, 0);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RaidBossDataBuilder<'a, 'b> {
        let start = _fbb.start_table();
        RaidBossDataBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<RaidBossData<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for RaidBossData<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("RaidBossData");
        ds.field("hpCoef", &self.hpCoef());
        ds.field("powerChargeTrigerHp", &self.powerChargeTrigerHp());
        ds.field("powerChargeTrigerTime", &self.powerChargeTrigerTime());
        ds.field("powerChargeLimitTime", &self.powerChargeLimitTime());
        ds.field("powerChargeCancelDamage", &self.powerChargeCancelDamage());
        ds.field("powerChargePenaltyTime", &self.powerChargePenaltyTime());
        ds.field("powerChargePenaltyAction", &self.powerChargePenaltyAction());
        ds.field("powerChargeDamageRate", &self.powerChargeDamageRate());
        ds.field("powerChargeGemDamageRate", &self.powerChargeGemDamageRate());
        ds.field(
            "powerChargeChangeGemDamageRate",
            &self.powerChargeChangeGemDamageRate(),
        );
        ds.field("extraAction1", &self.extraAction1());
        ds.field("extraAction2", &self.extraAction2());
        ds.field("extraAction3", &self.extraAction3());
        ds.field("extraAction4", &self.extraAction4());
        ds.field("extraAction5", &self.extraAction5());
        ds.field("extraAction6", &self.extraAction6());
        ds.field("doubleActionTrigerHp", &self.doubleActionTrigerHp());
        ds.field("doubleActionTrigerTime", &self.doubleActionTrigerTime());
        ds.field("doubleActionRate", &self.doubleActionRate());
        ds.finish()
    }
}
pub enum RaidBossExtraDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RaidBossExtraData<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RaidBossExtraData<'a> {
    type Inner = RaidBossExtraData<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> RaidBossExtraData<'a> {
    pub const VT_TIMMING: flatbuffers::VOffsetT = 4;
    pub const VT_ACTION: flatbuffers::VOffsetT = 6;
    pub const VT_VALUE: flatbuffers::VOffsetT = 8;
    pub const VT_WAZANO: flatbuffers::VOffsetT = 10;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        RaidBossExtraData { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args RaidBossExtraDataArgs,
    ) -> flatbuffers::WIPOffset<RaidBossExtraData<'bldr>> {
        let mut builder = RaidBossExtraDataBuilder::new(_fbb);
        builder.add_wazano(args.wazano);
        builder.add_value(args.value);
        builder.add_action(args.action);
        builder.add_timming(args.timming);
        builder.finish()
    }

    #[inline]
    pub fn timming(&self) -> RaidBossExtraTimingType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<RaidBossExtraTimingType>(
                    RaidBossExtraData::VT_TIMMING,
                    Some(RaidBossExtraTimingType::NONE),
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn action(&self) -> RaidBossExtraActType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<RaidBossExtraActType>(
                    RaidBossExtraData::VT_ACTION,
                    Some(RaidBossExtraActType::NONE),
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn value(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(RaidBossExtraData::VT_VALUE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn wazano(&self) -> pml::common::WazaID {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<pml::common::WazaID>(
                    RaidBossExtraData::VT_WAZANO,
                    Some(pml::common::WazaID::WAZA_NULL),
                )
                .unwrap()
        }
    }
}

impl flatbuffers::Verifiable for RaidBossExtraData<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<RaidBossExtraTimingType>("timming", Self::VT_TIMMING, false)?
            .visit_field::<RaidBossExtraActType>("action", Self::VT_ACTION, false)?
            .visit_field::<i16>("value", Self::VT_VALUE, false)?
            .visit_field::<pml::common::WazaID>("wazano", Self::VT_WAZANO, false)?
            .finish();
        Ok(())
    }
}
pub struct RaidBossExtraDataArgs {
    pub timming: RaidBossExtraTimingType,
    pub action: RaidBossExtraActType,
    pub value: i16,
    pub wazano: pml::common::WazaID,
}
impl<'a> Default for RaidBossExtraDataArgs {
    #[inline]
    fn default() -> Self {
        RaidBossExtraDataArgs {
            timming: RaidBossExtraTimingType::NONE,
            action: RaidBossExtraActType::NONE,
            value: 0,
            wazano: pml::common::WazaID::WAZA_NULL,
        }
    }
}

pub struct RaidBossExtraDataBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RaidBossExtraDataBuilder<'a, 'b> {
    #[inline]
    pub fn add_timming(&mut self, timming: RaidBossExtraTimingType) {
        self.fbb_.push_slot::<RaidBossExtraTimingType>(
            RaidBossExtraData::VT_TIMMING,
            timming,
            RaidBossExtraTimingType::NONE,
        );
    }
    #[inline]
    pub fn add_action(&mut self, action: RaidBossExtraActType) {
        self.fbb_.push_slot::<RaidBossExtraActType>(
            RaidBossExtraData::VT_ACTION,
            action,
            RaidBossExtraActType::NONE,
        );
    }
    #[inline]
    pub fn add_value(&mut self, value: i16) {
        self.fbb_
            .push_slot::<i16>(RaidBossExtraData::VT_VALUE, value, 0);
    }
    #[inline]
    pub fn add_wazano(&mut self, wazano: pml::common::WazaID) {
        self.fbb_.push_slot::<pml::common::WazaID>(
            RaidBossExtraData::VT_WAZANO,
            wazano,
            pml::common::WazaID::WAZA_NULL,
        );
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    ) -> RaidBossExtraDataBuilder<'a, 'b> {
        let start = _fbb.start_table();
        RaidBossExtraDataBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<RaidBossExtraData<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for RaidBossExtraData<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("RaidBossExtraData");
        ds.field("timming", &self.timming());
        ds.field("action", &self.action());
        ds.field("value", &self.value());
        ds.field("wazano", &self.wazano());
        ds.finish()
    }
}
pub enum RaidBossSizeDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RaidBossSizeData<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RaidBossSizeData<'a> {
    type Inner = RaidBossSizeData<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> RaidBossSizeData<'a> {
    pub const VT_HEIGHTTYPE: flatbuffers::VOffsetT = 4;
    pub const VT_HEIGNTVALUE: flatbuffers::VOffsetT = 6;
    pub const VT_WEIGHTTYPE: flatbuffers::VOffsetT = 8;
    pub const VT_WAIGHTVALUE: flatbuffers::VOffsetT = 10;
    pub const VT_SCALETYPE: flatbuffers::VOffsetT = 12;
    pub const VT_SCALEVALUE: flatbuffers::VOffsetT = 14;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        RaidBossSizeData { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args RaidBossSizeDataArgs,
    ) -> flatbuffers::WIPOffset<RaidBossSizeData<'bldr>> {
        let mut builder = RaidBossSizeDataBuilder::new(_fbb);
        builder.add_scaleType(args.scaleType);
        builder.add_weightType(args.weightType);
        builder.add_heightType(args.heightType);
        builder.add_scaleValue(args.scaleValue);
        builder.add_waightValue(args.waightValue);
        builder.add_heigntValue(args.heigntValue);
        builder.finish()
    }

    #[inline]
    pub fn heightType(&self) -> SizeType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SizeType>(RaidBossSizeData::VT_HEIGHTTYPE, Some(SizeType::RANDOM))
                .unwrap()
        }
    }
    #[inline]
    pub fn heigntValue(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(RaidBossSizeData::VT_HEIGNTVALUE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn weightType(&self) -> SizeType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SizeType>(RaidBossSizeData::VT_WEIGHTTYPE, Some(SizeType::RANDOM))
                .unwrap()
        }
    }
    #[inline]
    pub fn waightValue(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(RaidBossSizeData::VT_WAIGHTVALUE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn scaleType(&self) -> SizeType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<SizeType>(RaidBossSizeData::VT_SCALETYPE, Some(SizeType::RANDOM))
                .unwrap()
        }
    }
    #[inline]
    pub fn scaleValue(&self) -> i16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i16>(RaidBossSizeData::VT_SCALEVALUE, Some(0))
                .unwrap()
        }
    }
}

impl flatbuffers::Verifiable for RaidBossSizeData<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<SizeType>("heightType", Self::VT_HEIGHTTYPE, false)?
            .visit_field::<i16>("heigntValue", Self::VT_HEIGNTVALUE, false)?
            .visit_field::<SizeType>("weightType", Self::VT_WEIGHTTYPE, false)?
            .visit_field::<i16>("waightValue", Self::VT_WAIGHTVALUE, false)?
            .visit_field::<SizeType>("scaleType", Self::VT_SCALETYPE, false)?
            .visit_field::<i16>("scaleValue", Self::VT_SCALEVALUE, false)?
            .finish();
        Ok(())
    }
}
pub struct RaidBossSizeDataArgs {
    pub heightType: SizeType,
    pub heigntValue: i16,
    pub weightType: SizeType,
    pub waightValue: i16,
    pub scaleType: SizeType,
    pub scaleValue: i16,
}
impl<'a> Default for RaidBossSizeDataArgs {
    #[inline]
    fn default() -> Self {
        RaidBossSizeDataArgs {
            heightType: SizeType::RANDOM,
            heigntValue: 0,
            weightType: SizeType::RANDOM,
            waightValue: 0,
            scaleType: SizeType::RANDOM,
            scaleValue: 0,
        }
    }
}

pub struct RaidBossSizeDataBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RaidBossSizeDataBuilder<'a, 'b> {
    #[inline]
    pub fn add_heightType(&mut self, heightType: SizeType) {
        self.fbb_.push_slot::<SizeType>(
            RaidBossSizeData::VT_HEIGHTTYPE,
            heightType,
            SizeType::RANDOM,
        );
    }
    #[inline]
    pub fn add_heigntValue(&mut self, heigntValue: i16) {
        self.fbb_
            .push_slot::<i16>(RaidBossSizeData::VT_HEIGNTVALUE, heigntValue, 0);
    }
    #[inline]
    pub fn add_weightType(&mut self, weightType: SizeType) {
        self.fbb_.push_slot::<SizeType>(
            RaidBossSizeData::VT_WEIGHTTYPE,
            weightType,
            SizeType::RANDOM,
        );
    }
    #[inline]
    pub fn add_waightValue(&mut self, waightValue: i16) {
        self.fbb_
            .push_slot::<i16>(RaidBossSizeData::VT_WAIGHTVALUE, waightValue, 0);
    }
    #[inline]
    pub fn add_scaleType(&mut self, scaleType: SizeType) {
        self.fbb_.push_slot::<SizeType>(
            RaidBossSizeData::VT_SCALETYPE,
            scaleType,
            SizeType::RANDOM,
        );
    }
    #[inline]
    pub fn add_scaleValue(&mut self, scaleValue: i16) {
        self.fbb_
            .push_slot::<i16>(RaidBossSizeData::VT_SCALEVALUE, scaleValue, 0);
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    ) -> RaidBossSizeDataBuilder<'a, 'b> {
        let start = _fbb.start_table();
        RaidBossSizeDataBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<RaidBossSizeData<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for RaidBossSizeData<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("RaidBossSizeData");
        ds.field("heightType", &self.heightType());
        ds.field("heigntValue", &self.heigntValue());
        ds.field("weightType", &self.weightType());
        ds.field("waightValue", &self.waightValue());
        ds.field("scaleType", &self.scaleType());
        ds.field("scaleValue", &self.scaleValue());
        ds.finish()
    }
}
pub enum RaidEnemyInfoOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RaidEnemyInfo<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RaidEnemyInfo<'a> {
    type Inner = RaidEnemyInfo<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> RaidEnemyInfo<'a> {
    pub const VT_ROMVER: flatbuffers::VOffsetT = 4;
    pub const VT_NO: flatbuffers::VOffsetT = 6;
    pub const VT_DELIVERYGROUPID: flatbuffers::VOffsetT = 8;
    pub const VT_DIFFICULTY: flatbuffers::VOffsetT = 10;
    pub const VT_RATE: flatbuffers::VOffsetT = 12;
    pub const VT_DROPTABLEFIX: flatbuffers::VOffsetT = 14;
    pub const VT_DROPTABLERANDOM: flatbuffers::VOffsetT = 16;
    pub const VT_CAPTURERATE: flatbuffers::VOffsetT = 18;
    pub const VT_CAPTURELV: flatbuffers::VOffsetT = 20;
    pub const VT_BOSSPOKEPARA: flatbuffers::VOffsetT = 22;
    pub const VT_BOSSPOKESIZE: flatbuffers::VOffsetT = 24;
    pub const VT_BOSSDESC: flatbuffers::VOffsetT = 26;
    pub const VT_RAIDTIMEDATA: flatbuffers::VOffsetT = 28;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        RaidEnemyInfo { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args RaidEnemyInfoArgs<'args>,
    ) -> flatbuffers::WIPOffset<RaidEnemyInfo<'bldr>> {
        let mut builder = RaidEnemyInfoBuilder::new(_fbb);
        builder.add_dropTableRandom(args.dropTableRandom);
        builder.add_dropTableFix(args.dropTableFix);
        if let Some(x) = args.raidTimeData {
            builder.add_raidTimeData(x);
        }
        if let Some(x) = args.bossDesc {
            builder.add_bossDesc(x);
        }
        if let Some(x) = args.bossPokeSize {
            builder.add_bossPokeSize(x);
        }
        if let Some(x) = args.bossPokePara {
            builder.add_bossPokePara(x);
        }
        builder.add_difficulty(args.difficulty);
        builder.add_no(args.no);
        builder.add_romVer(args.romVer);
        builder.add_captureLv(args.captureLv);
        builder.add_captureRate(args.captureRate);
        builder.add_rate(args.rate);
        builder.add_deliveryGroupID(args.deliveryGroupID);
        builder.finish()
    }

    #[inline]
    pub fn romVer(&self) -> RaidRomType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<RaidRomType>(RaidEnemyInfo::VT_ROMVER, Some(RaidRomType::BOTH))
                .unwrap()
        }
    }
    #[inline]
    pub fn no(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<i32>(RaidEnemyInfo::VT_NO, Some(0)).unwrap() }
    }
    #[inline]
    pub fn deliveryGroupID(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(RaidEnemyInfo::VT_DELIVERYGROUPID, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn difficulty(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(RaidEnemyInfo::VT_DIFFICULTY, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn rate(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(RaidEnemyInfo::VT_RATE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn dropTableFix(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u64>(RaidEnemyInfo::VT_DROPTABLEFIX, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn dropTableRandom(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u64>(RaidEnemyInfo::VT_DROPTABLERANDOM, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn captureRate(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(RaidEnemyInfo::VT_CAPTURERATE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn captureLv(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i8>(RaidEnemyInfo::VT_CAPTURELV, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn bossPokePara(&self) -> PokeDataBattle<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<PokeDataBattle>>(
                    RaidEnemyInfo::VT_BOSSPOKEPARA,
                    None,
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn bossPokeSize(&self) -> RaidBossSizeData<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<RaidBossSizeData>>(
                    RaidEnemyInfo::VT_BOSSPOKESIZE,
                    None,
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn bossDesc(&self) -> RaidBossData<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<RaidBossData>>(RaidEnemyInfo::VT_BOSSDESC, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn raidTimeData(&self) -> RaidTimeData<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<RaidTimeData>>(
                    RaidEnemyInfo::VT_RAIDTIMEDATA,
                    None,
                )
                .unwrap()
        }
    }
}

impl flatbuffers::Verifiable for RaidEnemyInfo<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<RaidRomType>("romVer", Self::VT_ROMVER, false)?
            .visit_field::<i32>("no", Self::VT_NO, false)?
            .visit_field::<i8>("deliveryGroupID", Self::VT_DELIVERYGROUPID, false)?
            .visit_field::<i32>("difficulty", Self::VT_DIFFICULTY, false)?
            .visit_field::<i8>("rate", Self::VT_RATE, false)?
            .visit_field::<u64>("dropTableFix", Self::VT_DROPTABLEFIX, false)?
            .visit_field::<u64>("dropTableRandom", Self::VT_DROPTABLERANDOM, false)?
            .visit_field::<i8>("captureRate", Self::VT_CAPTURERATE, false)?
            .visit_field::<i8>("captureLv", Self::VT_CAPTURELV, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<PokeDataBattle>>(
                "bossPokePara",
                Self::VT_BOSSPOKEPARA,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<RaidBossSizeData>>(
                "bossPokeSize",
                Self::VT_BOSSPOKESIZE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<RaidBossData>>(
                "bossDesc",
                Self::VT_BOSSDESC,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<RaidTimeData>>(
                "raidTimeData",
                Self::VT_RAIDTIMEDATA,
                false,
            )?
            .finish();
        Ok(())
    }
}
pub struct RaidEnemyInfoArgs<'a> {
    pub romVer: RaidRomType,
    pub no: i32,
    pub deliveryGroupID: i8,
    pub difficulty: i32,
    pub rate: i8,
    pub dropTableFix: u64,
    pub dropTableRandom: u64,
    pub captureRate: i8,
    pub captureLv: i8,
    pub bossPokePara: Option<flatbuffers::WIPOffset<PokeDataBattle<'a>>>,
    pub bossPokeSize: Option<flatbuffers::WIPOffset<RaidBossSizeData<'a>>>,
    pub bossDesc: Option<flatbuffers::WIPOffset<RaidBossData<'a>>>,
    pub raidTimeData: Option<flatbuffers::WIPOffset<RaidTimeData<'a>>>,
}
impl<'a> Default for RaidEnemyInfoArgs<'a> {
    #[inline]
    fn default() -> Self {
        RaidEnemyInfoArgs {
            romVer: RaidRomType::BOTH,
            no: 0,
            deliveryGroupID: 0,
            difficulty: 0,
            rate: 0,
            dropTableFix: 0,
            dropTableRandom: 0,
            captureRate: 0,
            captureLv: 0,
            bossPokePara: None,
            bossPokeSize: None,
            bossDesc: None,
            raidTimeData: None,
        }
    }
}

pub struct RaidEnemyInfoBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RaidEnemyInfoBuilder<'a, 'b> {
    #[inline]
    pub fn add_romVer(&mut self, romVer: RaidRomType) {
        self.fbb_
            .push_slot::<RaidRomType>(RaidEnemyInfo::VT_ROMVER, romVer, RaidRomType::BOTH);
    }
    #[inline]
    pub fn add_no(&mut self, no: i32) {
        self.fbb_.push_slot::<i32>(RaidEnemyInfo::VT_NO, no, 0);
    }
    #[inline]
    pub fn add_deliveryGroupID(&mut self, deliveryGroupID: i8) {
        self.fbb_
            .push_slot::<i8>(RaidEnemyInfo::VT_DELIVERYGROUPID, deliveryGroupID, 0);
    }
    #[inline]
    pub fn add_difficulty(&mut self, difficulty: i32) {
        self.fbb_
            .push_slot::<i32>(RaidEnemyInfo::VT_DIFFICULTY, difficulty, 0);
    }
    #[inline]
    pub fn add_rate(&mut self, rate: i8) {
        self.fbb_.push_slot::<i8>(RaidEnemyInfo::VT_RATE, rate, 0);
    }
    #[inline]
    pub fn add_dropTableFix(&mut self, dropTableFix: u64) {
        self.fbb_
            .push_slot::<u64>(RaidEnemyInfo::VT_DROPTABLEFIX, dropTableFix, 0);
    }
    #[inline]
    pub fn add_dropTableRandom(&mut self, dropTableRandom: u64) {
        self.fbb_
            .push_slot::<u64>(RaidEnemyInfo::VT_DROPTABLERANDOM, dropTableRandom, 0);
    }
    #[inline]
    pub fn add_captureRate(&mut self, captureRate: i8) {
        self.fbb_
            .push_slot::<i8>(RaidEnemyInfo::VT_CAPTURERATE, captureRate, 0);
    }
    #[inline]
    pub fn add_captureLv(&mut self, captureLv: i8) {
        self.fbb_
            .push_slot::<i8>(RaidEnemyInfo::VT_CAPTURELV, captureLv, 0);
    }
    #[inline]
    pub fn add_bossPokePara(&mut self, bossPokePara: flatbuffers::WIPOffset<PokeDataBattle<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<PokeDataBattle>>(
                RaidEnemyInfo::VT_BOSSPOKEPARA,
                bossPokePara,
            );
    }
    #[inline]
    pub fn add_bossPokeSize(&mut self, bossPokeSize: flatbuffers::WIPOffset<RaidBossSizeData<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<RaidBossSizeData>>(
                RaidEnemyInfo::VT_BOSSPOKESIZE,
                bossPokeSize,
            );
    }
    #[inline]
    pub fn add_bossDesc(&mut self, bossDesc: flatbuffers::WIPOffset<RaidBossData<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<RaidBossData>>(
                RaidEnemyInfo::VT_BOSSDESC,
                bossDesc,
            );
    }
    #[inline]
    pub fn add_raidTimeData(&mut self, raidTimeData: flatbuffers::WIPOffset<RaidTimeData<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<RaidTimeData>>(
                RaidEnemyInfo::VT_RAIDTIMEDATA,
                raidTimeData,
            );
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RaidEnemyInfoBuilder<'a, 'b> {
        let start = _fbb.start_table();
        RaidEnemyInfoBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<RaidEnemyInfo<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for RaidEnemyInfo<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("RaidEnemyInfo");
        ds.field("romVer", &self.romVer());
        ds.field("no", &self.no());
        ds.field("deliveryGroupID", &self.deliveryGroupID());
        ds.field("difficulty", &self.difficulty());
        ds.field("rate", &self.rate());
        ds.field("dropTableFix", &self.dropTableFix());
        ds.field("dropTableRandom", &self.dropTableRandom());
        ds.field("captureRate", &self.captureRate());
        ds.field("captureLv", &self.captureLv());
        ds.field("bossPokePara", &self.bossPokePara());
        ds.field("bossPokeSize", &self.bossPokeSize());
        ds.field("bossDesc", &self.bossDesc());
        ds.field("raidTimeData", &self.raidTimeData());
        ds.finish()
    }
}
pub enum RaidTimeDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RaidTimeData<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RaidTimeData<'a> {
    type Inner = RaidTimeData<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> RaidTimeData<'a> {
    pub const VT_ISACTIVE: flatbuffers::VOffsetT = 4;
    pub const VT_GAMELIMIT: flatbuffers::VOffsetT = 6;
    pub const VT_CLIENTLIMIT: flatbuffers::VOffsetT = 8;
    pub const VT_COMMANDLIMIT: flatbuffers::VOffsetT = 10;
    pub const VT_POKEREVIVETIME: flatbuffers::VOffsetT = 12;
    pub const VT_AIINTERVALTIME: flatbuffers::VOffsetT = 14;
    pub const VT_AIINTERVALRAND: flatbuffers::VOffsetT = 16;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        RaidTimeData { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args RaidTimeDataArgs,
    ) -> flatbuffers::WIPOffset<RaidTimeData<'bldr>> {
        let mut builder = RaidTimeDataBuilder::new(_fbb);
        builder.add_aiIntervalRand(args.aiIntervalRand);
        builder.add_aiIntervalTime(args.aiIntervalTime);
        builder.add_pokeReviveTime(args.pokeReviveTime);
        builder.add_commandLimit(args.commandLimit);
        builder.add_clientLimit(args.clientLimit);
        builder.add_gameLimit(args.gameLimit);
        builder.add_isActive(args.isActive);
        builder.finish()
    }

    #[inline]
    pub fn isActive(&self) -> bool {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<bool>(RaidTimeData::VT_ISACTIVE, Some(false))
                .unwrap()
        }
    }
    #[inline]
    pub fn gameLimit(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(RaidTimeData::VT_GAMELIMIT, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn clientLimit(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(RaidTimeData::VT_CLIENTLIMIT, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn commandLimit(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(RaidTimeData::VT_COMMANDLIMIT, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn pokeReviveTime(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(RaidTimeData::VT_POKEREVIVETIME, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn aiIntervalTime(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(RaidTimeData::VT_AIINTERVALTIME, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn aiIntervalRand(&self) -> i32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i32>(RaidTimeData::VT_AIINTERVALRAND, Some(0))
                .unwrap()
        }
    }
}

impl flatbuffers::Verifiable for RaidTimeData<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<bool>("isActive", Self::VT_ISACTIVE, false)?
            .visit_field::<i32>("gameLimit", Self::VT_GAMELIMIT, false)?
            .visit_field::<i32>("clientLimit", Self::VT_CLIENTLIMIT, false)?
            .visit_field::<i32>("commandLimit", Self::VT_COMMANDLIMIT, false)?
            .visit_field::<i32>("pokeReviveTime", Self::VT_POKEREVIVETIME, false)?
            .visit_field::<i32>("aiIntervalTime", Self::VT_AIINTERVALTIME, false)?
            .visit_field::<i32>("aiIntervalRand", Self::VT_AIINTERVALRAND, false)?
            .finish();
        Ok(())
    }
}
pub struct RaidTimeDataArgs {
    pub isActive: bool,
    pub gameLimit: i32,
    pub clientLimit: i32,
    pub commandLimit: i32,
    pub pokeReviveTime: i32,
    pub aiIntervalTime: i32,
    pub aiIntervalRand: i32,
}
impl<'a> Default for RaidTimeDataArgs {
    #[inline]
    fn default() -> Self {
        RaidTimeDataArgs {
            isActive: false,
            gameLimit: 0,
            clientLimit: 0,
            commandLimit: 0,
            pokeReviveTime: 0,
            aiIntervalTime: 0,
            aiIntervalRand: 0,
        }
    }
}

pub struct RaidTimeDataBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RaidTimeDataBuilder<'a, 'b> {
    #[inline]
    pub fn add_isActive(&mut self, isActive: bool) {
        self.fbb_
            .push_slot::<bool>(RaidTimeData::VT_ISACTIVE, isActive, false);
    }
    #[inline]
    pub fn add_gameLimit(&mut self, gameLimit: i32) {
        self.fbb_
            .push_slot::<i32>(RaidTimeData::VT_GAMELIMIT, gameLimit, 0);
    }
    #[inline]
    pub fn add_clientLimit(&mut self, clientLimit: i32) {
        self.fbb_
            .push_slot::<i32>(RaidTimeData::VT_CLIENTLIMIT, clientLimit, 0);
    }
    #[inline]
    pub fn add_commandLimit(&mut self, commandLimit: i32) {
        self.fbb_
            .push_slot::<i32>(RaidTimeData::VT_COMMANDLIMIT, commandLimit, 0);
    }
    #[inline]
    pub fn add_pokeReviveTime(&mut self, pokeReviveTime: i32) {
        self.fbb_
            .push_slot::<i32>(RaidTimeData::VT_POKEREVIVETIME, pokeReviveTime, 0);
    }
    #[inline]
    pub fn add_aiIntervalTime(&mut self, aiIntervalTime: i32) {
        self.fbb_
            .push_slot::<i32>(RaidTimeData::VT_AIINTERVALTIME, aiIntervalTime, 0);
    }
    #[inline]
    pub fn add_aiIntervalRand(&mut self, aiIntervalRand: i32) {
        self.fbb_
            .push_slot::<i32>(RaidTimeData::VT_AIINTERVALRAND, aiIntervalRand, 0);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RaidTimeDataBuilder<'a, 'b> {
        let start = _fbb.start_table();
        RaidTimeDataBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<RaidTimeData<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for RaidTimeData<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("RaidTimeData");
        ds.field("isActive", &self.isActive());
        ds.field("gameLimit", &self.gameLimit());
        ds.field("clientLimit", &self.clientLimit());
        ds.field("commandLimit", &self.commandLimit());
        ds.field("pokeReviveTime", &self.pokeReviveTime());
        ds.field("aiIntervalTime", &self.aiIntervalTime());
        ds.field("aiIntervalRand", &self.aiIntervalRand());
        ds.finish()
    }
}
pub enum WazaSetOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct WazaSet<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for WazaSet<'a> {
    type Inner = WazaSet<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> WazaSet<'a> {
    pub const VT_WAZAID: flatbuffers::VOffsetT = 4;
    pub const VT_POINTUP: flatbuffers::VOffsetT = 6;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        WazaSet { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args WazaSetArgs,
    ) -> flatbuffers::WIPOffset<WazaSet<'bldr>> {
        let mut builder = WazaSetBuilder::new(_fbb);
        builder.add_wazaId(args.wazaId);
        builder.add_pointUp(args.pointUp);
        builder.finish()
    }

    #[inline]
    pub fn wazaId(&self) -> pml::common::WazaID {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<pml::common::WazaID>(
                    WazaSet::VT_WAZAID,
                    Some(pml::common::WazaID::WAZA_NULL),
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn pointUp(&self) -> i8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<i8>(WazaSet::VT_POINTUP, Some(0)).unwrap() }
    }
}

impl flatbuffers::Verifiable for WazaSet<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<pml::common::WazaID>("wazaId", Self::VT_WAZAID, false)?
            .visit_field::<i8>("pointUp", Self::VT_POINTUP, false)?
            .finish();
        Ok(())
    }
}
pub struct WazaSetArgs {
    pub wazaId: pml::common::WazaID,
    pub pointUp: i8,
}
impl<'a> Default for WazaSetArgs {
    #[inline]
    fn default() -> Self {
        WazaSetArgs {
            wazaId: pml::common::WazaID::WAZA_NULL,
            pointUp: 0,
        }
    }
}

pub struct WazaSetBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> WazaSetBuilder<'a, 'b> {
    #[inline]
    pub fn add_wazaId(&mut self, wazaId: pml::common::WazaID) {
        self.fbb_.push_slot::<pml::common::WazaID>(
            WazaSet::VT_WAZAID,
            wazaId,
            pml::common::WazaID::WAZA_NULL,
        );
    }
    #[inline]
    pub fn add_pointUp(&mut self, pointUp: i8) {
        self.fbb_.push_slot::<i8>(WazaSet::VT_POINTUP, pointUp, 0);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> WazaSetBuilder<'a, 'b> {
        let start = _fbb.start_table();
        WazaSetBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<WazaSet<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for WazaSet<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("WazaSet");
        ds.field("wazaId", &self.wazaId());
        ds.field("pointUp", &self.pointUp());
        ds.finish()
    }
}
#[inline]
/// Verifies that a buffer of bytes contains a `DeliveryRaidEnemyTableArray`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_delivery_raid_enemy_table_array_unchecked`.
pub fn root_as_delivery_raid_enemy_table_array(
    buf: &[u8],
) -> Result<DeliveryRaidEnemyTableArray, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root::<DeliveryRaidEnemyTableArray>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DeliveryRaidEnemyTableArray` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_delivery_raid_enemy_table_array_unchecked`.
pub fn size_prefixed_root_as_delivery_raid_enemy_table_array(
    buf: &[u8],
) -> Result<DeliveryRaidEnemyTableArray, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root::<DeliveryRaidEnemyTableArray>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DeliveryRaidEnemyTableArray` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_delivery_raid_enemy_table_array_unchecked`.
pub fn root_as_delivery_raid_enemy_table_array_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<DeliveryRaidEnemyTableArray<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root_with_opts::<DeliveryRaidEnemyTableArray<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DeliveryRaidEnemyTableArray` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_delivery_raid_enemy_table_array_unchecked`.
pub fn size_prefixed_root_as_delivery_raid_enemy_table_array_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<DeliveryRaidEnemyTableArray<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root_with_opts::<DeliveryRaidEnemyTableArray<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DeliveryRaidEnemyTableArray and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DeliveryRaidEnemyTableArray`.
pub unsafe fn root_as_delivery_raid_enemy_table_array_unchecked(
    buf: &[u8],
) -> DeliveryRaidEnemyTableArray {
    flatbuffers::root_unchecked::<DeliveryRaidEnemyTableArray>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DeliveryRaidEnemyTableArray and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DeliveryRaidEnemyTableArray`.
pub unsafe fn size_prefixed_root_as_delivery_raid_enemy_table_array_unchecked(
    buf: &[u8],
) -> DeliveryRaidEnemyTableArray {
    flatbuffers::size_prefixed_root_unchecked::<DeliveryRaidEnemyTableArray>(buf)
}
#[inline]
pub fn finish_delivery_raid_enemy_table_array_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<DeliveryRaidEnemyTableArray<'a>>,
) {
    fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_delivery_raid_enemy_table_array_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<DeliveryRaidEnemyTableArray<'a>>,
) {
    fbb.finish_size_prefixed(root, None);
}
#[allow(unused_imports, dead_code)]
pub mod pml {

    use core::cmp::Ordering;
    use core::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};
    #[allow(unused_imports, dead_code)]
    pub mod common {

        use core::cmp::Ordering;
        use core::mem;

        extern crate flatbuffers;
        use self::flatbuffers::{EndianScalar, Follow};

        #[deprecated(
            since = "2.0.0",
            note = "Use associated constants instead. This will no longer be generated in 2021."
        )]
        pub const ENUM_MIN_DEV_ID: u16 = 0;
        #[deprecated(
            since = "2.0.0",
            note = "Use associated constants instead. This will no longer be generated in 2021."
        )]
        pub const ENUM_MAX_DEV_ID: u16 = 1010;
        #[deprecated(
            since = "2.0.0",
            note = "Use associated constants instead. This will no longer be generated in 2021."
        )]
        #[allow(non_camel_case_types)]
        pub const ENUM_VALUES_DEV_ID: [DevID; 1011] = [
            DevID::DEV_NULL,
            DevID::DEV_HUSIGIDANE,
            DevID::DEV_HUSIGISOU,
            DevID::DEV_HUSIGIBANA,
            DevID::DEV_HITOKAGE,
            DevID::DEV_RIZAADO,
            DevID::DEV_RIZAADON,
            DevID::DEV_ZENIGAME,
            DevID::DEV_KAMEERU,
            DevID::DEV_KAMEKKUSU,
            DevID::DEV_KYATAPII,
            DevID::DEV_TORANSERU,
            DevID::DEV_BATAHURII,
            DevID::DEV_BIIDORU,
            DevID::DEV_KOKUUN,
            DevID::DEV_SUPIAA,
            DevID::DEV_POPPO,
            DevID::DEV_PIZYON,
            DevID::DEV_PIZYOTTO,
            DevID::DEV_KORATTA,
            DevID::DEV_RATTA,
            DevID::DEV_ONISUZUME,
            DevID::DEV_ONIDORIRU,
            DevID::DEV_AABO,
            DevID::DEV_AABOKKU,
            DevID::DEV_PIKATYUU,
            DevID::DEV_RAITYUU,
            DevID::DEV_SANDO,
            DevID::DEV_SANDOPAN,
            DevID::DEV_NIDORAN_F,
            DevID::DEV_NIDORIINA,
            DevID::DEV_NIDOKUIN,
            DevID::DEV_NIDORAN_M,
            DevID::DEV_NIDORIINO,
            DevID::DEV_NIDOKINGU,
            DevID::DEV_PIPPI,
            DevID::DEV_PIKUSII,
            DevID::DEV_ROKON,
            DevID::DEV_KYUUKON,
            DevID::DEV_PURIN,
            DevID::DEV_PUKURIN,
            DevID::DEV_ZUBATTO,
            DevID::DEV_GORUBATTO,
            DevID::DEV_NAZONOKUSA,
            DevID::DEV_KUSAIHANA,
            DevID::DEV_RAHURESIA,
            DevID::DEV_PARASU,
            DevID::DEV_PARASEKUTO,
            DevID::DEV_KONPAN,
            DevID::DEV_MORUFON,
            DevID::DEV_DHIGUDA,
            DevID::DEV_DAGUTORIO,
            DevID::DEV_NYAASU,
            DevID::DEV_PERUSIAN,
            DevID::DEV_KODAKKU,
            DevID::DEV_GORUDAKKU,
            DevID::DEV_MANKII,
            DevID::DEV_OKORIZARU,
            DevID::DEV_GAADHI,
            DevID::DEV_UINDHI,
            DevID::DEV_NYOROMO,
            DevID::DEV_NYOROZO,
            DevID::DEV_NYOROBON,
            DevID::DEV_KEESHI,
            DevID::DEV_YUNGERAA,
            DevID::DEV_HUUDHIN,
            DevID::DEV_WANRIKII,
            DevID::DEV_GOORIKII,
            DevID::DEV_KAIRIKII,
            DevID::DEV_MADATUBOMI,
            DevID::DEV_UTUDON,
            DevID::DEV_UTUBOTTO,
            DevID::DEV_MENOKURAGE,
            DevID::DEV_DOKUKURAGE,
            DevID::DEV_ISITUBUTE,
            DevID::DEV_GOROON,
            DevID::DEV_GOROONYA,
            DevID::DEV_PONIITA,
            DevID::DEV_GYAROPPU,
            DevID::DEV_YADON,
            DevID::DEV_YADORAN,
            DevID::DEV_KOIRU,
            DevID::DEV_REAKOIRU,
            DevID::DEV_KAMONEGI,
            DevID::DEV_DOODOO,
            DevID::DEV_DOODORIO,
            DevID::DEV_PAUWAU,
            DevID::DEV_ZYUGON,
            DevID::DEV_BETOBETAA,
            DevID::DEV_BETOBETON,
            DevID::DEV_SHERUDAA,
            DevID::DEV_PARUSHEN,
            DevID::DEV_GOOSU,
            DevID::DEV_GOOSUTO,
            DevID::DEV_GENGAA,
            DevID::DEV_IWAAKU,
            DevID::DEV_SURIIPU,
            DevID::DEV_SURIIPAA,
            DevID::DEV_KURABU,
            DevID::DEV_KINGURAA,
            DevID::DEV_BIRIRIDAMA,
            DevID::DEV_MARUMAIN,
            DevID::DEV_TAMATAMA,
            DevID::DEV_NASSII,
            DevID::DEV_KARAKARA,
            DevID::DEV_GARAGARA,
            DevID::DEV_SAWAMURAA,
            DevID::DEV_EBIWARAA,
            DevID::DEV_BERORINGA,
            DevID::DEV_DOGAASU,
            DevID::DEV_MATADOGASU,
            DevID::DEV_SAIHOON,
            DevID::DEV_SAIDON,
            DevID::DEV_RAKKII,
            DevID::DEV_MONZYARA,
            DevID::DEV_GARUURA,
            DevID::DEV_TATTUU,
            DevID::DEV_SIIDORA,
            DevID::DEV_TOSAKINTO,
            DevID::DEV_AZUMAOU,
            DevID::DEV_HITODEMAN,
            DevID::DEV_SUTAAMII,
            DevID::DEV_BARIYAADO,
            DevID::DEV_SUTORAIKU,
            DevID::DEV_RUUZYURA,
            DevID::DEV_EREBUU,
            DevID::DEV_BUUBAA,
            DevID::DEV_KAIROSU,
            DevID::DEV_KENTAROSU,
            DevID::DEV_KOIKINGU,
            DevID::DEV_GYARADOSU,
            DevID::DEV_RAPURASU,
            DevID::DEV_METAMON,
            DevID::DEV_IIBUI,
            DevID::DEV_SYAWAAZU,
            DevID::DEV_SANDAASU,
            DevID::DEV_BUUSUTAA,
            DevID::DEV_PORIGON,
            DevID::DEV_OMUNAITO,
            DevID::DEV_OMUSUTAA,
            DevID::DEV_KABUTO,
            DevID::DEV_KABUTOPUSU,
            DevID::DEV_PUTERA,
            DevID::DEV_KABIGON,
            DevID::DEV_HURIIZAA,
            DevID::DEV_SANDAA,
            DevID::DEV_FAIYAA,
            DevID::DEV_MINIRYUU,
            DevID::DEV_HAKURYUU,
            DevID::DEV_KAIRYUU,
            DevID::DEV_MYUUTUU,
            DevID::DEV_MYUU,
            DevID::DEV_TIKORIITA,
            DevID::DEV_BEIRIIHU,
            DevID::DEV_MEGANIUMU,
            DevID::DEV_HINOARASI,
            DevID::DEV_MAGUMARASI,
            DevID::DEV_BAKUHUUN,
            DevID::DEV_WANINOKO,
            DevID::DEV_ARIGEITU,
            DevID::DEV_OODAIRU,
            DevID::DEV_OTATI,
            DevID::DEV_OOTATI,
            DevID::DEV_HOOHOO,
            DevID::DEV_YORUNOZUKU,
            DevID::DEV_REDHIBA,
            DevID::DEV_REDHIAN,
            DevID::DEV_ITOMARU,
            DevID::DEV_ARIADOSU,
            DevID::DEV_KUROBATTO,
            DevID::DEV_TYONTII,
            DevID::DEV_RANTAAN,
            DevID::DEV_PITYUU,
            DevID::DEV_PHI,
            DevID::DEV_PUPURIN,
            DevID::DEV_TOGEPII,
            DevID::DEV_TOGETIKKU,
            DevID::DEV_NEITHI,
            DevID::DEV_NEITHIO,
            DevID::DEV_MERIIPU,
            DevID::DEV_MOKOKO,
            DevID::DEV_DENRYUU,
            DevID::DEV_KIREIHANA,
            DevID::DEV_MARIRU,
            DevID::DEV_MARIRURI,
            DevID::DEV_USOKKII,
            DevID::DEV_NYOROTONO,
            DevID::DEV_HANEKKO,
            DevID::DEV_POPOKKO,
            DevID::DEV_WATAKKO,
            DevID::DEV_EIPAMU,
            DevID::DEV_HIMANATTU,
            DevID::DEV_KIMAWARI,
            DevID::DEV_YANYANMA,
            DevID::DEV_UPAA,
            DevID::DEV_NUOO,
            DevID::DEV_EEFI,
            DevID::DEV_BURAKKII,
            DevID::DEV_YAMIKARASU,
            DevID::DEV_YADOKINGU,
            DevID::DEV_MUUMA,
            DevID::DEV_ANNOON,
            DevID::DEV_SOONANSU,
            DevID::DEV_KIRINRIKI,
            DevID::DEV_KUNUGIDAMA,
            DevID::DEV_FORETOSU,
            DevID::DEV_NOKOTTI,
            DevID::DEV_GURAIGAA,
            DevID::DEV_HAGANEERU,
            DevID::DEV_BURUU,
            DevID::DEV_GURANBURU,
            DevID::DEV_HARIISEN,
            DevID::DEV_HASSAMU,
            DevID::DEV_TUBOTUBO,
            DevID::DEV_HERAKUROSU,
            DevID::DEV_NYUURA,
            DevID::DEV_HIMEGUMA,
            DevID::DEV_RINGUMA,
            DevID::DEV_MAGUMAGGU,
            DevID::DEV_MAGUKARUGO,
            DevID::DEV_URIMUU,
            DevID::DEV_INOMUU,
            DevID::DEV_SANIIGO,
            DevID::DEV_TEPPOUO,
            DevID::DEV_OKUTAN,
            DevID::DEV_DERIBAADO,
            DevID::DEV_MANTAIN,
            DevID::DEV_EAAMUDO,
            DevID::DEV_DERUBIRU,
            DevID::DEV_HERUGAA,
            DevID::DEV_KINGUDORA,
            DevID::DEV_GOMAZOU,
            DevID::DEV_DONFAN,
            DevID::DEV_PORIGON2,
            DevID::DEV_ODOSISI,
            DevID::DEV_DOOBURU,
            DevID::DEV_BARUKII,
            DevID::DEV_KAPOERAA,
            DevID::DEV_MUTYUURU,
            DevID::DEV_EREKIDDO,
            DevID::DEV_BUBHI,
            DevID::DEV_MIRUTANKU,
            DevID::DEV_HAPINASU,
            DevID::DEV_RAIKOU,
            DevID::DEV_ENTEI,
            DevID::DEV_SUIKUN,
            DevID::DEV_YOOGIRASU,
            DevID::DEV_SANAGIRASU,
            DevID::DEV_BANGIRASU,
            DevID::DEV_RUGIA,
            DevID::DEV_HOUOU,
            DevID::DEV_SEREBHI,
            DevID::DEV_KIMORI,
            DevID::DEV_ZYUPUTORU,
            DevID::DEV_ZYUKAIN,
            DevID::DEV_ATYAMO,
            DevID::DEV_WAKASYAMO,
            DevID::DEV_BASYAAMO,
            DevID::DEV_MIZUGOROU,
            DevID::DEV_NUMAKUROO,
            DevID::DEV_RAGURAAZI,
            DevID::DEV_POTIENA,
            DevID::DEV_GURAENA,
            DevID::DEV_ZIGUZAGUMA,
            DevID::DEV_MASSUGUMA,
            DevID::DEV_KEMUSSO,
            DevID::DEV_KARASARISU,
            DevID::DEV_AGEHANTO,
            DevID::DEV_MAYURUDO,
            DevID::DEV_DOKUKEIRU,
            DevID::DEV_HASUBOO,
            DevID::DEV_HASUBURERO,
            DevID::DEV_RUNPAPPA,
            DevID::DEV_TANEBOO,
            DevID::DEV_KONOHANA,
            DevID::DEV_DAATENGU,
            DevID::DEV_SUBAME,
            DevID::DEV_OOSUBAME,
            DevID::DEV_KYAMOME,
            DevID::DEV_PERIPPAA,
            DevID::DEV_RARUTOSU,
            DevID::DEV_KIRURIA,
            DevID::DEV_SAANAITO,
            DevID::DEV_AMETAMA,
            DevID::DEV_AMEMOOSU,
            DevID::DEV_KINOKOKO,
            DevID::DEV_KINOGASSA,
            DevID::DEV_NAMAKERO,
            DevID::DEV_YARUKIMONO,
            DevID::DEV_KEKKINGU,
            DevID::DEV_TUTININ,
            DevID::DEV_TEKKANIN,
            DevID::DEV_NUKENIN,
            DevID::DEV_GONYONYO,
            DevID::DEV_DOGOOMU,
            DevID::DEV_BAKUONGU,
            DevID::DEV_MAKUNOSITA,
            DevID::DEV_HARITEYAMA,
            DevID::DEV_RURIRI,
            DevID::DEV_NOZUPASU,
            DevID::DEV_ENEKO,
            DevID::DEV_ENEKORORO,
            DevID::DEV_YAMIRAMI,
            DevID::DEV_KUTIITO,
            DevID::DEV_KOKODORA,
            DevID::DEV_KODORA,
            DevID::DEV_BOSUGODORA,
            DevID::DEV_ASANAN,
            DevID::DEV_TYAAREMU,
            DevID::DEV_RAKURAI,
            DevID::DEV_RAIBORUTO,
            DevID::DEV_PURASURU,
            DevID::DEV_MAINAN,
            DevID::DEV_BARUBIITO,
            DevID::DEV_IRUMIIZE,
            DevID::DEV_ROZERIA,
            DevID::DEV_GOKURIN,
            DevID::DEV_MARUNOOMU,
            DevID::DEV_KIBANIA,
            DevID::DEV_SAMEHADAA,
            DevID::DEV_HOERUKO,
            DevID::DEV_HOERUOO,
            DevID::DEV_DONMERU,
            DevID::DEV_BAKUUDA,
            DevID::DEV_KOOTASU,
            DevID::DEV_BANEBUU,
            DevID::DEV_BUUPIGGU,
            DevID::DEV_PATTIIRU,
            DevID::DEV_NAKKURAA,
            DevID::DEV_BIBURAABA,
            DevID::DEV_HURAIGON,
            DevID::DEV_SABONEA,
            DevID::DEV_NOKUTASU,
            DevID::DEV_TIRUTTO,
            DevID::DEV_TIRUTARISU,
            DevID::DEV_ZANGUUSU,
            DevID::DEV_HABUNEEKU,
            DevID::DEV_RUNATOON,
            DevID::DEV_SORUROKKU,
            DevID::DEV_DOZYOTTI,
            DevID::DEV_NAMAZUN,
            DevID::DEV_HEIGANI,
            DevID::DEV_SIZARIGAA,
            DevID::DEV_YAZIRON,
            DevID::DEV_NENDOORU,
            DevID::DEV_RIRIIRA,
            DevID::DEV_YUREIDORU,
            DevID::DEV_ANOPUSU,
            DevID::DEV_AAMARUDO,
            DevID::DEV_HINBASU,
            DevID::DEV_MIROKAROSU,
            DevID::DEV_POWARUN,
            DevID::DEV_KAKUREON,
            DevID::DEV_KAGEBOUZU,
            DevID::DEV_ZYUPETTA,
            DevID::DEV_YOMAWARU,
            DevID::DEV_SAMAYOORU,
            DevID::DEV_TOROPIUSU,
            DevID::DEV_TIRIIN,
            DevID::DEV_ABUSORU,
            DevID::DEV_SOONANO,
            DevID::DEV_YUKIWARASI,
            DevID::DEV_ONIGOORI,
            DevID::DEV_TAMAZARASI,
            DevID::DEV_TODOGURAA,
            DevID::DEV_TODOZERUGA,
            DevID::DEV_PAARURU,
            DevID::DEV_HANTEERU,
            DevID::DEV_SAKURABISU,
            DevID::DEV_ZIIRANSU,
            DevID::DEV_RABUKASU,
            DevID::DEV_TATUBEI,
            DevID::DEV_KOMORUU,
            DevID::DEV_BOOMANDA,
            DevID::DEV_DANBARU,
            DevID::DEV_METANGU,
            DevID::DEV_METAGUROSU,
            DevID::DEV_REZIROKKU,
            DevID::DEV_REZIAISU,
            DevID::DEV_REZISUTIRU,
            DevID::DEV_RATHIASU,
            DevID::DEV_RATHIOSU,
            DevID::DEV_KAIOOGA,
            DevID::DEV_GURAADON,
            DevID::DEV_REKKUUZA,
            DevID::DEV_ZIRAATI,
            DevID::DEV_DEOKISISU,
            DevID::DEV_NAETORU,
            DevID::DEV_HAYASIGAME,
            DevID::DEV_DODAITOSU,
            DevID::DEV_HIKOZARU,
            DevID::DEV_MOUKAZARU,
            DevID::DEV_GOUKAZARU,
            DevID::DEV_POTTYAMA,
            DevID::DEV_POTTAISI,
            DevID::DEV_ENPERUTO,
            DevID::DEV_MUKKURU,
            DevID::DEV_MUKUBAADO,
            DevID::DEV_MUKUHOOKU,
            DevID::DEV_BIPPA,
            DevID::DEV_BIIDARU,
            DevID::DEV_KOROBOOSI,
            DevID::DEV_KOROTOKKU,
            DevID::DEV_KORINKU,
            DevID::DEV_RUKUSIO,
            DevID::DEV_RENTORAA,
            DevID::DEV_SUBOMII,
            DevID::DEV_ROZUREIDO,
            DevID::DEV_ZUGAIDOSU,
            DevID::DEV_RAMUPARUDO,
            DevID::DEV_TATETOPUSU,
            DevID::DEV_TORIDEPUSU,
            DevID::DEV_MINOMUTTI,
            DevID::DEV_MINOMADAMU,
            DevID::DEV_GAAMEIRU,
            DevID::DEV_MITUHANII,
            DevID::DEV_BIIKUIN,
            DevID::DEV_PATIRISU,
            DevID::DEV_BUIZERU,
            DevID::DEV_HUROOZERU,
            DevID::DEV_THERINBO,
            DevID::DEV_THERIMU,
            DevID::DEV_KARANAKUSI,
            DevID::DEV_TORITODON,
            DevID::DEV_ETEBOOSU,
            DevID::DEV_HUWANTE,
            DevID::DEV_HUWARAIDO,
            DevID::DEV_MIMIRORU,
            DevID::DEV_MIMIROPPU,
            DevID::DEV_MUUMAAZI,
            DevID::DEV_DONKARASU,
            DevID::DEV_NYARUMAA,
            DevID::DEV_BUNYATTO,
            DevID::DEV_RIISYAN,
            DevID::DEV_SUKANPUU,
            DevID::DEV_SUKATANKU,
            DevID::DEV_DOOMIRAA,
            DevID::DEV_DOOTAKUN,
            DevID::DEV_USOHATI,
            DevID::DEV_MANENE,
            DevID::DEV_PINPUKU,
            DevID::DEV_PERAPPU,
            DevID::DEV_MIKARUGE,
            DevID::DEV_HUKAMARU,
            DevID::DEV_GABAITO,
            DevID::DEV_GABURIASU,
            DevID::DEV_GONBE,
            DevID::DEV_RIORU,
            DevID::DEV_RUKARIO,
            DevID::DEV_HIPOPOTASU,
            DevID::DEV_KABARUDON,
            DevID::DEV_SUKORUPI,
            DevID::DEV_DORAPION,
            DevID::DEV_GUREGGURU,
            DevID::DEV_DOKUROGGU,
            DevID::DEV_MASUKIPPA,
            DevID::DEV_KEIKOUO,
            DevID::DEV_NEORANTO,
            DevID::DEV_TAMANTA,
            DevID::DEV_YUKIKABURI,
            DevID::DEV_YUKINOOO,
            DevID::DEV_MANYUURA,
            DevID::DEV_ZIBAKOIRU,
            DevID::DEV_BEROBERUTO,
            DevID::DEV_DOSAIDON,
            DevID::DEV_MOZYANBO,
            DevID::DEV_EREKIBURU,
            DevID::DEV_BUUBAAN,
            DevID::DEV_TOGEKISSU,
            DevID::DEV_MEGAYANMA,
            DevID::DEV_RIIFIA,
            DevID::DEV_GUREISIA,
            DevID::DEV_GURAION,
            DevID::DEV_MANMUU,
            DevID::DEV_PORIGONz,
            DevID::DEV_ERUREIDO,
            DevID::DEV_DAINOOZU,
            DevID::DEV_YONOWAARU,
            DevID::DEV_YUKIMENOKO,
            DevID::DEV_ROTOMU,
            DevID::DEV_YUKUSII,
            DevID::DEV_EMURITTO,
            DevID::DEV_AGUNOMU,
            DevID::DEV_DHIARUGA,
            DevID::DEV_PARUKIA,
            DevID::DEV_HIIDORAN,
            DevID::DEV_REZIGIGASU,
            DevID::DEV_GIRATHINA,
            DevID::DEV_KURESERIA,
            DevID::DEV_FIONE,
            DevID::DEV_MANAFI,
            DevID::DEV_DAAKURAI,
            DevID::DEV_SHEIMI,
            DevID::DEV_ARUSEUSU,
            DevID::DEV_BIKUTHINI,
            DevID::DEV_TUTAAZYA,
            DevID::DEV_ZYANOBII,
            DevID::DEV_ZYAROODA,
            DevID::DEV_POKABU,
            DevID::DEV_TYAOBUU,
            DevID::DEV_ENBUOO,
            DevID::DEV_MIZYUMARU,
            DevID::DEV_HUTATIMARU,
            DevID::DEV_DAIKENKI,
            DevID::DEV_MINEZUMI,
            DevID::DEV_MIRUHOGGU,
            DevID::DEV_YOOTERII,
            DevID::DEV_HAADERIA,
            DevID::DEV_MUURANDO,
            DevID::DEV_TYORONEKO,
            DevID::DEV_REPARUDASU,
            DevID::DEV_YANAPPU,
            DevID::DEV_YANAKKII,
            DevID::DEV_BAOPPU,
            DevID::DEV_BAOKKII,
            DevID::DEV_HIYAPPU,
            DevID::DEV_HIYAKKII,
            DevID::DEV_MUNNA,
            DevID::DEV_MUSYAANA,
            DevID::DEV_MAMEPATO,
            DevID::DEV_HATOOBOO,
            DevID::DEV_KENHOROU,
            DevID::DEV_SIMAMA,
            DevID::DEV_ZEBURAIKA,
            DevID::DEV_DANGORO,
            DevID::DEV_GANTORU,
            DevID::DEV_GIGAIASU,
            DevID::DEV_KOROMORI,
            DevID::DEV_KOKOROMORI,
            DevID::DEV_MOGURYUU,
            DevID::DEV_DORYUUZU,
            DevID::DEV_TABUNNE,
            DevID::DEV_DOKKORAA,
            DevID::DEV_DOTEKKOTU,
            DevID::DEV_ROOBUSIN,
            DevID::DEV_OTAMARO,
            DevID::DEV_GAMAGARU,
            DevID::DEV_GAMAGEROGE,
            DevID::DEV_NAGEKI,
            DevID::DEV_DAGEKI,
            DevID::DEV_KURUMIRU,
            DevID::DEV_KURUMAYU,
            DevID::DEV_HAHAKOMORI,
            DevID::DEV_HUSIDE,
            DevID::DEV_HOIIGA,
            DevID::DEV_PENDORAA,
            DevID::DEV_MONMEN,
            DevID::DEV_ERUHUUN,
            DevID::DEV_TYURINE,
            DevID::DEV_DOREDHIA,
            DevID::DEV_BASURAO,
            DevID::DEV_MEGUROKO,
            DevID::DEV_WARUBIRU,
            DevID::DEV_WARUBIARU,
            DevID::DEV_DARUMAKKA,
            DevID::DEV_HIHIDARUMA,
            DevID::DEV_MARAKATTI,
            DevID::DEV_ISIZUMAI,
            DevID::DEV_IWAPARESU,
            DevID::DEV_ZURUGGU,
            DevID::DEV_ZURUZUKIN,
            DevID::DEV_SINBORAA,
            DevID::DEV_DESUMASU,
            DevID::DEV_DESUKAAN,
            DevID::DEV_PUROTOOGA,
            DevID::DEV_ABAGOORA,
            DevID::DEV_AAKEN,
            DevID::DEV_AAKEOSU,
            DevID::DEV_YABUKURON,
            DevID::DEV_DASUTODASU,
            DevID::DEV_ZOROA,
            DevID::DEV_ZOROAAKU,
            DevID::DEV_TIRAAMHI,
            DevID::DEV_TIRATIINO,
            DevID::DEV_GOTIMU,
            DevID::DEV_GOTIMIRU,
            DevID::DEV_GOTIRUZERU,
            DevID::DEV_YUNIRAN,
            DevID::DEV_DABURAN,
            DevID::DEV_RANKURUSU,
            DevID::DEV_KOARUHII,
            DevID::DEV_SUWANNA,
            DevID::DEV_BANIPUTTI,
            DevID::DEV_BANIRITTI,
            DevID::DEV_BAIBANIRA,
            DevID::DEV_SIKIZIKA,
            DevID::DEV_MEBUKIZIKA,
            DevID::DEV_EMONGA,
            DevID::DEV_KABURUMO,
            DevID::DEV_SYUBARUGO,
            DevID::DEV_TAMAGETAKE,
            DevID::DEV_MOROBARERU,
            DevID::DEV_PURURIRU,
            DevID::DEV_BURUNGERU,
            DevID::DEV_MAMANBOU,
            DevID::DEV_BATYURU,
            DevID::DEV_DENTYURA,
            DevID::DEV_TESSIIDO,
            DevID::DEV_NATTOREI,
            DevID::DEV_GIARU,
            DevID::DEV_GIGIARU,
            DevID::DEV_GIGIGIARU,
            DevID::DEV_SIBISIRASU,
            DevID::DEV_SIBIBIIRU,
            DevID::DEV_SIBIRUDON,
            DevID::DEV_RIGUREE,
            DevID::DEV_OOBEMU,
            DevID::DEV_HITOMOSI,
            DevID::DEV_RANPURAA,
            DevID::DEV_SYANDERA,
            DevID::DEV_KIBAGO,
            DevID::DEV_ONONDO,
            DevID::DEV_ONONOKUSU,
            DevID::DEV_KUMASYUN,
            DevID::DEV_TUNBEAA,
            DevID::DEV_HURIIZIO,
            DevID::DEV_TYOBOMAKI,
            DevID::DEV_AGIRUDAA,
            DevID::DEV_MAGGYO,
            DevID::DEV_KOZYOHUU,
            DevID::DEV_KOZYONDO,
            DevID::DEV_KURIMUGAN,
            DevID::DEV_GOBITTO,
            DevID::DEV_GORUUGU,
            DevID::DEV_KOMATANA,
            DevID::DEV_KIRIKIZAN,
            DevID::DEV_BAHHURON,
            DevID::DEV_WASIBON,
            DevID::DEV_WHOOGURU,
            DevID::DEV_BARUTYAI,
            DevID::DEV_BARUZIINA,
            DevID::DEV_KUITARAN,
            DevID::DEV_AIANTO,
            DevID::DEV_MONOZU,
            DevID::DEV_ZIHEDDO,
            DevID::DEV_SAZANDORA,
            DevID::DEV_MERARUBA,
            DevID::DEV_URUGAMOSU,
            DevID::DEV_KOBARUON,
            DevID::DEV_TERAKION,
            DevID::DEV_BIRIZION,
            DevID::DEV_TORUNEROSU,
            DevID::DEV_BORUTOROSU,
            DevID::DEV_RESIRAMU,
            DevID::DEV_ZEKUROMU,
            DevID::DEV_RANDOROSU,
            DevID::DEV_KYUREMU,
            DevID::DEV_KERUDHIO,
            DevID::DEV_MEROETTA,
            DevID::DEV_GENOSEKUTO,
            DevID::DEV_HARIMARON,
            DevID::DEV_HARIBOOGU,
            DevID::DEV_BURIGARON,
            DevID::DEV_FOKKO,
            DevID::DEV_TEERUNAA,
            DevID::DEV_MAFOKUSII,
            DevID::DEV_KEROMATU,
            DevID::DEV_GEKOGASIRA,
            DevID::DEV_GEKKOUGA,
            DevID::DEV_HORUBII,
            DevID::DEV_HORUUDO,
            DevID::DEV_YAYAKOMA,
            DevID::DEV_HINOYAKOMA,
            DevID::DEV_FAIAROO,
            DevID::DEV_KOHUKIMUSI,
            DevID::DEV_KOHUURAI,
            DevID::DEV_BIBIYON,
            DevID::DEV_SISIKO,
            DevID::DEV_KAENZISI,
            DevID::DEV_HURABEBE,
            DevID::DEV_HURAETTE,
            DevID::DEV_HURAAJESU,
            DevID::DEV_MHEEKURU,
            DevID::DEV_GOOGOOTO,
            DevID::DEV_YANTYAMU,
            DevID::DEV_GORONDA,
            DevID::DEV_TORIMIAN,
            DevID::DEV_NYASUPAA,
            DevID::DEV_NYAONIKUSU,
            DevID::DEV_HITOTUKI,
            DevID::DEV_NIDANGIRU,
            DevID::DEV_GIRUGARUDO,
            DevID::DEV_SYUSYUPU,
            DevID::DEV_HUREHUWAN,
            DevID::DEV_PEROPPAHU,
            DevID::DEV_PERORIIMU,
            DevID::DEV_MAAIIKA,
            DevID::DEV_KARAMANERO,
            DevID::DEV_KAMETETE,
            DevID::DEV_GAMENODESU,
            DevID::DEV_KUZUMOO,
            DevID::DEV_DORAMIDORO,
            DevID::DEV_UDEPPOU,
            DevID::DEV_BUROSUTAA,
            DevID::DEV_ERIKITERU,
            DevID::DEV_EREZAADO,
            DevID::DEV_TIGORASU,
            DevID::DEV_GATIGORASU,
            DevID::DEV_AMARUSU,
            DevID::DEV_AMARURUGA,
            DevID::DEV_NINFIA,
            DevID::DEV_RUTYABURU,
            DevID::DEV_DEDENNE,
            DevID::DEV_MERESII,
            DevID::DEV_NUMERA,
            DevID::DEV_NUMEIRU,
            DevID::DEV_NUMERUGON,
            DevID::DEV_KUREHFI,
            DevID::DEV_BOKUREE,
            DevID::DEV_OOROTTO,
            DevID::DEV_BAKETTYA,
            DevID::DEV_PANPUZIN,
            DevID::DEV_KATIKOORU,
            DevID::DEV_KUREBEESU,
            DevID::DEV_ONBATTO,
            DevID::DEV_ONBAAN,
            DevID::DEV_ZERUNEASU,
            DevID::DEV_IBERUTARU,
            DevID::DEV_ZIGARUDE,
            DevID::DEV_DHIANSII,
            DevID::DEV_HUUPA,
            DevID::DEV_BORUKENION,
            DevID::DEV_MOKUROO,
            DevID::DEV_HUKUSUROO,
            DevID::DEV_ZYUNAIPAA,
            DevID::DEV_NYABII,
            DevID::DEV_NYAHIITO,
            DevID::DEV_GAOGAEN,
            DevID::DEV_ASIMARI,
            DevID::DEV_OSYAMARI,
            DevID::DEV_ASIREENU,
            DevID::DEV_TUTUKERA,
            DevID::DEV_KERARAPPA,
            DevID::DEV_DODEKABASI,
            DevID::DEV_YANGUUSU,
            DevID::DEV_DEKAGUUSU,
            DevID::DEV_AGOZIMUSI,
            DevID::DEV_DENDIMUSI,
            DevID::DEV_KUWAGANON,
            DevID::DEV_MAKENKANI,
            DevID::DEV_KEKENKANI,
            DevID::DEV_ODORIDORI,
            DevID::DEV_ABURII,
            DevID::DEV_ABURIBON,
            DevID::DEV_IWANKO,
            DevID::DEV_RUGARUGAN,
            DevID::DEV_YOWASI,
            DevID::DEV_HIDOIDE,
            DevID::DEV_DOHIDOIDE,
            DevID::DEV_DOROBANKO,
            DevID::DEV_BANBADORO,
            DevID::DEV_SIZUKUMO,
            DevID::DEV_ONISIZUKUMO,
            DevID::DEV_KARIKIRI,
            DevID::DEV_RARANTESU,
            DevID::DEV_NEMASYU,
            DevID::DEV_MASHEEDO,
            DevID::DEV_YATOUMORI,
            DevID::DEV_ENNYUUTO,
            DevID::DEV_NUIKOGUMA,
            DevID::DEV_KITERUGUMA,
            DevID::DEV_AMAKAZI,
            DevID::DEV_AMAMAIKO,
            DevID::DEV_AMAAZYO,
            DevID::DEV_KYUWAWAA,
            DevID::DEV_YAREYUUTAN,
            DevID::DEV_NAGETUKESARU,
            DevID::DEV_KOSOKUMUSI,
            DevID::DEV_GUSOKUMUSYA,
            DevID::DEV_SUNABHA,
            DevID::DEV_SIRODESUNA,
            DevID::DEV_NAMAKOBUSI,
            DevID::DEV_TAIPUNURU,
            DevID::DEV_SIRUVHADHI,
            DevID::DEV_METENO,
            DevID::DEV_NEKKOARA,
            DevID::DEV_BAKUGAMESU,
            DevID::DEV_TOGEDEMARU,
            DevID::DEV_MIMIKKYU,
            DevID::DEV_HAGIGISIRI,
            DevID::DEV_ZIZIIRON,
            DevID::DEV_DADARIN,
            DevID::DEV_ZYARAKO,
            DevID::DEV_ZYARANGO,
            DevID::DEV_ZYARARANGA,
            DevID::DEV_KAPUKOKEKO,
            DevID::DEV_KAPUTETEHU,
            DevID::DEV_KAPUBURURU,
            DevID::DEV_KAPUREHIRE,
            DevID::DEV_KOSUMOGGU,
            DevID::DEV_KOSUMOUMU,
            DevID::DEV_SORUGAREO,
            DevID::DEV_RUNAAARA,
            DevID::DEV_UTUROIDO,
            DevID::DEV_MASSIBUUN,
            DevID::DEV_FEROOTHE,
            DevID::DEV_DENZYUMOKU,
            DevID::DEV_TEKKAGUYA,
            DevID::DEV_KAMITURUGI,
            DevID::DEV_AKUZIKINGU,
            DevID::DEV_NEKUROZUMA,
            DevID::DEV_MAGIANA,
            DevID::DEV_MAASYADOO,
            DevID::DEV_BEBENOMU,
            DevID::DEV_AAGOYON,
            DevID::DEV_TUNDETUNDE,
            DevID::DEV_ZUGADOON,
            DevID::DEV_ZERAORA,
            DevID::DEV_MERUTAN,
            DevID::DEV_MERUMETARU,
            DevID::DEV_SARUNORI,
            DevID::DEV_BATINKII,
            DevID::DEV_GORIRANDAA,
            DevID::DEV_HIBANII,
            DevID::DEV_RABIHUTTO,
            DevID::DEV_EESUBAAN,
            DevID::DEV_MESSON,
            DevID::DEV_ZIMEREON,
            DevID::DEV_INTEREON,
            DevID::DEV_HOSIGARISU,
            DevID::DEV_YOKUBARISU,
            DevID::DEV_KOKOGARA,
            DevID::DEV_AOGARASU,
            DevID::DEV_AAMAAGAA,
            DevID::DEV_SATTIMUSI,
            DevID::DEV_REDOOMUSI,
            DevID::DEV_IORUBU,
            DevID::DEV_KUSUNE,
            DevID::DEV_FOKUSURAI,
            DevID::DEV_HIMENKA,
            DevID::DEV_WATASIRAGA,
            DevID::DEV_UURUU,
            DevID::DEV_BAIUURUU,
            DevID::DEV_KAMUKAME,
            DevID::DEV_KAZIRIGAME,
            DevID::DEV_WANPATI,
            DevID::DEV_PARUSUWAN,
            DevID::DEV_TANDON,
            DevID::DEV_TOROGGON,
            DevID::DEV_SEKITANZAN,
            DevID::DEV_KAZITTYU,
            DevID::DEV_APPURYUU,
            DevID::DEV_TARUPPURU,
            DevID::DEV_SUNAHEBI,
            DevID::DEV_SADAIZYA,
            DevID::DEV_UUU,
            DevID::DEV_SASIKAMASU,
            DevID::DEV_KAMASUZYOO,
            DevID::DEV_EREZUN,
            DevID::DEV_SUTORINDAA,
            DevID::DEV_YAKUDE,
            DevID::DEV_MARUYAKUDE,
            DevID::DEV_TATAKKO,
            DevID::DEV_OTOSUPASU,
            DevID::DEV_YABATYA,
            DevID::DEV_POTTODESU,
            DevID::DEV_MIBURIMU,
            DevID::DEV_TEBURIMU,
            DevID::DEV_BURIMUON,
            DevID::DEV_BEROBAA,
            DevID::DEV_GIMOO,
            DevID::DEV_OORONGE,
            DevID::DEV_TATIHUSAGUMA,
            DevID::DEV_NYAIKINGU,
            DevID::DEV_SANIGOON,
            DevID::DEV_NEGIGANAITO,
            DevID::DEV_BARIKOORU,
            DevID::DEV_DESUBAAN,
            DevID::DEV_MAHOMIRU,
            DevID::DEV_MAHOIPPU,
            DevID::DEV_TAIREETU,
            DevID::DEV_BATINUNI,
            DevID::DEV_YUKIHAMI,
            DevID::DEV_MOSUNOU,
            DevID::DEV_ISIHENZIN,
            DevID::DEV_KOORIPPO,
            DevID::DEV_IESSAN,
            DevID::DEV_MORUPEKO,
            DevID::DEV_ZOUDOU,
            DevID::DEV_DAIOUDOU,
            DevID::DEV_PATTIRAGON,
            DevID::DEV_PATTIRUDON,
            DevID::DEV_UONORAGON,
            DevID::DEV_UOTIRUDON,
            DevID::DEV_ZYURARUDON,
            DevID::DEV_DORAMESIYA,
            DevID::DEV_DORONTI,
            DevID::DEV_DORAPARUTO,
            DevID::DEV_ZASIAN,
            DevID::DEV_ZAMAZENTA,
            DevID::DEV_MUGENDAINA,
            DevID::DEV_AAMAA1,
            DevID::DEV_AAMAA2,
            DevID::DEV_m23,
            DevID::DEV_REDEN,
            DevID::DEV_REDORA,
            DevID::DEV_HAKUBA,
            DevID::DEV_KOKUBA,
            DevID::DEV_KURAUN,
            DevID::DEV_ODOSISI2,
            DevID::DEV_SUTORAIKU2,
            DevID::DEV_HIMEGUMA3,
            DevID::DEV_rBASURAO2,
            DevID::DEV_rNYUURA2,
            DevID::DEV_rHARISEN2,
            DevID::DEV_FEATOROSU,
            DevID::DEV_NEKO1,
            DevID::DEV_NEKO2,
            DevID::DEV_NEKO3,
            DevID::DEV_WANI1,
            DevID::DEV_WANI2,
            DevID::DEV_WANI3,
            DevID::DEV_KAMO1,
            DevID::DEV_KAMO2,
            DevID::DEV_KAMO3,
            DevID::DEV_BUTA1,
            DevID::DEV_BUTA2,
            DevID::DEV_NOKOTTI2,
            DevID::DEV_KUMO1,
            DevID::DEV_KUMO2,
            DevID::DEV_BATTA1,
            DevID::DEV_BATTA2,
            DevID::DEV_SUKARABE1,
            DevID::DEV_SUKARABE2,
            DevID::DEV_OBAKEINU1,
            DevID::DEV_OBAKEINU2,
            DevID::DEV_DATYOU1,
            DevID::DEV_DATYOU2,
            DevID::DEV_KIRINRIKI2,
            DevID::DEV_UMIDHIGUDA,
            DevID::DEV_UMITORIO,
            DevID::DEV_OYAKATA,
            DevID::DEV_MERURUUSA,
            DevID::DEV_IRUKA1,
            DevID::DEV_IRUKA2,
            DevID::DEV_ORIIBU1,
            DevID::DEV_ORIIBU2,
            DevID::DEV_ORIIBU3,
            DevID::DEV_HABANERO1,
            DevID::DEV_HABANERO2,
            DevID::DEV_KAERU1,
            DevID::DEV_KAERU2,
            DevID::DEV_ENZIN1,
            DevID::DEV_ENZIN2,
            DevID::DEV_MIMIZU,
            DevID::DEV_NEZUMI1,
            DevID::DEV_NEZUMI2,
            DevID::DEV_OKAKUZIRA1,
            DevID::DEV_OKAKUZIRA2,
            DevID::DEV_KOORIDORA1,
            DevID::DEV_KOORIDORA2,
            DevID::DEV_KOORIDORA3,
            DevID::DEV_SUSIDORA,
            DevID::DEV_BAIKU,
            DevID::DEV_MAAMOTTO1,
            DevID::DEV_MAAMOTTO2,
            DevID::DEV_MAAMOTTO3,
            DevID::DEV_MIZUDORI1,
            DevID::DEV_MIZUDORI2,
            DevID::DEV_KOUNOTORI,
            DevID::DEV_INKO,
            DevID::DEV_HURAMINGO,
            DevID::DEV_KEGANI,
            DevID::DEV_GANEN1,
            DevID::DEV_GANEN2,
            DevID::DEV_GANEN3,
            DevID::DEV_KARUKAN1,
            DevID::DEV_KARUKAN2,
            DevID::DEV_AIAI1,
            DevID::DEV_AIAI2,
            DevID::DEV_PANINU1,
            DevID::DEV_PANINU2,
            DevID::DEV_MASUTHIHU1,
            DevID::DEV_MASUTHIHU2,
            DevID::DEV_TANBURU1,
            DevID::DEV_TANBURU2,
            DevID::DEV_KOIN1,
            DevID::DEV_KOIN2,
            DevID::DEV_ADONFAN,
            DevID::DEV_AMOROBARERU,
            DevID::DEV_AKETUBAN,
            DevID::DEV_AREAKOIRU,
            DevID::DEV_APURIN,
            DevID::DEV_AMUUMA,
            DevID::DEV_AURUGAMOSU,
            DevID::DEV_AAAAA,
            DevID::DEV_BDONFAN,
            DevID::DEV_BKETUBAN,
            DevID::DEV_BURUGAMOSU,
            DevID::DEV_BHARITEYAMA,
            DevID::DEV_BSAZANDORA,
            DevID::DEV_BBANGIRASU,
            DevID::DEV_BKOORI,
            DevID::DEV_BBBBB,
            DevID::DEV_ZYUNDEN1,
            DevID::DEV_ZYUNDEN2,
            DevID::DEV_ZYUNDEN3,
            DevID::DEV_ZYUNDEN4,
            DevID::DEV_AIGUANA,
            DevID::DEV_BIGUANA,
            DevID::DEV_FEARII1,
            DevID::DEV_FEARII2,
            DevID::DEV_FEARII3,
            DevID::DEV_HINOKO1,
            DevID::DEV_HINOKO2A,
            DevID::DEV_HINOKO2B,
            DevID::DEV_OKAKINGU,
            DevID::DEV_OKAGYARADOSU,
            DevID::DEV_KOMATANA3,
            DevID::DEV_rUPAA2,
            DevID::DEV_MANKII3,
        ];

        #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
        #[repr(transparent)]
        pub struct DevID(pub u16);
        #[allow(non_upper_case_globals)]
        impl DevID {
            pub const DEV_NULL: Self = Self(0);
            pub const DEV_HUSIGIDANE: Self = Self(1);
            pub const DEV_HUSIGISOU: Self = Self(2);
            pub const DEV_HUSIGIBANA: Self = Self(3);
            pub const DEV_HITOKAGE: Self = Self(4);
            pub const DEV_RIZAADO: Self = Self(5);
            pub const DEV_RIZAADON: Self = Self(6);
            pub const DEV_ZENIGAME: Self = Self(7);
            pub const DEV_KAMEERU: Self = Self(8);
            pub const DEV_KAMEKKUSU: Self = Self(9);
            pub const DEV_KYATAPII: Self = Self(10);
            pub const DEV_TORANSERU: Self = Self(11);
            pub const DEV_BATAHURII: Self = Self(12);
            pub const DEV_BIIDORU: Self = Self(13);
            pub const DEV_KOKUUN: Self = Self(14);
            pub const DEV_SUPIAA: Self = Self(15);
            pub const DEV_POPPO: Self = Self(16);
            pub const DEV_PIZYON: Self = Self(17);
            pub const DEV_PIZYOTTO: Self = Self(18);
            pub const DEV_KORATTA: Self = Self(19);
            pub const DEV_RATTA: Self = Self(20);
            pub const DEV_ONISUZUME: Self = Self(21);
            pub const DEV_ONIDORIRU: Self = Self(22);
            pub const DEV_AABO: Self = Self(23);
            pub const DEV_AABOKKU: Self = Self(24);
            pub const DEV_PIKATYUU: Self = Self(25);
            pub const DEV_RAITYUU: Self = Self(26);
            pub const DEV_SANDO: Self = Self(27);
            pub const DEV_SANDOPAN: Self = Self(28);
            pub const DEV_NIDORAN_F: Self = Self(29);
            pub const DEV_NIDORIINA: Self = Self(30);
            pub const DEV_NIDOKUIN: Self = Self(31);
            pub const DEV_NIDORAN_M: Self = Self(32);
            pub const DEV_NIDORIINO: Self = Self(33);
            pub const DEV_NIDOKINGU: Self = Self(34);
            pub const DEV_PIPPI: Self = Self(35);
            pub const DEV_PIKUSII: Self = Self(36);
            pub const DEV_ROKON: Self = Self(37);
            pub const DEV_KYUUKON: Self = Self(38);
            pub const DEV_PURIN: Self = Self(39);
            pub const DEV_PUKURIN: Self = Self(40);
            pub const DEV_ZUBATTO: Self = Self(41);
            pub const DEV_GORUBATTO: Self = Self(42);
            pub const DEV_NAZONOKUSA: Self = Self(43);
            pub const DEV_KUSAIHANA: Self = Self(44);
            pub const DEV_RAHURESIA: Self = Self(45);
            pub const DEV_PARASU: Self = Self(46);
            pub const DEV_PARASEKUTO: Self = Self(47);
            pub const DEV_KONPAN: Self = Self(48);
            pub const DEV_MORUFON: Self = Self(49);
            pub const DEV_DHIGUDA: Self = Self(50);
            pub const DEV_DAGUTORIO: Self = Self(51);
            pub const DEV_NYAASU: Self = Self(52);
            pub const DEV_PERUSIAN: Self = Self(53);
            pub const DEV_KODAKKU: Self = Self(54);
            pub const DEV_GORUDAKKU: Self = Self(55);
            pub const DEV_MANKII: Self = Self(56);
            pub const DEV_OKORIZARU: Self = Self(57);
            pub const DEV_GAADHI: Self = Self(58);
            pub const DEV_UINDHI: Self = Self(59);
            pub const DEV_NYOROMO: Self = Self(60);
            pub const DEV_NYOROZO: Self = Self(61);
            pub const DEV_NYOROBON: Self = Self(62);
            pub const DEV_KEESHI: Self = Self(63);
            pub const DEV_YUNGERAA: Self = Self(64);
            pub const DEV_HUUDHIN: Self = Self(65);
            pub const DEV_WANRIKII: Self = Self(66);
            pub const DEV_GOORIKII: Self = Self(67);
            pub const DEV_KAIRIKII: Self = Self(68);
            pub const DEV_MADATUBOMI: Self = Self(69);
            pub const DEV_UTUDON: Self = Self(70);
            pub const DEV_UTUBOTTO: Self = Self(71);
            pub const DEV_MENOKURAGE: Self = Self(72);
            pub const DEV_DOKUKURAGE: Self = Self(73);
            pub const DEV_ISITUBUTE: Self = Self(74);
            pub const DEV_GOROON: Self = Self(75);
            pub const DEV_GOROONYA: Self = Self(76);
            pub const DEV_PONIITA: Self = Self(77);
            pub const DEV_GYAROPPU: Self = Self(78);
            pub const DEV_YADON: Self = Self(79);
            pub const DEV_YADORAN: Self = Self(80);
            pub const DEV_KOIRU: Self = Self(81);
            pub const DEV_REAKOIRU: Self = Self(82);
            pub const DEV_KAMONEGI: Self = Self(83);
            pub const DEV_DOODOO: Self = Self(84);
            pub const DEV_DOODORIO: Self = Self(85);
            pub const DEV_PAUWAU: Self = Self(86);
            pub const DEV_ZYUGON: Self = Self(87);
            pub const DEV_BETOBETAA: Self = Self(88);
            pub const DEV_BETOBETON: Self = Self(89);
            pub const DEV_SHERUDAA: Self = Self(90);
            pub const DEV_PARUSHEN: Self = Self(91);
            pub const DEV_GOOSU: Self = Self(92);
            pub const DEV_GOOSUTO: Self = Self(93);
            pub const DEV_GENGAA: Self = Self(94);
            pub const DEV_IWAAKU: Self = Self(95);
            pub const DEV_SURIIPU: Self = Self(96);
            pub const DEV_SURIIPAA: Self = Self(97);
            pub const DEV_KURABU: Self = Self(98);
            pub const DEV_KINGURAA: Self = Self(99);
            pub const DEV_BIRIRIDAMA: Self = Self(100);
            pub const DEV_MARUMAIN: Self = Self(101);
            pub const DEV_TAMATAMA: Self = Self(102);
            pub const DEV_NASSII: Self = Self(103);
            pub const DEV_KARAKARA: Self = Self(104);
            pub const DEV_GARAGARA: Self = Self(105);
            pub const DEV_SAWAMURAA: Self = Self(106);
            pub const DEV_EBIWARAA: Self = Self(107);
            pub const DEV_BERORINGA: Self = Self(108);
            pub const DEV_DOGAASU: Self = Self(109);
            pub const DEV_MATADOGASU: Self = Self(110);
            pub const DEV_SAIHOON: Self = Self(111);
            pub const DEV_SAIDON: Self = Self(112);
            pub const DEV_RAKKII: Self = Self(113);
            pub const DEV_MONZYARA: Self = Self(114);
            pub const DEV_GARUURA: Self = Self(115);
            pub const DEV_TATTUU: Self = Self(116);
            pub const DEV_SIIDORA: Self = Self(117);
            pub const DEV_TOSAKINTO: Self = Self(118);
            pub const DEV_AZUMAOU: Self = Self(119);
            pub const DEV_HITODEMAN: Self = Self(120);
            pub const DEV_SUTAAMII: Self = Self(121);
            pub const DEV_BARIYAADO: Self = Self(122);
            pub const DEV_SUTORAIKU: Self = Self(123);
            pub const DEV_RUUZYURA: Self = Self(124);
            pub const DEV_EREBUU: Self = Self(125);
            pub const DEV_BUUBAA: Self = Self(126);
            pub const DEV_KAIROSU: Self = Self(127);
            pub const DEV_KENTAROSU: Self = Self(128);
            pub const DEV_KOIKINGU: Self = Self(129);
            pub const DEV_GYARADOSU: Self = Self(130);
            pub const DEV_RAPURASU: Self = Self(131);
            pub const DEV_METAMON: Self = Self(132);
            pub const DEV_IIBUI: Self = Self(133);
            pub const DEV_SYAWAAZU: Self = Self(134);
            pub const DEV_SANDAASU: Self = Self(135);
            pub const DEV_BUUSUTAA: Self = Self(136);
            pub const DEV_PORIGON: Self = Self(137);
            pub const DEV_OMUNAITO: Self = Self(138);
            pub const DEV_OMUSUTAA: Self = Self(139);
            pub const DEV_KABUTO: Self = Self(140);
            pub const DEV_KABUTOPUSU: Self = Self(141);
            pub const DEV_PUTERA: Self = Self(142);
            pub const DEV_KABIGON: Self = Self(143);
            pub const DEV_HURIIZAA: Self = Self(144);
            pub const DEV_SANDAA: Self = Self(145);
            pub const DEV_FAIYAA: Self = Self(146);
            pub const DEV_MINIRYUU: Self = Self(147);
            pub const DEV_HAKURYUU: Self = Self(148);
            pub const DEV_KAIRYUU: Self = Self(149);
            pub const DEV_MYUUTUU: Self = Self(150);
            pub const DEV_MYUU: Self = Self(151);
            pub const DEV_TIKORIITA: Self = Self(152);
            pub const DEV_BEIRIIHU: Self = Self(153);
            pub const DEV_MEGANIUMU: Self = Self(154);
            pub const DEV_HINOARASI: Self = Self(155);
            pub const DEV_MAGUMARASI: Self = Self(156);
            pub const DEV_BAKUHUUN: Self = Self(157);
            pub const DEV_WANINOKO: Self = Self(158);
            pub const DEV_ARIGEITU: Self = Self(159);
            pub const DEV_OODAIRU: Self = Self(160);
            pub const DEV_OTATI: Self = Self(161);
            pub const DEV_OOTATI: Self = Self(162);
            pub const DEV_HOOHOO: Self = Self(163);
            pub const DEV_YORUNOZUKU: Self = Self(164);
            pub const DEV_REDHIBA: Self = Self(165);
            pub const DEV_REDHIAN: Self = Self(166);
            pub const DEV_ITOMARU: Self = Self(167);
            pub const DEV_ARIADOSU: Self = Self(168);
            pub const DEV_KUROBATTO: Self = Self(169);
            pub const DEV_TYONTII: Self = Self(170);
            pub const DEV_RANTAAN: Self = Self(171);
            pub const DEV_PITYUU: Self = Self(172);
            pub const DEV_PHI: Self = Self(173);
            pub const DEV_PUPURIN: Self = Self(174);
            pub const DEV_TOGEPII: Self = Self(175);
            pub const DEV_TOGETIKKU: Self = Self(176);
            pub const DEV_NEITHI: Self = Self(177);
            pub const DEV_NEITHIO: Self = Self(178);
            pub const DEV_MERIIPU: Self = Self(179);
            pub const DEV_MOKOKO: Self = Self(180);
            pub const DEV_DENRYUU: Self = Self(181);
            pub const DEV_KIREIHANA: Self = Self(182);
            pub const DEV_MARIRU: Self = Self(183);
            pub const DEV_MARIRURI: Self = Self(184);
            pub const DEV_USOKKII: Self = Self(185);
            pub const DEV_NYOROTONO: Self = Self(186);
            pub const DEV_HANEKKO: Self = Self(187);
            pub const DEV_POPOKKO: Self = Self(188);
            pub const DEV_WATAKKO: Self = Self(189);
            pub const DEV_EIPAMU: Self = Self(190);
            pub const DEV_HIMANATTU: Self = Self(191);
            pub const DEV_KIMAWARI: Self = Self(192);
            pub const DEV_YANYANMA: Self = Self(193);
            pub const DEV_UPAA: Self = Self(194);
            pub const DEV_NUOO: Self = Self(195);
            pub const DEV_EEFI: Self = Self(196);
            pub const DEV_BURAKKII: Self = Self(197);
            pub const DEV_YAMIKARASU: Self = Self(198);
            pub const DEV_YADOKINGU: Self = Self(199);
            pub const DEV_MUUMA: Self = Self(200);
            pub const DEV_ANNOON: Self = Self(201);
            pub const DEV_SOONANSU: Self = Self(202);
            pub const DEV_KIRINRIKI: Self = Self(203);
            pub const DEV_KUNUGIDAMA: Self = Self(204);
            pub const DEV_FORETOSU: Self = Self(205);
            pub const DEV_NOKOTTI: Self = Self(206);
            pub const DEV_GURAIGAA: Self = Self(207);
            pub const DEV_HAGANEERU: Self = Self(208);
            pub const DEV_BURUU: Self = Self(209);
            pub const DEV_GURANBURU: Self = Self(210);
            pub const DEV_HARIISEN: Self = Self(211);
            pub const DEV_HASSAMU: Self = Self(212);
            pub const DEV_TUBOTUBO: Self = Self(213);
            pub const DEV_HERAKUROSU: Self = Self(214);
            pub const DEV_NYUURA: Self = Self(215);
            pub const DEV_HIMEGUMA: Self = Self(216);
            pub const DEV_RINGUMA: Self = Self(217);
            pub const DEV_MAGUMAGGU: Self = Self(218);
            pub const DEV_MAGUKARUGO: Self = Self(219);
            pub const DEV_URIMUU: Self = Self(220);
            pub const DEV_INOMUU: Self = Self(221);
            pub const DEV_SANIIGO: Self = Self(222);
            pub const DEV_TEPPOUO: Self = Self(223);
            pub const DEV_OKUTAN: Self = Self(224);
            pub const DEV_DERIBAADO: Self = Self(225);
            pub const DEV_MANTAIN: Self = Self(226);
            pub const DEV_EAAMUDO: Self = Self(227);
            pub const DEV_DERUBIRU: Self = Self(228);
            pub const DEV_HERUGAA: Self = Self(229);
            pub const DEV_KINGUDORA: Self = Self(230);
            pub const DEV_GOMAZOU: Self = Self(231);
            pub const DEV_DONFAN: Self = Self(232);
            pub const DEV_PORIGON2: Self = Self(233);
            pub const DEV_ODOSISI: Self = Self(234);
            pub const DEV_DOOBURU: Self = Self(235);
            pub const DEV_BARUKII: Self = Self(236);
            pub const DEV_KAPOERAA: Self = Self(237);
            pub const DEV_MUTYUURU: Self = Self(238);
            pub const DEV_EREKIDDO: Self = Self(239);
            pub const DEV_BUBHI: Self = Self(240);
            pub const DEV_MIRUTANKU: Self = Self(241);
            pub const DEV_HAPINASU: Self = Self(242);
            pub const DEV_RAIKOU: Self = Self(243);
            pub const DEV_ENTEI: Self = Self(244);
            pub const DEV_SUIKUN: Self = Self(245);
            pub const DEV_YOOGIRASU: Self = Self(246);
            pub const DEV_SANAGIRASU: Self = Self(247);
            pub const DEV_BANGIRASU: Self = Self(248);
            pub const DEV_RUGIA: Self = Self(249);
            pub const DEV_HOUOU: Self = Self(250);
            pub const DEV_SEREBHI: Self = Self(251);
            pub const DEV_KIMORI: Self = Self(252);
            pub const DEV_ZYUPUTORU: Self = Self(253);
            pub const DEV_ZYUKAIN: Self = Self(254);
            pub const DEV_ATYAMO: Self = Self(255);
            pub const DEV_WAKASYAMO: Self = Self(256);
            pub const DEV_BASYAAMO: Self = Self(257);
            pub const DEV_MIZUGOROU: Self = Self(258);
            pub const DEV_NUMAKUROO: Self = Self(259);
            pub const DEV_RAGURAAZI: Self = Self(260);
            pub const DEV_POTIENA: Self = Self(261);
            pub const DEV_GURAENA: Self = Self(262);
            pub const DEV_ZIGUZAGUMA: Self = Self(263);
            pub const DEV_MASSUGUMA: Self = Self(264);
            pub const DEV_KEMUSSO: Self = Self(265);
            pub const DEV_KARASARISU: Self = Self(266);
            pub const DEV_AGEHANTO: Self = Self(267);
            pub const DEV_MAYURUDO: Self = Self(268);
            pub const DEV_DOKUKEIRU: Self = Self(269);
            pub const DEV_HASUBOO: Self = Self(270);
            pub const DEV_HASUBURERO: Self = Self(271);
            pub const DEV_RUNPAPPA: Self = Self(272);
            pub const DEV_TANEBOO: Self = Self(273);
            pub const DEV_KONOHANA: Self = Self(274);
            pub const DEV_DAATENGU: Self = Self(275);
            pub const DEV_SUBAME: Self = Self(276);
            pub const DEV_OOSUBAME: Self = Self(277);
            pub const DEV_KYAMOME: Self = Self(278);
            pub const DEV_PERIPPAA: Self = Self(279);
            pub const DEV_RARUTOSU: Self = Self(280);
            pub const DEV_KIRURIA: Self = Self(281);
            pub const DEV_SAANAITO: Self = Self(282);
            pub const DEV_AMETAMA: Self = Self(283);
            pub const DEV_AMEMOOSU: Self = Self(284);
            pub const DEV_KINOKOKO: Self = Self(285);
            pub const DEV_KINOGASSA: Self = Self(286);
            pub const DEV_NAMAKERO: Self = Self(287);
            pub const DEV_YARUKIMONO: Self = Self(288);
            pub const DEV_KEKKINGU: Self = Self(289);
            pub const DEV_TUTININ: Self = Self(290);
            pub const DEV_TEKKANIN: Self = Self(291);
            pub const DEV_NUKENIN: Self = Self(292);
            pub const DEV_GONYONYO: Self = Self(293);
            pub const DEV_DOGOOMU: Self = Self(294);
            pub const DEV_BAKUONGU: Self = Self(295);
            pub const DEV_MAKUNOSITA: Self = Self(296);
            pub const DEV_HARITEYAMA: Self = Self(297);
            pub const DEV_RURIRI: Self = Self(298);
            pub const DEV_NOZUPASU: Self = Self(299);
            pub const DEV_ENEKO: Self = Self(300);
            pub const DEV_ENEKORORO: Self = Self(301);
            pub const DEV_YAMIRAMI: Self = Self(302);
            pub const DEV_KUTIITO: Self = Self(303);
            pub const DEV_KOKODORA: Self = Self(304);
            pub const DEV_KODORA: Self = Self(305);
            pub const DEV_BOSUGODORA: Self = Self(306);
            pub const DEV_ASANAN: Self = Self(307);
            pub const DEV_TYAAREMU: Self = Self(308);
            pub const DEV_RAKURAI: Self = Self(309);
            pub const DEV_RAIBORUTO: Self = Self(310);
            pub const DEV_PURASURU: Self = Self(311);
            pub const DEV_MAINAN: Self = Self(312);
            pub const DEV_BARUBIITO: Self = Self(313);
            pub const DEV_IRUMIIZE: Self = Self(314);
            pub const DEV_ROZERIA: Self = Self(315);
            pub const DEV_GOKURIN: Self = Self(316);
            pub const DEV_MARUNOOMU: Self = Self(317);
            pub const DEV_KIBANIA: Self = Self(318);
            pub const DEV_SAMEHADAA: Self = Self(319);
            pub const DEV_HOERUKO: Self = Self(320);
            pub const DEV_HOERUOO: Self = Self(321);
            pub const DEV_DONMERU: Self = Self(322);
            pub const DEV_BAKUUDA: Self = Self(323);
            pub const DEV_KOOTASU: Self = Self(324);
            pub const DEV_BANEBUU: Self = Self(325);
            pub const DEV_BUUPIGGU: Self = Self(326);
            pub const DEV_PATTIIRU: Self = Self(327);
            pub const DEV_NAKKURAA: Self = Self(328);
            pub const DEV_BIBURAABA: Self = Self(329);
            pub const DEV_HURAIGON: Self = Self(330);
            pub const DEV_SABONEA: Self = Self(331);
            pub const DEV_NOKUTASU: Self = Self(332);
            pub const DEV_TIRUTTO: Self = Self(333);
            pub const DEV_TIRUTARISU: Self = Self(334);
            pub const DEV_ZANGUUSU: Self = Self(335);
            pub const DEV_HABUNEEKU: Self = Self(336);
            pub const DEV_RUNATOON: Self = Self(337);
            pub const DEV_SORUROKKU: Self = Self(338);
            pub const DEV_DOZYOTTI: Self = Self(339);
            pub const DEV_NAMAZUN: Self = Self(340);
            pub const DEV_HEIGANI: Self = Self(341);
            pub const DEV_SIZARIGAA: Self = Self(342);
            pub const DEV_YAZIRON: Self = Self(343);
            pub const DEV_NENDOORU: Self = Self(344);
            pub const DEV_RIRIIRA: Self = Self(345);
            pub const DEV_YUREIDORU: Self = Self(346);
            pub const DEV_ANOPUSU: Self = Self(347);
            pub const DEV_AAMARUDO: Self = Self(348);
            pub const DEV_HINBASU: Self = Self(349);
            pub const DEV_MIROKAROSU: Self = Self(350);
            pub const DEV_POWARUN: Self = Self(351);
            pub const DEV_KAKUREON: Self = Self(352);
            pub const DEV_KAGEBOUZU: Self = Self(353);
            pub const DEV_ZYUPETTA: Self = Self(354);
            pub const DEV_YOMAWARU: Self = Self(355);
            pub const DEV_SAMAYOORU: Self = Self(356);
            pub const DEV_TOROPIUSU: Self = Self(357);
            pub const DEV_TIRIIN: Self = Self(358);
            pub const DEV_ABUSORU: Self = Self(359);
            pub const DEV_SOONANO: Self = Self(360);
            pub const DEV_YUKIWARASI: Self = Self(361);
            pub const DEV_ONIGOORI: Self = Self(362);
            pub const DEV_TAMAZARASI: Self = Self(363);
            pub const DEV_TODOGURAA: Self = Self(364);
            pub const DEV_TODOZERUGA: Self = Self(365);
            pub const DEV_PAARURU: Self = Self(366);
            pub const DEV_HANTEERU: Self = Self(367);
            pub const DEV_SAKURABISU: Self = Self(368);
            pub const DEV_ZIIRANSU: Self = Self(369);
            pub const DEV_RABUKASU: Self = Self(370);
            pub const DEV_TATUBEI: Self = Self(371);
            pub const DEV_KOMORUU: Self = Self(372);
            pub const DEV_BOOMANDA: Self = Self(373);
            pub const DEV_DANBARU: Self = Self(374);
            pub const DEV_METANGU: Self = Self(375);
            pub const DEV_METAGUROSU: Self = Self(376);
            pub const DEV_REZIROKKU: Self = Self(377);
            pub const DEV_REZIAISU: Self = Self(378);
            pub const DEV_REZISUTIRU: Self = Self(379);
            pub const DEV_RATHIASU: Self = Self(380);
            pub const DEV_RATHIOSU: Self = Self(381);
            pub const DEV_KAIOOGA: Self = Self(382);
            pub const DEV_GURAADON: Self = Self(383);
            pub const DEV_REKKUUZA: Self = Self(384);
            pub const DEV_ZIRAATI: Self = Self(385);
            pub const DEV_DEOKISISU: Self = Self(386);
            pub const DEV_NAETORU: Self = Self(387);
            pub const DEV_HAYASIGAME: Self = Self(388);
            pub const DEV_DODAITOSU: Self = Self(389);
            pub const DEV_HIKOZARU: Self = Self(390);
            pub const DEV_MOUKAZARU: Self = Self(391);
            pub const DEV_GOUKAZARU: Self = Self(392);
            pub const DEV_POTTYAMA: Self = Self(393);
            pub const DEV_POTTAISI: Self = Self(394);
            pub const DEV_ENPERUTO: Self = Self(395);
            pub const DEV_MUKKURU: Self = Self(396);
            pub const DEV_MUKUBAADO: Self = Self(397);
            pub const DEV_MUKUHOOKU: Self = Self(398);
            pub const DEV_BIPPA: Self = Self(399);
            pub const DEV_BIIDARU: Self = Self(400);
            pub const DEV_KOROBOOSI: Self = Self(401);
            pub const DEV_KOROTOKKU: Self = Self(402);
            pub const DEV_KORINKU: Self = Self(403);
            pub const DEV_RUKUSIO: Self = Self(404);
            pub const DEV_RENTORAA: Self = Self(405);
            pub const DEV_SUBOMII: Self = Self(406);
            pub const DEV_ROZUREIDO: Self = Self(407);
            pub const DEV_ZUGAIDOSU: Self = Self(408);
            pub const DEV_RAMUPARUDO: Self = Self(409);
            pub const DEV_TATETOPUSU: Self = Self(410);
            pub const DEV_TORIDEPUSU: Self = Self(411);
            pub const DEV_MINOMUTTI: Self = Self(412);
            pub const DEV_MINOMADAMU: Self = Self(413);
            pub const DEV_GAAMEIRU: Self = Self(414);
            pub const DEV_MITUHANII: Self = Self(415);
            pub const DEV_BIIKUIN: Self = Self(416);
            pub const DEV_PATIRISU: Self = Self(417);
            pub const DEV_BUIZERU: Self = Self(418);
            pub const DEV_HUROOZERU: Self = Self(419);
            pub const DEV_THERINBO: Self = Self(420);
            pub const DEV_THERIMU: Self = Self(421);
            pub const DEV_KARANAKUSI: Self = Self(422);
            pub const DEV_TORITODON: Self = Self(423);
            pub const DEV_ETEBOOSU: Self = Self(424);
            pub const DEV_HUWANTE: Self = Self(425);
            pub const DEV_HUWARAIDO: Self = Self(426);
            pub const DEV_MIMIRORU: Self = Self(427);
            pub const DEV_MIMIROPPU: Self = Self(428);
            pub const DEV_MUUMAAZI: Self = Self(429);
            pub const DEV_DONKARASU: Self = Self(430);
            pub const DEV_NYARUMAA: Self = Self(431);
            pub const DEV_BUNYATTO: Self = Self(432);
            pub const DEV_RIISYAN: Self = Self(433);
            pub const DEV_SUKANPUU: Self = Self(434);
            pub const DEV_SUKATANKU: Self = Self(435);
            pub const DEV_DOOMIRAA: Self = Self(436);
            pub const DEV_DOOTAKUN: Self = Self(437);
            pub const DEV_USOHATI: Self = Self(438);
            pub const DEV_MANENE: Self = Self(439);
            pub const DEV_PINPUKU: Self = Self(440);
            pub const DEV_PERAPPU: Self = Self(441);
            pub const DEV_MIKARUGE: Self = Self(442);
            pub const DEV_HUKAMARU: Self = Self(443);
            pub const DEV_GABAITO: Self = Self(444);
            pub const DEV_GABURIASU: Self = Self(445);
            pub const DEV_GONBE: Self = Self(446);
            pub const DEV_RIORU: Self = Self(447);
            pub const DEV_RUKARIO: Self = Self(448);
            pub const DEV_HIPOPOTASU: Self = Self(449);
            pub const DEV_KABARUDON: Self = Self(450);
            pub const DEV_SUKORUPI: Self = Self(451);
            pub const DEV_DORAPION: Self = Self(452);
            pub const DEV_GUREGGURU: Self = Self(453);
            pub const DEV_DOKUROGGU: Self = Self(454);
            pub const DEV_MASUKIPPA: Self = Self(455);
            pub const DEV_KEIKOUO: Self = Self(456);
            pub const DEV_NEORANTO: Self = Self(457);
            pub const DEV_TAMANTA: Self = Self(458);
            pub const DEV_YUKIKABURI: Self = Self(459);
            pub const DEV_YUKINOOO: Self = Self(460);
            pub const DEV_MANYUURA: Self = Self(461);
            pub const DEV_ZIBAKOIRU: Self = Self(462);
            pub const DEV_BEROBERUTO: Self = Self(463);
            pub const DEV_DOSAIDON: Self = Self(464);
            pub const DEV_MOZYANBO: Self = Self(465);
            pub const DEV_EREKIBURU: Self = Self(466);
            pub const DEV_BUUBAAN: Self = Self(467);
            pub const DEV_TOGEKISSU: Self = Self(468);
            pub const DEV_MEGAYANMA: Self = Self(469);
            pub const DEV_RIIFIA: Self = Self(470);
            pub const DEV_GUREISIA: Self = Self(471);
            pub const DEV_GURAION: Self = Self(472);
            pub const DEV_MANMUU: Self = Self(473);
            pub const DEV_PORIGONz: Self = Self(474);
            pub const DEV_ERUREIDO: Self = Self(475);
            pub const DEV_DAINOOZU: Self = Self(476);
            pub const DEV_YONOWAARU: Self = Self(477);
            pub const DEV_YUKIMENOKO: Self = Self(478);
            pub const DEV_ROTOMU: Self = Self(479);
            pub const DEV_YUKUSII: Self = Self(480);
            pub const DEV_EMURITTO: Self = Self(481);
            pub const DEV_AGUNOMU: Self = Self(482);
            pub const DEV_DHIARUGA: Self = Self(483);
            pub const DEV_PARUKIA: Self = Self(484);
            pub const DEV_HIIDORAN: Self = Self(485);
            pub const DEV_REZIGIGASU: Self = Self(486);
            pub const DEV_GIRATHINA: Self = Self(487);
            pub const DEV_KURESERIA: Self = Self(488);
            pub const DEV_FIONE: Self = Self(489);
            pub const DEV_MANAFI: Self = Self(490);
            pub const DEV_DAAKURAI: Self = Self(491);
            pub const DEV_SHEIMI: Self = Self(492);
            pub const DEV_ARUSEUSU: Self = Self(493);
            pub const DEV_BIKUTHINI: Self = Self(494);
            pub const DEV_TUTAAZYA: Self = Self(495);
            pub const DEV_ZYANOBII: Self = Self(496);
            pub const DEV_ZYAROODA: Self = Self(497);
            pub const DEV_POKABU: Self = Self(498);
            pub const DEV_TYAOBUU: Self = Self(499);
            pub const DEV_ENBUOO: Self = Self(500);
            pub const DEV_MIZYUMARU: Self = Self(501);
            pub const DEV_HUTATIMARU: Self = Self(502);
            pub const DEV_DAIKENKI: Self = Self(503);
            pub const DEV_MINEZUMI: Self = Self(504);
            pub const DEV_MIRUHOGGU: Self = Self(505);
            pub const DEV_YOOTERII: Self = Self(506);
            pub const DEV_HAADERIA: Self = Self(507);
            pub const DEV_MUURANDO: Self = Self(508);
            pub const DEV_TYORONEKO: Self = Self(509);
            pub const DEV_REPARUDASU: Self = Self(510);
            pub const DEV_YANAPPU: Self = Self(511);
            pub const DEV_YANAKKII: Self = Self(512);
            pub const DEV_BAOPPU: Self = Self(513);
            pub const DEV_BAOKKII: Self = Self(514);
            pub const DEV_HIYAPPU: Self = Self(515);
            pub const DEV_HIYAKKII: Self = Self(516);
            pub const DEV_MUNNA: Self = Self(517);
            pub const DEV_MUSYAANA: Self = Self(518);
            pub const DEV_MAMEPATO: Self = Self(519);
            pub const DEV_HATOOBOO: Self = Self(520);
            pub const DEV_KENHOROU: Self = Self(521);
            pub const DEV_SIMAMA: Self = Self(522);
            pub const DEV_ZEBURAIKA: Self = Self(523);
            pub const DEV_DANGORO: Self = Self(524);
            pub const DEV_GANTORU: Self = Self(525);
            pub const DEV_GIGAIASU: Self = Self(526);
            pub const DEV_KOROMORI: Self = Self(527);
            pub const DEV_KOKOROMORI: Self = Self(528);
            pub const DEV_MOGURYUU: Self = Self(529);
            pub const DEV_DORYUUZU: Self = Self(530);
            pub const DEV_TABUNNE: Self = Self(531);
            pub const DEV_DOKKORAA: Self = Self(532);
            pub const DEV_DOTEKKOTU: Self = Self(533);
            pub const DEV_ROOBUSIN: Self = Self(534);
            pub const DEV_OTAMARO: Self = Self(535);
            pub const DEV_GAMAGARU: Self = Self(536);
            pub const DEV_GAMAGEROGE: Self = Self(537);
            pub const DEV_NAGEKI: Self = Self(538);
            pub const DEV_DAGEKI: Self = Self(539);
            pub const DEV_KURUMIRU: Self = Self(540);
            pub const DEV_KURUMAYU: Self = Self(541);
            pub const DEV_HAHAKOMORI: Self = Self(542);
            pub const DEV_HUSIDE: Self = Self(543);
            pub const DEV_HOIIGA: Self = Self(544);
            pub const DEV_PENDORAA: Self = Self(545);
            pub const DEV_MONMEN: Self = Self(546);
            pub const DEV_ERUHUUN: Self = Self(547);
            pub const DEV_TYURINE: Self = Self(548);
            pub const DEV_DOREDHIA: Self = Self(549);
            pub const DEV_BASURAO: Self = Self(550);
            pub const DEV_MEGUROKO: Self = Self(551);
            pub const DEV_WARUBIRU: Self = Self(552);
            pub const DEV_WARUBIARU: Self = Self(553);
            pub const DEV_DARUMAKKA: Self = Self(554);
            pub const DEV_HIHIDARUMA: Self = Self(555);
            pub const DEV_MARAKATTI: Self = Self(556);
            pub const DEV_ISIZUMAI: Self = Self(557);
            pub const DEV_IWAPARESU: Self = Self(558);
            pub const DEV_ZURUGGU: Self = Self(559);
            pub const DEV_ZURUZUKIN: Self = Self(560);
            pub const DEV_SINBORAA: Self = Self(561);
            pub const DEV_DESUMASU: Self = Self(562);
            pub const DEV_DESUKAAN: Self = Self(563);
            pub const DEV_PUROTOOGA: Self = Self(564);
            pub const DEV_ABAGOORA: Self = Self(565);
            pub const DEV_AAKEN: Self = Self(566);
            pub const DEV_AAKEOSU: Self = Self(567);
            pub const DEV_YABUKURON: Self = Self(568);
            pub const DEV_DASUTODASU: Self = Self(569);
            pub const DEV_ZOROA: Self = Self(570);
            pub const DEV_ZOROAAKU: Self = Self(571);
            pub const DEV_TIRAAMHI: Self = Self(572);
            pub const DEV_TIRATIINO: Self = Self(573);
            pub const DEV_GOTIMU: Self = Self(574);
            pub const DEV_GOTIMIRU: Self = Self(575);
            pub const DEV_GOTIRUZERU: Self = Self(576);
            pub const DEV_YUNIRAN: Self = Self(577);
            pub const DEV_DABURAN: Self = Self(578);
            pub const DEV_RANKURUSU: Self = Self(579);
            pub const DEV_KOARUHII: Self = Self(580);
            pub const DEV_SUWANNA: Self = Self(581);
            pub const DEV_BANIPUTTI: Self = Self(582);
            pub const DEV_BANIRITTI: Self = Self(583);
            pub const DEV_BAIBANIRA: Self = Self(584);
            pub const DEV_SIKIZIKA: Self = Self(585);
            pub const DEV_MEBUKIZIKA: Self = Self(586);
            pub const DEV_EMONGA: Self = Self(587);
            pub const DEV_KABURUMO: Self = Self(588);
            pub const DEV_SYUBARUGO: Self = Self(589);
            pub const DEV_TAMAGETAKE: Self = Self(590);
            pub const DEV_MOROBARERU: Self = Self(591);
            pub const DEV_PURURIRU: Self = Self(592);
            pub const DEV_BURUNGERU: Self = Self(593);
            pub const DEV_MAMANBOU: Self = Self(594);
            pub const DEV_BATYURU: Self = Self(595);
            pub const DEV_DENTYURA: Self = Self(596);
            pub const DEV_TESSIIDO: Self = Self(597);
            pub const DEV_NATTOREI: Self = Self(598);
            pub const DEV_GIARU: Self = Self(599);
            pub const DEV_GIGIARU: Self = Self(600);
            pub const DEV_GIGIGIARU: Self = Self(601);
            pub const DEV_SIBISIRASU: Self = Self(602);
            pub const DEV_SIBIBIIRU: Self = Self(603);
            pub const DEV_SIBIRUDON: Self = Self(604);
            pub const DEV_RIGUREE: Self = Self(605);
            pub const DEV_OOBEMU: Self = Self(606);
            pub const DEV_HITOMOSI: Self = Self(607);
            pub const DEV_RANPURAA: Self = Self(608);
            pub const DEV_SYANDERA: Self = Self(609);
            pub const DEV_KIBAGO: Self = Self(610);
            pub const DEV_ONONDO: Self = Self(611);
            pub const DEV_ONONOKUSU: Self = Self(612);
            pub const DEV_KUMASYUN: Self = Self(613);
            pub const DEV_TUNBEAA: Self = Self(614);
            pub const DEV_HURIIZIO: Self = Self(615);
            pub const DEV_TYOBOMAKI: Self = Self(616);
            pub const DEV_AGIRUDAA: Self = Self(617);
            pub const DEV_MAGGYO: Self = Self(618);
            pub const DEV_KOZYOHUU: Self = Self(619);
            pub const DEV_KOZYONDO: Self = Self(620);
            pub const DEV_KURIMUGAN: Self = Self(621);
            pub const DEV_GOBITTO: Self = Self(622);
            pub const DEV_GORUUGU: Self = Self(623);
            pub const DEV_KOMATANA: Self = Self(624);
            pub const DEV_KIRIKIZAN: Self = Self(625);
            pub const DEV_BAHHURON: Self = Self(626);
            pub const DEV_WASIBON: Self = Self(627);
            pub const DEV_WHOOGURU: Self = Self(628);
            pub const DEV_BARUTYAI: Self = Self(629);
            pub const DEV_BARUZIINA: Self = Self(630);
            pub const DEV_KUITARAN: Self = Self(631);
            pub const DEV_AIANTO: Self = Self(632);
            pub const DEV_MONOZU: Self = Self(633);
            pub const DEV_ZIHEDDO: Self = Self(634);
            pub const DEV_SAZANDORA: Self = Self(635);
            pub const DEV_MERARUBA: Self = Self(636);
            pub const DEV_URUGAMOSU: Self = Self(637);
            pub const DEV_KOBARUON: Self = Self(638);
            pub const DEV_TERAKION: Self = Self(639);
            pub const DEV_BIRIZION: Self = Self(640);
            pub const DEV_TORUNEROSU: Self = Self(641);
            pub const DEV_BORUTOROSU: Self = Self(642);
            pub const DEV_RESIRAMU: Self = Self(643);
            pub const DEV_ZEKUROMU: Self = Self(644);
            pub const DEV_RANDOROSU: Self = Self(645);
            pub const DEV_KYUREMU: Self = Self(646);
            pub const DEV_KERUDHIO: Self = Self(647);
            pub const DEV_MEROETTA: Self = Self(648);
            pub const DEV_GENOSEKUTO: Self = Self(649);
            pub const DEV_HARIMARON: Self = Self(650);
            pub const DEV_HARIBOOGU: Self = Self(651);
            pub const DEV_BURIGARON: Self = Self(652);
            pub const DEV_FOKKO: Self = Self(653);
            pub const DEV_TEERUNAA: Self = Self(654);
            pub const DEV_MAFOKUSII: Self = Self(655);
            pub const DEV_KEROMATU: Self = Self(656);
            pub const DEV_GEKOGASIRA: Self = Self(657);
            pub const DEV_GEKKOUGA: Self = Self(658);
            pub const DEV_HORUBII: Self = Self(659);
            pub const DEV_HORUUDO: Self = Self(660);
            pub const DEV_YAYAKOMA: Self = Self(661);
            pub const DEV_HINOYAKOMA: Self = Self(662);
            pub const DEV_FAIAROO: Self = Self(663);
            pub const DEV_KOHUKIMUSI: Self = Self(664);
            pub const DEV_KOHUURAI: Self = Self(665);
            pub const DEV_BIBIYON: Self = Self(666);
            pub const DEV_SISIKO: Self = Self(667);
            pub const DEV_KAENZISI: Self = Self(668);
            pub const DEV_HURABEBE: Self = Self(669);
            pub const DEV_HURAETTE: Self = Self(670);
            pub const DEV_HURAAJESU: Self = Self(671);
            pub const DEV_MHEEKURU: Self = Self(672);
            pub const DEV_GOOGOOTO: Self = Self(673);
            pub const DEV_YANTYAMU: Self = Self(674);
            pub const DEV_GORONDA: Self = Self(675);
            pub const DEV_TORIMIAN: Self = Self(676);
            pub const DEV_NYASUPAA: Self = Self(677);
            pub const DEV_NYAONIKUSU: Self = Self(678);
            pub const DEV_HITOTUKI: Self = Self(679);
            pub const DEV_NIDANGIRU: Self = Self(680);
            pub const DEV_GIRUGARUDO: Self = Self(681);
            pub const DEV_SYUSYUPU: Self = Self(682);
            pub const DEV_HUREHUWAN: Self = Self(683);
            pub const DEV_PEROPPAHU: Self = Self(684);
            pub const DEV_PERORIIMU: Self = Self(685);
            pub const DEV_MAAIIKA: Self = Self(686);
            pub const DEV_KARAMANERO: Self = Self(687);
            pub const DEV_KAMETETE: Self = Self(688);
            pub const DEV_GAMENODESU: Self = Self(689);
            pub const DEV_KUZUMOO: Self = Self(690);
            pub const DEV_DORAMIDORO: Self = Self(691);
            pub const DEV_UDEPPOU: Self = Self(692);
            pub const DEV_BUROSUTAA: Self = Self(693);
            pub const DEV_ERIKITERU: Self = Self(694);
            pub const DEV_EREZAADO: Self = Self(695);
            pub const DEV_TIGORASU: Self = Self(696);
            pub const DEV_GATIGORASU: Self = Self(697);
            pub const DEV_AMARUSU: Self = Self(698);
            pub const DEV_AMARURUGA: Self = Self(699);
            pub const DEV_NINFIA: Self = Self(700);
            pub const DEV_RUTYABURU: Self = Self(701);
            pub const DEV_DEDENNE: Self = Self(702);
            pub const DEV_MERESII: Self = Self(703);
            pub const DEV_NUMERA: Self = Self(704);
            pub const DEV_NUMEIRU: Self = Self(705);
            pub const DEV_NUMERUGON: Self = Self(706);
            pub const DEV_KUREHFI: Self = Self(707);
            pub const DEV_BOKUREE: Self = Self(708);
            pub const DEV_OOROTTO: Self = Self(709);
            pub const DEV_BAKETTYA: Self = Self(710);
            pub const DEV_PANPUZIN: Self = Self(711);
            pub const DEV_KATIKOORU: Self = Self(712);
            pub const DEV_KUREBEESU: Self = Self(713);
            pub const DEV_ONBATTO: Self = Self(714);
            pub const DEV_ONBAAN: Self = Self(715);
            pub const DEV_ZERUNEASU: Self = Self(716);
            pub const DEV_IBERUTARU: Self = Self(717);
            pub const DEV_ZIGARUDE: Self = Self(718);
            pub const DEV_DHIANSII: Self = Self(719);
            pub const DEV_HUUPA: Self = Self(720);
            pub const DEV_BORUKENION: Self = Self(721);
            pub const DEV_MOKUROO: Self = Self(722);
            pub const DEV_HUKUSUROO: Self = Self(723);
            pub const DEV_ZYUNAIPAA: Self = Self(724);
            pub const DEV_NYABII: Self = Self(725);
            pub const DEV_NYAHIITO: Self = Self(726);
            pub const DEV_GAOGAEN: Self = Self(727);
            pub const DEV_ASIMARI: Self = Self(728);
            pub const DEV_OSYAMARI: Self = Self(729);
            pub const DEV_ASIREENU: Self = Self(730);
            pub const DEV_TUTUKERA: Self = Self(731);
            pub const DEV_KERARAPPA: Self = Self(732);
            pub const DEV_DODEKABASI: Self = Self(733);
            pub const DEV_YANGUUSU: Self = Self(734);
            pub const DEV_DEKAGUUSU: Self = Self(735);
            pub const DEV_AGOZIMUSI: Self = Self(736);
            pub const DEV_DENDIMUSI: Self = Self(737);
            pub const DEV_KUWAGANON: Self = Self(738);
            pub const DEV_MAKENKANI: Self = Self(739);
            pub const DEV_KEKENKANI: Self = Self(740);
            pub const DEV_ODORIDORI: Self = Self(741);
            pub const DEV_ABURII: Self = Self(742);
            pub const DEV_ABURIBON: Self = Self(743);
            pub const DEV_IWANKO: Self = Self(744);
            pub const DEV_RUGARUGAN: Self = Self(745);
            pub const DEV_YOWASI: Self = Self(746);
            pub const DEV_HIDOIDE: Self = Self(747);
            pub const DEV_DOHIDOIDE: Self = Self(748);
            pub const DEV_DOROBANKO: Self = Self(749);
            pub const DEV_BANBADORO: Self = Self(750);
            pub const DEV_SIZUKUMO: Self = Self(751);
            pub const DEV_ONISIZUKUMO: Self = Self(752);
            pub const DEV_KARIKIRI: Self = Self(753);
            pub const DEV_RARANTESU: Self = Self(754);
            pub const DEV_NEMASYU: Self = Self(755);
            pub const DEV_MASHEEDO: Self = Self(756);
            pub const DEV_YATOUMORI: Self = Self(757);
            pub const DEV_ENNYUUTO: Self = Self(758);
            pub const DEV_NUIKOGUMA: Self = Self(759);
            pub const DEV_KITERUGUMA: Self = Self(760);
            pub const DEV_AMAKAZI: Self = Self(761);
            pub const DEV_AMAMAIKO: Self = Self(762);
            pub const DEV_AMAAZYO: Self = Self(763);
            pub const DEV_KYUWAWAA: Self = Self(764);
            pub const DEV_YAREYUUTAN: Self = Self(765);
            pub const DEV_NAGETUKESARU: Self = Self(766);
            pub const DEV_KOSOKUMUSI: Self = Self(767);
            pub const DEV_GUSOKUMUSYA: Self = Self(768);
            pub const DEV_SUNABHA: Self = Self(769);
            pub const DEV_SIRODESUNA: Self = Self(770);
            pub const DEV_NAMAKOBUSI: Self = Self(771);
            pub const DEV_TAIPUNURU: Self = Self(772);
            pub const DEV_SIRUVHADHI: Self = Self(773);
            pub const DEV_METENO: Self = Self(774);
            pub const DEV_NEKKOARA: Self = Self(775);
            pub const DEV_BAKUGAMESU: Self = Self(776);
            pub const DEV_TOGEDEMARU: Self = Self(777);
            pub const DEV_MIMIKKYU: Self = Self(778);
            pub const DEV_HAGIGISIRI: Self = Self(779);
            pub const DEV_ZIZIIRON: Self = Self(780);
            pub const DEV_DADARIN: Self = Self(781);
            pub const DEV_ZYARAKO: Self = Self(782);
            pub const DEV_ZYARANGO: Self = Self(783);
            pub const DEV_ZYARARANGA: Self = Self(784);
            pub const DEV_KAPUKOKEKO: Self = Self(785);
            pub const DEV_KAPUTETEHU: Self = Self(786);
            pub const DEV_KAPUBURURU: Self = Self(787);
            pub const DEV_KAPUREHIRE: Self = Self(788);
            pub const DEV_KOSUMOGGU: Self = Self(789);
            pub const DEV_KOSUMOUMU: Self = Self(790);
            pub const DEV_SORUGAREO: Self = Self(791);
            pub const DEV_RUNAAARA: Self = Self(792);
            pub const DEV_UTUROIDO: Self = Self(793);
            pub const DEV_MASSIBUUN: Self = Self(794);
            pub const DEV_FEROOTHE: Self = Self(795);
            pub const DEV_DENZYUMOKU: Self = Self(796);
            pub const DEV_TEKKAGUYA: Self = Self(797);
            pub const DEV_KAMITURUGI: Self = Self(798);
            pub const DEV_AKUZIKINGU: Self = Self(799);
            pub const DEV_NEKUROZUMA: Self = Self(800);
            pub const DEV_MAGIANA: Self = Self(801);
            pub const DEV_MAASYADOO: Self = Self(802);
            pub const DEV_BEBENOMU: Self = Self(803);
            pub const DEV_AAGOYON: Self = Self(804);
            pub const DEV_TUNDETUNDE: Self = Self(805);
            pub const DEV_ZUGADOON: Self = Self(806);
            pub const DEV_ZERAORA: Self = Self(807);
            pub const DEV_MERUTAN: Self = Self(808);
            pub const DEV_MERUMETARU: Self = Self(809);
            pub const DEV_SARUNORI: Self = Self(810);
            pub const DEV_BATINKII: Self = Self(811);
            pub const DEV_GORIRANDAA: Self = Self(812);
            pub const DEV_HIBANII: Self = Self(813);
            pub const DEV_RABIHUTTO: Self = Self(814);
            pub const DEV_EESUBAAN: Self = Self(815);
            pub const DEV_MESSON: Self = Self(816);
            pub const DEV_ZIMEREON: Self = Self(817);
            pub const DEV_INTEREON: Self = Self(818);
            pub const DEV_HOSIGARISU: Self = Self(819);
            pub const DEV_YOKUBARISU: Self = Self(820);
            pub const DEV_KOKOGARA: Self = Self(821);
            pub const DEV_AOGARASU: Self = Self(822);
            pub const DEV_AAMAAGAA: Self = Self(823);
            pub const DEV_SATTIMUSI: Self = Self(824);
            pub const DEV_REDOOMUSI: Self = Self(825);
            pub const DEV_IORUBU: Self = Self(826);
            pub const DEV_KUSUNE: Self = Self(827);
            pub const DEV_FOKUSURAI: Self = Self(828);
            pub const DEV_HIMENKA: Self = Self(829);
            pub const DEV_WATASIRAGA: Self = Self(830);
            pub const DEV_UURUU: Self = Self(831);
            pub const DEV_BAIUURUU: Self = Self(832);
            pub const DEV_KAMUKAME: Self = Self(833);
            pub const DEV_KAZIRIGAME: Self = Self(834);
            pub const DEV_WANPATI: Self = Self(835);
            pub const DEV_PARUSUWAN: Self = Self(836);
            pub const DEV_TANDON: Self = Self(837);
            pub const DEV_TOROGGON: Self = Self(838);
            pub const DEV_SEKITANZAN: Self = Self(839);
            pub const DEV_KAZITTYU: Self = Self(840);
            pub const DEV_APPURYUU: Self = Self(841);
            pub const DEV_TARUPPURU: Self = Self(842);
            pub const DEV_SUNAHEBI: Self = Self(843);
            pub const DEV_SADAIZYA: Self = Self(844);
            pub const DEV_UUU: Self = Self(845);
            pub const DEV_SASIKAMASU: Self = Self(846);
            pub const DEV_KAMASUZYOO: Self = Self(847);
            pub const DEV_EREZUN: Self = Self(848);
            pub const DEV_SUTORINDAA: Self = Self(849);
            pub const DEV_YAKUDE: Self = Self(850);
            pub const DEV_MARUYAKUDE: Self = Self(851);
            pub const DEV_TATAKKO: Self = Self(852);
            pub const DEV_OTOSUPASU: Self = Self(853);
            pub const DEV_YABATYA: Self = Self(854);
            pub const DEV_POTTODESU: Self = Self(855);
            pub const DEV_MIBURIMU: Self = Self(856);
            pub const DEV_TEBURIMU: Self = Self(857);
            pub const DEV_BURIMUON: Self = Self(858);
            pub const DEV_BEROBAA: Self = Self(859);
            pub const DEV_GIMOO: Self = Self(860);
            pub const DEV_OORONGE: Self = Self(861);
            pub const DEV_TATIHUSAGUMA: Self = Self(862);
            pub const DEV_NYAIKINGU: Self = Self(863);
            pub const DEV_SANIGOON: Self = Self(864);
            pub const DEV_NEGIGANAITO: Self = Self(865);
            pub const DEV_BARIKOORU: Self = Self(866);
            pub const DEV_DESUBAAN: Self = Self(867);
            pub const DEV_MAHOMIRU: Self = Self(868);
            pub const DEV_MAHOIPPU: Self = Self(869);
            pub const DEV_TAIREETU: Self = Self(870);
            pub const DEV_BATINUNI: Self = Self(871);
            pub const DEV_YUKIHAMI: Self = Self(872);
            pub const DEV_MOSUNOU: Self = Self(873);
            pub const DEV_ISIHENZIN: Self = Self(874);
            pub const DEV_KOORIPPO: Self = Self(875);
            pub const DEV_IESSAN: Self = Self(876);
            pub const DEV_MORUPEKO: Self = Self(877);
            pub const DEV_ZOUDOU: Self = Self(878);
            pub const DEV_DAIOUDOU: Self = Self(879);
            pub const DEV_PATTIRAGON: Self = Self(880);
            pub const DEV_PATTIRUDON: Self = Self(881);
            pub const DEV_UONORAGON: Self = Self(882);
            pub const DEV_UOTIRUDON: Self = Self(883);
            pub const DEV_ZYURARUDON: Self = Self(884);
            pub const DEV_DORAMESIYA: Self = Self(885);
            pub const DEV_DORONTI: Self = Self(886);
            pub const DEV_DORAPARUTO: Self = Self(887);
            pub const DEV_ZASIAN: Self = Self(888);
            pub const DEV_ZAMAZENTA: Self = Self(889);
            pub const DEV_MUGENDAINA: Self = Self(890);
            pub const DEV_AAMAA1: Self = Self(891);
            pub const DEV_AAMAA2: Self = Self(892);
            pub const DEV_m23: Self = Self(893);
            pub const DEV_REDEN: Self = Self(894);
            pub const DEV_REDORA: Self = Self(895);
            pub const DEV_HAKUBA: Self = Self(896);
            pub const DEV_KOKUBA: Self = Self(897);
            pub const DEV_KURAUN: Self = Self(898);
            pub const DEV_ODOSISI2: Self = Self(899);
            pub const DEV_SUTORAIKU2: Self = Self(900);
            pub const DEV_HIMEGUMA3: Self = Self(901);
            pub const DEV_rBASURAO2: Self = Self(902);
            pub const DEV_rNYUURA2: Self = Self(903);
            pub const DEV_rHARISEN2: Self = Self(904);
            pub const DEV_FEATOROSU: Self = Self(905);
            pub const DEV_NEKO1: Self = Self(906);
            pub const DEV_NEKO2: Self = Self(907);
            pub const DEV_NEKO3: Self = Self(908);
            pub const DEV_WANI1: Self = Self(909);
            pub const DEV_WANI2: Self = Self(910);
            pub const DEV_WANI3: Self = Self(911);
            pub const DEV_KAMO1: Self = Self(912);
            pub const DEV_KAMO2: Self = Self(913);
            pub const DEV_KAMO3: Self = Self(914);
            pub const DEV_BUTA1: Self = Self(915);
            pub const DEV_BUTA2: Self = Self(916);
            pub const DEV_NOKOTTI2: Self = Self(917);
            pub const DEV_KUMO1: Self = Self(918);
            pub const DEV_KUMO2: Self = Self(919);
            pub const DEV_BATTA1: Self = Self(920);
            pub const DEV_BATTA2: Self = Self(921);
            pub const DEV_SUKARABE1: Self = Self(922);
            pub const DEV_SUKARABE2: Self = Self(923);
            pub const DEV_OBAKEINU1: Self = Self(924);
            pub const DEV_OBAKEINU2: Self = Self(925);
            pub const DEV_DATYOU1: Self = Self(926);
            pub const DEV_DATYOU2: Self = Self(927);
            pub const DEV_KIRINRIKI2: Self = Self(928);
            pub const DEV_UMIDHIGUDA: Self = Self(929);
            pub const DEV_UMITORIO: Self = Self(930);
            pub const DEV_OYAKATA: Self = Self(931);
            pub const DEV_MERURUUSA: Self = Self(932);
            pub const DEV_IRUKA1: Self = Self(933);
            pub const DEV_IRUKA2: Self = Self(934);
            pub const DEV_ORIIBU1: Self = Self(935);
            pub const DEV_ORIIBU2: Self = Self(936);
            pub const DEV_ORIIBU3: Self = Self(937);
            pub const DEV_HABANERO1: Self = Self(938);
            pub const DEV_HABANERO2: Self = Self(939);
            pub const DEV_KAERU1: Self = Self(940);
            pub const DEV_KAERU2: Self = Self(941);
            pub const DEV_ENZIN1: Self = Self(942);
            pub const DEV_ENZIN2: Self = Self(943);
            pub const DEV_MIMIZU: Self = Self(944);
            pub const DEV_NEZUMI1: Self = Self(945);
            pub const DEV_NEZUMI2: Self = Self(946);
            pub const DEV_OKAKUZIRA1: Self = Self(947);
            pub const DEV_OKAKUZIRA2: Self = Self(948);
            pub const DEV_KOORIDORA1: Self = Self(949);
            pub const DEV_KOORIDORA2: Self = Self(950);
            pub const DEV_KOORIDORA3: Self = Self(951);
            pub const DEV_SUSIDORA: Self = Self(952);
            pub const DEV_BAIKU: Self = Self(953);
            pub const DEV_MAAMOTTO1: Self = Self(954);
            pub const DEV_MAAMOTTO2: Self = Self(955);
            pub const DEV_MAAMOTTO3: Self = Self(956);
            pub const DEV_MIZUDORI1: Self = Self(957);
            pub const DEV_MIZUDORI2: Self = Self(958);
            pub const DEV_KOUNOTORI: Self = Self(959);
            pub const DEV_INKO: Self = Self(960);
            pub const DEV_HURAMINGO: Self = Self(961);
            pub const DEV_KEGANI: Self = Self(962);
            pub const DEV_GANEN1: Self = Self(963);
            pub const DEV_GANEN2: Self = Self(964);
            pub const DEV_GANEN3: Self = Self(965);
            pub const DEV_KARUKAN1: Self = Self(966);
            pub const DEV_KARUKAN2: Self = Self(967);
            pub const DEV_AIAI1: Self = Self(968);
            pub const DEV_AIAI2: Self = Self(969);
            pub const DEV_PANINU1: Self = Self(970);
            pub const DEV_PANINU2: Self = Self(971);
            pub const DEV_MASUTHIHU1: Self = Self(972);
            pub const DEV_MASUTHIHU2: Self = Self(973);
            pub const DEV_TANBURU1: Self = Self(974);
            pub const DEV_TANBURU2: Self = Self(975);
            pub const DEV_KOIN1: Self = Self(976);
            pub const DEV_KOIN2: Self = Self(977);
            pub const DEV_ADONFAN: Self = Self(978);
            pub const DEV_AMOROBARERU: Self = Self(979);
            pub const DEV_AKETUBAN: Self = Self(980);
            pub const DEV_AREAKOIRU: Self = Self(981);
            pub const DEV_APURIN: Self = Self(982);
            pub const DEV_AMUUMA: Self = Self(983);
            pub const DEV_AURUGAMOSU: Self = Self(984);
            pub const DEV_AAAAA: Self = Self(985);
            pub const DEV_BDONFAN: Self = Self(986);
            pub const DEV_BKETUBAN: Self = Self(987);
            pub const DEV_BURUGAMOSU: Self = Self(988);
            pub const DEV_BHARITEYAMA: Self = Self(989);
            pub const DEV_BSAZANDORA: Self = Self(990);
            pub const DEV_BBANGIRASU: Self = Self(991);
            pub const DEV_BKOORI: Self = Self(992);
            pub const DEV_BBBBB: Self = Self(993);
            pub const DEV_ZYUNDEN1: Self = Self(994);
            pub const DEV_ZYUNDEN2: Self = Self(995);
            pub const DEV_ZYUNDEN3: Self = Self(996);
            pub const DEV_ZYUNDEN4: Self = Self(997);
            pub const DEV_AIGUANA: Self = Self(998);
            pub const DEV_BIGUANA: Self = Self(999);
            pub const DEV_FEARII1: Self = Self(1000);
            pub const DEV_FEARII2: Self = Self(1001);
            pub const DEV_FEARII3: Self = Self(1002);
            pub const DEV_HINOKO1: Self = Self(1003);
            pub const DEV_HINOKO2A: Self = Self(1004);
            pub const DEV_HINOKO2B: Self = Self(1005);
            pub const DEV_OKAKINGU: Self = Self(1006);
            pub const DEV_OKAGYARADOSU: Self = Self(1007);
            pub const DEV_KOMATANA3: Self = Self(1008);
            pub const DEV_rUPAA2: Self = Self(1009);
            pub const DEV_MANKII3: Self = Self(1010);

            pub const ENUM_MIN: u16 = 0;
            pub const ENUM_MAX: u16 = 1010;
            pub const ENUM_VALUES: &'static [Self] = &[
                Self::DEV_NULL,
                Self::DEV_HUSIGIDANE,
                Self::DEV_HUSIGISOU,
                Self::DEV_HUSIGIBANA,
                Self::DEV_HITOKAGE,
                Self::DEV_RIZAADO,
                Self::DEV_RIZAADON,
                Self::DEV_ZENIGAME,
                Self::DEV_KAMEERU,
                Self::DEV_KAMEKKUSU,
                Self::DEV_KYATAPII,
                Self::DEV_TORANSERU,
                Self::DEV_BATAHURII,
                Self::DEV_BIIDORU,
                Self::DEV_KOKUUN,
                Self::DEV_SUPIAA,
                Self::DEV_POPPO,
                Self::DEV_PIZYON,
                Self::DEV_PIZYOTTO,
                Self::DEV_KORATTA,
                Self::DEV_RATTA,
                Self::DEV_ONISUZUME,
                Self::DEV_ONIDORIRU,
                Self::DEV_AABO,
                Self::DEV_AABOKKU,
                Self::DEV_PIKATYUU,
                Self::DEV_RAITYUU,
                Self::DEV_SANDO,
                Self::DEV_SANDOPAN,
                Self::DEV_NIDORAN_F,
                Self::DEV_NIDORIINA,
                Self::DEV_NIDOKUIN,
                Self::DEV_NIDORAN_M,
                Self::DEV_NIDORIINO,
                Self::DEV_NIDOKINGU,
                Self::DEV_PIPPI,
                Self::DEV_PIKUSII,
                Self::DEV_ROKON,
                Self::DEV_KYUUKON,
                Self::DEV_PURIN,
                Self::DEV_PUKURIN,
                Self::DEV_ZUBATTO,
                Self::DEV_GORUBATTO,
                Self::DEV_NAZONOKUSA,
                Self::DEV_KUSAIHANA,
                Self::DEV_RAHURESIA,
                Self::DEV_PARASU,
                Self::DEV_PARASEKUTO,
                Self::DEV_KONPAN,
                Self::DEV_MORUFON,
                Self::DEV_DHIGUDA,
                Self::DEV_DAGUTORIO,
                Self::DEV_NYAASU,
                Self::DEV_PERUSIAN,
                Self::DEV_KODAKKU,
                Self::DEV_GORUDAKKU,
                Self::DEV_MANKII,
                Self::DEV_OKORIZARU,
                Self::DEV_GAADHI,
                Self::DEV_UINDHI,
                Self::DEV_NYOROMO,
                Self::DEV_NYOROZO,
                Self::DEV_NYOROBON,
                Self::DEV_KEESHI,
                Self::DEV_YUNGERAA,
                Self::DEV_HUUDHIN,
                Self::DEV_WANRIKII,
                Self::DEV_GOORIKII,
                Self::DEV_KAIRIKII,
                Self::DEV_MADATUBOMI,
                Self::DEV_UTUDON,
                Self::DEV_UTUBOTTO,
                Self::DEV_MENOKURAGE,
                Self::DEV_DOKUKURAGE,
                Self::DEV_ISITUBUTE,
                Self::DEV_GOROON,
                Self::DEV_GOROONYA,
                Self::DEV_PONIITA,
                Self::DEV_GYAROPPU,
                Self::DEV_YADON,
                Self::DEV_YADORAN,
                Self::DEV_KOIRU,
                Self::DEV_REAKOIRU,
                Self::DEV_KAMONEGI,
                Self::DEV_DOODOO,
                Self::DEV_DOODORIO,
                Self::DEV_PAUWAU,
                Self::DEV_ZYUGON,
                Self::DEV_BETOBETAA,
                Self::DEV_BETOBETON,
                Self::DEV_SHERUDAA,
                Self::DEV_PARUSHEN,
                Self::DEV_GOOSU,
                Self::DEV_GOOSUTO,
                Self::DEV_GENGAA,
                Self::DEV_IWAAKU,
                Self::DEV_SURIIPU,
                Self::DEV_SURIIPAA,
                Self::DEV_KURABU,
                Self::DEV_KINGURAA,
                Self::DEV_BIRIRIDAMA,
                Self::DEV_MARUMAIN,
                Self::DEV_TAMATAMA,
                Self::DEV_NASSII,
                Self::DEV_KARAKARA,
                Self::DEV_GARAGARA,
                Self::DEV_SAWAMURAA,
                Self::DEV_EBIWARAA,
                Self::DEV_BERORINGA,
                Self::DEV_DOGAASU,
                Self::DEV_MATADOGASU,
                Self::DEV_SAIHOON,
                Self::DEV_SAIDON,
                Self::DEV_RAKKII,
                Self::DEV_MONZYARA,
                Self::DEV_GARUURA,
                Self::DEV_TATTUU,
                Self::DEV_SIIDORA,
                Self::DEV_TOSAKINTO,
                Self::DEV_AZUMAOU,
                Self::DEV_HITODEMAN,
                Self::DEV_SUTAAMII,
                Self::DEV_BARIYAADO,
                Self::DEV_SUTORAIKU,
                Self::DEV_RUUZYURA,
                Self::DEV_EREBUU,
                Self::DEV_BUUBAA,
                Self::DEV_KAIROSU,
                Self::DEV_KENTAROSU,
                Self::DEV_KOIKINGU,
                Self::DEV_GYARADOSU,
                Self::DEV_RAPURASU,
                Self::DEV_METAMON,
                Self::DEV_IIBUI,
                Self::DEV_SYAWAAZU,
                Self::DEV_SANDAASU,
                Self::DEV_BUUSUTAA,
                Self::DEV_PORIGON,
                Self::DEV_OMUNAITO,
                Self::DEV_OMUSUTAA,
                Self::DEV_KABUTO,
                Self::DEV_KABUTOPUSU,
                Self::DEV_PUTERA,
                Self::DEV_KABIGON,
                Self::DEV_HURIIZAA,
                Self::DEV_SANDAA,
                Self::DEV_FAIYAA,
                Self::DEV_MINIRYUU,
                Self::DEV_HAKURYUU,
                Self::DEV_KAIRYUU,
                Self::DEV_MYUUTUU,
                Self::DEV_MYUU,
                Self::DEV_TIKORIITA,
                Self::DEV_BEIRIIHU,
                Self::DEV_MEGANIUMU,
                Self::DEV_HINOARASI,
                Self::DEV_MAGUMARASI,
                Self::DEV_BAKUHUUN,
                Self::DEV_WANINOKO,
                Self::DEV_ARIGEITU,
                Self::DEV_OODAIRU,
                Self::DEV_OTATI,
                Self::DEV_OOTATI,
                Self::DEV_HOOHOO,
                Self::DEV_YORUNOZUKU,
                Self::DEV_REDHIBA,
                Self::DEV_REDHIAN,
                Self::DEV_ITOMARU,
                Self::DEV_ARIADOSU,
                Self::DEV_KUROBATTO,
                Self::DEV_TYONTII,
                Self::DEV_RANTAAN,
                Self::DEV_PITYUU,
                Self::DEV_PHI,
                Self::DEV_PUPURIN,
                Self::DEV_TOGEPII,
                Self::DEV_TOGETIKKU,
                Self::DEV_NEITHI,
                Self::DEV_NEITHIO,
                Self::DEV_MERIIPU,
                Self::DEV_MOKOKO,
                Self::DEV_DENRYUU,
                Self::DEV_KIREIHANA,
                Self::DEV_MARIRU,
                Self::DEV_MARIRURI,
                Self::DEV_USOKKII,
                Self::DEV_NYOROTONO,
                Self::DEV_HANEKKO,
                Self::DEV_POPOKKO,
                Self::DEV_WATAKKO,
                Self::DEV_EIPAMU,
                Self::DEV_HIMANATTU,
                Self::DEV_KIMAWARI,
                Self::DEV_YANYANMA,
                Self::DEV_UPAA,
                Self::DEV_NUOO,
                Self::DEV_EEFI,
                Self::DEV_BURAKKII,
                Self::DEV_YAMIKARASU,
                Self::DEV_YADOKINGU,
                Self::DEV_MUUMA,
                Self::DEV_ANNOON,
                Self::DEV_SOONANSU,
                Self::DEV_KIRINRIKI,
                Self::DEV_KUNUGIDAMA,
                Self::DEV_FORETOSU,
                Self::DEV_NOKOTTI,
                Self::DEV_GURAIGAA,
                Self::DEV_HAGANEERU,
                Self::DEV_BURUU,
                Self::DEV_GURANBURU,
                Self::DEV_HARIISEN,
                Self::DEV_HASSAMU,
                Self::DEV_TUBOTUBO,
                Self::DEV_HERAKUROSU,
                Self::DEV_NYUURA,
                Self::DEV_HIMEGUMA,
                Self::DEV_RINGUMA,
                Self::DEV_MAGUMAGGU,
                Self::DEV_MAGUKARUGO,
                Self::DEV_URIMUU,
                Self::DEV_INOMUU,
                Self::DEV_SANIIGO,
                Self::DEV_TEPPOUO,
                Self::DEV_OKUTAN,
                Self::DEV_DERIBAADO,
                Self::DEV_MANTAIN,
                Self::DEV_EAAMUDO,
                Self::DEV_DERUBIRU,
                Self::DEV_HERUGAA,
                Self::DEV_KINGUDORA,
                Self::DEV_GOMAZOU,
                Self::DEV_DONFAN,
                Self::DEV_PORIGON2,
                Self::DEV_ODOSISI,
                Self::DEV_DOOBURU,
                Self::DEV_BARUKII,
                Self::DEV_KAPOERAA,
                Self::DEV_MUTYUURU,
                Self::DEV_EREKIDDO,
                Self::DEV_BUBHI,
                Self::DEV_MIRUTANKU,
                Self::DEV_HAPINASU,
                Self::DEV_RAIKOU,
                Self::DEV_ENTEI,
                Self::DEV_SUIKUN,
                Self::DEV_YOOGIRASU,
                Self::DEV_SANAGIRASU,
                Self::DEV_BANGIRASU,
                Self::DEV_RUGIA,
                Self::DEV_HOUOU,
                Self::DEV_SEREBHI,
                Self::DEV_KIMORI,
                Self::DEV_ZYUPUTORU,
                Self::DEV_ZYUKAIN,
                Self::DEV_ATYAMO,
                Self::DEV_WAKASYAMO,
                Self::DEV_BASYAAMO,
                Self::DEV_MIZUGOROU,
                Self::DEV_NUMAKUROO,
                Self::DEV_RAGURAAZI,
                Self::DEV_POTIENA,
                Self::DEV_GURAENA,
                Self::DEV_ZIGUZAGUMA,
                Self::DEV_MASSUGUMA,
                Self::DEV_KEMUSSO,
                Self::DEV_KARASARISU,
                Self::DEV_AGEHANTO,
                Self::DEV_MAYURUDO,
                Self::DEV_DOKUKEIRU,
                Self::DEV_HASUBOO,
                Self::DEV_HASUBURERO,
                Self::DEV_RUNPAPPA,
                Self::DEV_TANEBOO,
                Self::DEV_KONOHANA,
                Self::DEV_DAATENGU,
                Self::DEV_SUBAME,
                Self::DEV_OOSUBAME,
                Self::DEV_KYAMOME,
                Self::DEV_PERIPPAA,
                Self::DEV_RARUTOSU,
                Self::DEV_KIRURIA,
                Self::DEV_SAANAITO,
                Self::DEV_AMETAMA,
                Self::DEV_AMEMOOSU,
                Self::DEV_KINOKOKO,
                Self::DEV_KINOGASSA,
                Self::DEV_NAMAKERO,
                Self::DEV_YARUKIMONO,
                Self::DEV_KEKKINGU,
                Self::DEV_TUTININ,
                Self::DEV_TEKKANIN,
                Self::DEV_NUKENIN,
                Self::DEV_GONYONYO,
                Self::DEV_DOGOOMU,
                Self::DEV_BAKUONGU,
                Self::DEV_MAKUNOSITA,
                Self::DEV_HARITEYAMA,
                Self::DEV_RURIRI,
                Self::DEV_NOZUPASU,
                Self::DEV_ENEKO,
                Self::DEV_ENEKORORO,
                Self::DEV_YAMIRAMI,
                Self::DEV_KUTIITO,
                Self::DEV_KOKODORA,
                Self::DEV_KODORA,
                Self::DEV_BOSUGODORA,
                Self::DEV_ASANAN,
                Self::DEV_TYAAREMU,
                Self::DEV_RAKURAI,
                Self::DEV_RAIBORUTO,
                Self::DEV_PURASURU,
                Self::DEV_MAINAN,
                Self::DEV_BARUBIITO,
                Self::DEV_IRUMIIZE,
                Self::DEV_ROZERIA,
                Self::DEV_GOKURIN,
                Self::DEV_MARUNOOMU,
                Self::DEV_KIBANIA,
                Self::DEV_SAMEHADAA,
                Self::DEV_HOERUKO,
                Self::DEV_HOERUOO,
                Self::DEV_DONMERU,
                Self::DEV_BAKUUDA,
                Self::DEV_KOOTASU,
                Self::DEV_BANEBUU,
                Self::DEV_BUUPIGGU,
                Self::DEV_PATTIIRU,
                Self::DEV_NAKKURAA,
                Self::DEV_BIBURAABA,
                Self::DEV_HURAIGON,
                Self::DEV_SABONEA,
                Self::DEV_NOKUTASU,
                Self::DEV_TIRUTTO,
                Self::DEV_TIRUTARISU,
                Self::DEV_ZANGUUSU,
                Self::DEV_HABUNEEKU,
                Self::DEV_RUNATOON,
                Self::DEV_SORUROKKU,
                Self::DEV_DOZYOTTI,
                Self::DEV_NAMAZUN,
                Self::DEV_HEIGANI,
                Self::DEV_SIZARIGAA,
                Self::DEV_YAZIRON,
                Self::DEV_NENDOORU,
                Self::DEV_RIRIIRA,
                Self::DEV_YUREIDORU,
                Self::DEV_ANOPUSU,
                Self::DEV_AAMARUDO,
                Self::DEV_HINBASU,
                Self::DEV_MIROKAROSU,
                Self::DEV_POWARUN,
                Self::DEV_KAKUREON,
                Self::DEV_KAGEBOUZU,
                Self::DEV_ZYUPETTA,
                Self::DEV_YOMAWARU,
                Self::DEV_SAMAYOORU,
                Self::DEV_TOROPIUSU,
                Self::DEV_TIRIIN,
                Self::DEV_ABUSORU,
                Self::DEV_SOONANO,
                Self::DEV_YUKIWARASI,
                Self::DEV_ONIGOORI,
                Self::DEV_TAMAZARASI,
                Self::DEV_TODOGURAA,
                Self::DEV_TODOZERUGA,
                Self::DEV_PAARURU,
                Self::DEV_HANTEERU,
                Self::DEV_SAKURABISU,
                Self::DEV_ZIIRANSU,
                Self::DEV_RABUKASU,
                Self::DEV_TATUBEI,
                Self::DEV_KOMORUU,
                Self::DEV_BOOMANDA,
                Self::DEV_DANBARU,
                Self::DEV_METANGU,
                Self::DEV_METAGUROSU,
                Self::DEV_REZIROKKU,
                Self::DEV_REZIAISU,
                Self::DEV_REZISUTIRU,
                Self::DEV_RATHIASU,
                Self::DEV_RATHIOSU,
                Self::DEV_KAIOOGA,
                Self::DEV_GURAADON,
                Self::DEV_REKKUUZA,
                Self::DEV_ZIRAATI,
                Self::DEV_DEOKISISU,
                Self::DEV_NAETORU,
                Self::DEV_HAYASIGAME,
                Self::DEV_DODAITOSU,
                Self::DEV_HIKOZARU,
                Self::DEV_MOUKAZARU,
                Self::DEV_GOUKAZARU,
                Self::DEV_POTTYAMA,
                Self::DEV_POTTAISI,
                Self::DEV_ENPERUTO,
                Self::DEV_MUKKURU,
                Self::DEV_MUKUBAADO,
                Self::DEV_MUKUHOOKU,
                Self::DEV_BIPPA,
                Self::DEV_BIIDARU,
                Self::DEV_KOROBOOSI,
                Self::DEV_KOROTOKKU,
                Self::DEV_KORINKU,
                Self::DEV_RUKUSIO,
                Self::DEV_RENTORAA,
                Self::DEV_SUBOMII,
                Self::DEV_ROZUREIDO,
                Self::DEV_ZUGAIDOSU,
                Self::DEV_RAMUPARUDO,
                Self::DEV_TATETOPUSU,
                Self::DEV_TORIDEPUSU,
                Self::DEV_MINOMUTTI,
                Self::DEV_MINOMADAMU,
                Self::DEV_GAAMEIRU,
                Self::DEV_MITUHANII,
                Self::DEV_BIIKUIN,
                Self::DEV_PATIRISU,
                Self::DEV_BUIZERU,
                Self::DEV_HUROOZERU,
                Self::DEV_THERINBO,
                Self::DEV_THERIMU,
                Self::DEV_KARANAKUSI,
                Self::DEV_TORITODON,
                Self::DEV_ETEBOOSU,
                Self::DEV_HUWANTE,
                Self::DEV_HUWARAIDO,
                Self::DEV_MIMIRORU,
                Self::DEV_MIMIROPPU,
                Self::DEV_MUUMAAZI,
                Self::DEV_DONKARASU,
                Self::DEV_NYARUMAA,
                Self::DEV_BUNYATTO,
                Self::DEV_RIISYAN,
                Self::DEV_SUKANPUU,
                Self::DEV_SUKATANKU,
                Self::DEV_DOOMIRAA,
                Self::DEV_DOOTAKUN,
                Self::DEV_USOHATI,
                Self::DEV_MANENE,
                Self::DEV_PINPUKU,
                Self::DEV_PERAPPU,
                Self::DEV_MIKARUGE,
                Self::DEV_HUKAMARU,
                Self::DEV_GABAITO,
                Self::DEV_GABURIASU,
                Self::DEV_GONBE,
                Self::DEV_RIORU,
                Self::DEV_RUKARIO,
                Self::DEV_HIPOPOTASU,
                Self::DEV_KABARUDON,
                Self::DEV_SUKORUPI,
                Self::DEV_DORAPION,
                Self::DEV_GUREGGURU,
                Self::DEV_DOKUROGGU,
                Self::DEV_MASUKIPPA,
                Self::DEV_KEIKOUO,
                Self::DEV_NEORANTO,
                Self::DEV_TAMANTA,
                Self::DEV_YUKIKABURI,
                Self::DEV_YUKINOOO,
                Self::DEV_MANYUURA,
                Self::DEV_ZIBAKOIRU,
                Self::DEV_BEROBERUTO,
                Self::DEV_DOSAIDON,
                Self::DEV_MOZYANBO,
                Self::DEV_EREKIBURU,
                Self::DEV_BUUBAAN,
                Self::DEV_TOGEKISSU,
                Self::DEV_MEGAYANMA,
                Self::DEV_RIIFIA,
                Self::DEV_GUREISIA,
                Self::DEV_GURAION,
                Self::DEV_MANMUU,
                Self::DEV_PORIGONz,
                Self::DEV_ERUREIDO,
                Self::DEV_DAINOOZU,
                Self::DEV_YONOWAARU,
                Self::DEV_YUKIMENOKO,
                Self::DEV_ROTOMU,
                Self::DEV_YUKUSII,
                Self::DEV_EMURITTO,
                Self::DEV_AGUNOMU,
                Self::DEV_DHIARUGA,
                Self::DEV_PARUKIA,
                Self::DEV_HIIDORAN,
                Self::DEV_REZIGIGASU,
                Self::DEV_GIRATHINA,
                Self::DEV_KURESERIA,
                Self::DEV_FIONE,
                Self::DEV_MANAFI,
                Self::DEV_DAAKURAI,
                Self::DEV_SHEIMI,
                Self::DEV_ARUSEUSU,
                Self::DEV_BIKUTHINI,
                Self::DEV_TUTAAZYA,
                Self::DEV_ZYANOBII,
                Self::DEV_ZYAROODA,
                Self::DEV_POKABU,
                Self::DEV_TYAOBUU,
                Self::DEV_ENBUOO,
                Self::DEV_MIZYUMARU,
                Self::DEV_HUTATIMARU,
                Self::DEV_DAIKENKI,
                Self::DEV_MINEZUMI,
                Self::DEV_MIRUHOGGU,
                Self::DEV_YOOTERII,
                Self::DEV_HAADERIA,
                Self::DEV_MUURANDO,
                Self::DEV_TYORONEKO,
                Self::DEV_REPARUDASU,
                Self::DEV_YANAPPU,
                Self::DEV_YANAKKII,
                Self::DEV_BAOPPU,
                Self::DEV_BAOKKII,
                Self::DEV_HIYAPPU,
                Self::DEV_HIYAKKII,
                Self::DEV_MUNNA,
                Self::DEV_MUSYAANA,
                Self::DEV_MAMEPATO,
                Self::DEV_HATOOBOO,
                Self::DEV_KENHOROU,
                Self::DEV_SIMAMA,
                Self::DEV_ZEBURAIKA,
                Self::DEV_DANGORO,
                Self::DEV_GANTORU,
                Self::DEV_GIGAIASU,
                Self::DEV_KOROMORI,
                Self::DEV_KOKOROMORI,
                Self::DEV_MOGURYUU,
                Self::DEV_DORYUUZU,
                Self::DEV_TABUNNE,
                Self::DEV_DOKKORAA,
                Self::DEV_DOTEKKOTU,
                Self::DEV_ROOBUSIN,
                Self::DEV_OTAMARO,
                Self::DEV_GAMAGARU,
                Self::DEV_GAMAGEROGE,
                Self::DEV_NAGEKI,
                Self::DEV_DAGEKI,
                Self::DEV_KURUMIRU,
                Self::DEV_KURUMAYU,
                Self::DEV_HAHAKOMORI,
                Self::DEV_HUSIDE,
                Self::DEV_HOIIGA,
                Self::DEV_PENDORAA,
                Self::DEV_MONMEN,
                Self::DEV_ERUHUUN,
                Self::DEV_TYURINE,
                Self::DEV_DOREDHIA,
                Self::DEV_BASURAO,
                Self::DEV_MEGUROKO,
                Self::DEV_WARUBIRU,
                Self::DEV_WARUBIARU,
                Self::DEV_DARUMAKKA,
                Self::DEV_HIHIDARUMA,
                Self::DEV_MARAKATTI,
                Self::DEV_ISIZUMAI,
                Self::DEV_IWAPARESU,
                Self::DEV_ZURUGGU,
                Self::DEV_ZURUZUKIN,
                Self::DEV_SINBORAA,
                Self::DEV_DESUMASU,
                Self::DEV_DESUKAAN,
                Self::DEV_PUROTOOGA,
                Self::DEV_ABAGOORA,
                Self::DEV_AAKEN,
                Self::DEV_AAKEOSU,
                Self::DEV_YABUKURON,
                Self::DEV_DASUTODASU,
                Self::DEV_ZOROA,
                Self::DEV_ZOROAAKU,
                Self::DEV_TIRAAMHI,
                Self::DEV_TIRATIINO,
                Self::DEV_GOTIMU,
                Self::DEV_GOTIMIRU,
                Self::DEV_GOTIRUZERU,
                Self::DEV_YUNIRAN,
                Self::DEV_DABURAN,
                Self::DEV_RANKURUSU,
                Self::DEV_KOARUHII,
                Self::DEV_SUWANNA,
                Self::DEV_BANIPUTTI,
                Self::DEV_BANIRITTI,
                Self::DEV_BAIBANIRA,
                Self::DEV_SIKIZIKA,
                Self::DEV_MEBUKIZIKA,
                Self::DEV_EMONGA,
                Self::DEV_KABURUMO,
                Self::DEV_SYUBARUGO,
                Self::DEV_TAMAGETAKE,
                Self::DEV_MOROBARERU,
                Self::DEV_PURURIRU,
                Self::DEV_BURUNGERU,
                Self::DEV_MAMANBOU,
                Self::DEV_BATYURU,
                Self::DEV_DENTYURA,
                Self::DEV_TESSIIDO,
                Self::DEV_NATTOREI,
                Self::DEV_GIARU,
                Self::DEV_GIGIARU,
                Self::DEV_GIGIGIARU,
                Self::DEV_SIBISIRASU,
                Self::DEV_SIBIBIIRU,
                Self::DEV_SIBIRUDON,
                Self::DEV_RIGUREE,
                Self::DEV_OOBEMU,
                Self::DEV_HITOMOSI,
                Self::DEV_RANPURAA,
                Self::DEV_SYANDERA,
                Self::DEV_KIBAGO,
                Self::DEV_ONONDO,
                Self::DEV_ONONOKUSU,
                Self::DEV_KUMASYUN,
                Self::DEV_TUNBEAA,
                Self::DEV_HURIIZIO,
                Self::DEV_TYOBOMAKI,
                Self::DEV_AGIRUDAA,
                Self::DEV_MAGGYO,
                Self::DEV_KOZYOHUU,
                Self::DEV_KOZYONDO,
                Self::DEV_KURIMUGAN,
                Self::DEV_GOBITTO,
                Self::DEV_GORUUGU,
                Self::DEV_KOMATANA,
                Self::DEV_KIRIKIZAN,
                Self::DEV_BAHHURON,
                Self::DEV_WASIBON,
                Self::DEV_WHOOGURU,
                Self::DEV_BARUTYAI,
                Self::DEV_BARUZIINA,
                Self::DEV_KUITARAN,
                Self::DEV_AIANTO,
                Self::DEV_MONOZU,
                Self::DEV_ZIHEDDO,
                Self::DEV_SAZANDORA,
                Self::DEV_MERARUBA,
                Self::DEV_URUGAMOSU,
                Self::DEV_KOBARUON,
                Self::DEV_TERAKION,
                Self::DEV_BIRIZION,
                Self::DEV_TORUNEROSU,
                Self::DEV_BORUTOROSU,
                Self::DEV_RESIRAMU,
                Self::DEV_ZEKUROMU,
                Self::DEV_RANDOROSU,
                Self::DEV_KYUREMU,
                Self::DEV_KERUDHIO,
                Self::DEV_MEROETTA,
                Self::DEV_GENOSEKUTO,
                Self::DEV_HARIMARON,
                Self::DEV_HARIBOOGU,
                Self::DEV_BURIGARON,
                Self::DEV_FOKKO,
                Self::DEV_TEERUNAA,
                Self::DEV_MAFOKUSII,
                Self::DEV_KEROMATU,
                Self::DEV_GEKOGASIRA,
                Self::DEV_GEKKOUGA,
                Self::DEV_HORUBII,
                Self::DEV_HORUUDO,
                Self::DEV_YAYAKOMA,
                Self::DEV_HINOYAKOMA,
                Self::DEV_FAIAROO,
                Self::DEV_KOHUKIMUSI,
                Self::DEV_KOHUURAI,
                Self::DEV_BIBIYON,
                Self::DEV_SISIKO,
                Self::DEV_KAENZISI,
                Self::DEV_HURABEBE,
                Self::DEV_HURAETTE,
                Self::DEV_HURAAJESU,
                Self::DEV_MHEEKURU,
                Self::DEV_GOOGOOTO,
                Self::DEV_YANTYAMU,
                Self::DEV_GORONDA,
                Self::DEV_TORIMIAN,
                Self::DEV_NYASUPAA,
                Self::DEV_NYAONIKUSU,
                Self::DEV_HITOTUKI,
                Self::DEV_NIDANGIRU,
                Self::DEV_GIRUGARUDO,
                Self::DEV_SYUSYUPU,
                Self::DEV_HUREHUWAN,
                Self::DEV_PEROPPAHU,
                Self::DEV_PERORIIMU,
                Self::DEV_MAAIIKA,
                Self::DEV_KARAMANERO,
                Self::DEV_KAMETETE,
                Self::DEV_GAMENODESU,
                Self::DEV_KUZUMOO,
                Self::DEV_DORAMIDORO,
                Self::DEV_UDEPPOU,
                Self::DEV_BUROSUTAA,
                Self::DEV_ERIKITERU,
                Self::DEV_EREZAADO,
                Self::DEV_TIGORASU,
                Self::DEV_GATIGORASU,
                Self::DEV_AMARUSU,
                Self::DEV_AMARURUGA,
                Self::DEV_NINFIA,
                Self::DEV_RUTYABURU,
                Self::DEV_DEDENNE,
                Self::DEV_MERESII,
                Self::DEV_NUMERA,
                Self::DEV_NUMEIRU,
                Self::DEV_NUMERUGON,
                Self::DEV_KUREHFI,
                Self::DEV_BOKUREE,
                Self::DEV_OOROTTO,
                Self::DEV_BAKETTYA,
                Self::DEV_PANPUZIN,
                Self::DEV_KATIKOORU,
                Self::DEV_KUREBEESU,
                Self::DEV_ONBATTO,
                Self::DEV_ONBAAN,
                Self::DEV_ZERUNEASU,
                Self::DEV_IBERUTARU,
                Self::DEV_ZIGARUDE,
                Self::DEV_DHIANSII,
                Self::DEV_HUUPA,
                Self::DEV_BORUKENION,
                Self::DEV_MOKUROO,
                Self::DEV_HUKUSUROO,
                Self::DEV_ZYUNAIPAA,
                Self::DEV_NYABII,
                Self::DEV_NYAHIITO,
                Self::DEV_GAOGAEN,
                Self::DEV_ASIMARI,
                Self::DEV_OSYAMARI,
                Self::DEV_ASIREENU,
                Self::DEV_TUTUKERA,
                Self::DEV_KERARAPPA,
                Self::DEV_DODEKABASI,
                Self::DEV_YANGUUSU,
                Self::DEV_DEKAGUUSU,
                Self::DEV_AGOZIMUSI,
                Self::DEV_DENDIMUSI,
                Self::DEV_KUWAGANON,
                Self::DEV_MAKENKANI,
                Self::DEV_KEKENKANI,
                Self::DEV_ODORIDORI,
                Self::DEV_ABURII,
                Self::DEV_ABURIBON,
                Self::DEV_IWANKO,
                Self::DEV_RUGARUGAN,
                Self::DEV_YOWASI,
                Self::DEV_HIDOIDE,
                Self::DEV_DOHIDOIDE,
                Self::DEV_DOROBANKO,
                Self::DEV_BANBADORO,
                Self::DEV_SIZUKUMO,
                Self::DEV_ONISIZUKUMO,
                Self::DEV_KARIKIRI,
                Self::DEV_RARANTESU,
                Self::DEV_NEMASYU,
                Self::DEV_MASHEEDO,
                Self::DEV_YATOUMORI,
                Self::DEV_ENNYUUTO,
                Self::DEV_NUIKOGUMA,
                Self::DEV_KITERUGUMA,
                Self::DEV_AMAKAZI,
                Self::DEV_AMAMAIKO,
                Self::DEV_AMAAZYO,
                Self::DEV_KYUWAWAA,
                Self::DEV_YAREYUUTAN,
                Self::DEV_NAGETUKESARU,
                Self::DEV_KOSOKUMUSI,
                Self::DEV_GUSOKUMUSYA,
                Self::DEV_SUNABHA,
                Self::DEV_SIRODESUNA,
                Self::DEV_NAMAKOBUSI,
                Self::DEV_TAIPUNURU,
                Self::DEV_SIRUVHADHI,
                Self::DEV_METENO,
                Self::DEV_NEKKOARA,
                Self::DEV_BAKUGAMESU,
                Self::DEV_TOGEDEMARU,
                Self::DEV_MIMIKKYU,
                Self::DEV_HAGIGISIRI,
                Self::DEV_ZIZIIRON,
                Self::DEV_DADARIN,
                Self::DEV_ZYARAKO,
                Self::DEV_ZYARANGO,
                Self::DEV_ZYARARANGA,
                Self::DEV_KAPUKOKEKO,
                Self::DEV_KAPUTETEHU,
                Self::DEV_KAPUBURURU,
                Self::DEV_KAPUREHIRE,
                Self::DEV_KOSUMOGGU,
                Self::DEV_KOSUMOUMU,
                Self::DEV_SORUGAREO,
                Self::DEV_RUNAAARA,
                Self::DEV_UTUROIDO,
                Self::DEV_MASSIBUUN,
                Self::DEV_FEROOTHE,
                Self::DEV_DENZYUMOKU,
                Self::DEV_TEKKAGUYA,
                Self::DEV_KAMITURUGI,
                Self::DEV_AKUZIKINGU,
                Self::DEV_NEKUROZUMA,
                Self::DEV_MAGIANA,
                Self::DEV_MAASYADOO,
                Self::DEV_BEBENOMU,
                Self::DEV_AAGOYON,
                Self::DEV_TUNDETUNDE,
                Self::DEV_ZUGADOON,
                Self::DEV_ZERAORA,
                Self::DEV_MERUTAN,
                Self::DEV_MERUMETARU,
                Self::DEV_SARUNORI,
                Self::DEV_BATINKII,
                Self::DEV_GORIRANDAA,
                Self::DEV_HIBANII,
                Self::DEV_RABIHUTTO,
                Self::DEV_EESUBAAN,
                Self::DEV_MESSON,
                Self::DEV_ZIMEREON,
                Self::DEV_INTEREON,
                Self::DEV_HOSIGARISU,
                Self::DEV_YOKUBARISU,
                Self::DEV_KOKOGARA,
                Self::DEV_AOGARASU,
                Self::DEV_AAMAAGAA,
                Self::DEV_SATTIMUSI,
                Self::DEV_REDOOMUSI,
                Self::DEV_IORUBU,
                Self::DEV_KUSUNE,
                Self::DEV_FOKUSURAI,
                Self::DEV_HIMENKA,
                Self::DEV_WATASIRAGA,
                Self::DEV_UURUU,
                Self::DEV_BAIUURUU,
                Self::DEV_KAMUKAME,
                Self::DEV_KAZIRIGAME,
                Self::DEV_WANPATI,
                Self::DEV_PARUSUWAN,
                Self::DEV_TANDON,
                Self::DEV_TOROGGON,
                Self::DEV_SEKITANZAN,
                Self::DEV_KAZITTYU,
                Self::DEV_APPURYUU,
                Self::DEV_TARUPPURU,
                Self::DEV_SUNAHEBI,
                Self::DEV_SADAIZYA,
                Self::DEV_UUU,
                Self::DEV_SASIKAMASU,
                Self::DEV_KAMASUZYOO,
                Self::DEV_EREZUN,
                Self::DEV_SUTORINDAA,
                Self::DEV_YAKUDE,
                Self::DEV_MARUYAKUDE,
                Self::DEV_TATAKKO,
                Self::DEV_OTOSUPASU,
                Self::DEV_YABATYA,
                Self::DEV_POTTODESU,
                Self::DEV_MIBURIMU,
                Self::DEV_TEBURIMU,
                Self::DEV_BURIMUON,
                Self::DEV_BEROBAA,
                Self::DEV_GIMOO,
                Self::DEV_OORONGE,
                Self::DEV_TATIHUSAGUMA,
                Self::DEV_NYAIKINGU,
                Self::DEV_SANIGOON,
                Self::DEV_NEGIGANAITO,
                Self::DEV_BARIKOORU,
                Self::DEV_DESUBAAN,
                Self::DEV_MAHOMIRU,
                Self::DEV_MAHOIPPU,
                Self::DEV_TAIREETU,
                Self::DEV_BATINUNI,
                Self::DEV_YUKIHAMI,
                Self::DEV_MOSUNOU,
                Self::DEV_ISIHENZIN,
                Self::DEV_KOORIPPO,
                Self::DEV_IESSAN,
                Self::DEV_MORUPEKO,
                Self::DEV_ZOUDOU,
                Self::DEV_DAIOUDOU,
                Self::DEV_PATTIRAGON,
                Self::DEV_PATTIRUDON,
                Self::DEV_UONORAGON,
                Self::DEV_UOTIRUDON,
                Self::DEV_ZYURARUDON,
                Self::DEV_DORAMESIYA,
                Self::DEV_DORONTI,
                Self::DEV_DORAPARUTO,
                Self::DEV_ZASIAN,
                Self::DEV_ZAMAZENTA,
                Self::DEV_MUGENDAINA,
                Self::DEV_AAMAA1,
                Self::DEV_AAMAA2,
                Self::DEV_m23,
                Self::DEV_REDEN,
                Self::DEV_REDORA,
                Self::DEV_HAKUBA,
                Self::DEV_KOKUBA,
                Self::DEV_KURAUN,
                Self::DEV_ODOSISI2,
                Self::DEV_SUTORAIKU2,
                Self::DEV_HIMEGUMA3,
                Self::DEV_rBASURAO2,
                Self::DEV_rNYUURA2,
                Self::DEV_rHARISEN2,
                Self::DEV_FEATOROSU,
                Self::DEV_NEKO1,
                Self::DEV_NEKO2,
                Self::DEV_NEKO3,
                Self::DEV_WANI1,
                Self::DEV_WANI2,
                Self::DEV_WANI3,
                Self::DEV_KAMO1,
                Self::DEV_KAMO2,
                Self::DEV_KAMO3,
                Self::DEV_BUTA1,
                Self::DEV_BUTA2,
                Self::DEV_NOKOTTI2,
                Self::DEV_KUMO1,
                Self::DEV_KUMO2,
                Self::DEV_BATTA1,
                Self::DEV_BATTA2,
                Self::DEV_SUKARABE1,
                Self::DEV_SUKARABE2,
                Self::DEV_OBAKEINU1,
                Self::DEV_OBAKEINU2,
                Self::DEV_DATYOU1,
                Self::DEV_DATYOU2,
                Self::DEV_KIRINRIKI2,
                Self::DEV_UMIDHIGUDA,
                Self::DEV_UMITORIO,
                Self::DEV_OYAKATA,
                Self::DEV_MERURUUSA,
                Self::DEV_IRUKA1,
                Self::DEV_IRUKA2,
                Self::DEV_ORIIBU1,
                Self::DEV_ORIIBU2,
                Self::DEV_ORIIBU3,
                Self::DEV_HABANERO1,
                Self::DEV_HABANERO2,
                Self::DEV_KAERU1,
                Self::DEV_KAERU2,
                Self::DEV_ENZIN1,
                Self::DEV_ENZIN2,
                Self::DEV_MIMIZU,
                Self::DEV_NEZUMI1,
                Self::DEV_NEZUMI2,
                Self::DEV_OKAKUZIRA1,
                Self::DEV_OKAKUZIRA2,
                Self::DEV_KOORIDORA1,
                Self::DEV_KOORIDORA2,
                Self::DEV_KOORIDORA3,
                Self::DEV_SUSIDORA,
                Self::DEV_BAIKU,
                Self::DEV_MAAMOTTO1,
                Self::DEV_MAAMOTTO2,
                Self::DEV_MAAMOTTO3,
                Self::DEV_MIZUDORI1,
                Self::DEV_MIZUDORI2,
                Self::DEV_KOUNOTORI,
                Self::DEV_INKO,
                Self::DEV_HURAMINGO,
                Self::DEV_KEGANI,
                Self::DEV_GANEN1,
                Self::DEV_GANEN2,
                Self::DEV_GANEN3,
                Self::DEV_KARUKAN1,
                Self::DEV_KARUKAN2,
                Self::DEV_AIAI1,
                Self::DEV_AIAI2,
                Self::DEV_PANINU1,
                Self::DEV_PANINU2,
                Self::DEV_MASUTHIHU1,
                Self::DEV_MASUTHIHU2,
                Self::DEV_TANBURU1,
                Self::DEV_TANBURU2,
                Self::DEV_KOIN1,
                Self::DEV_KOIN2,
                Self::DEV_ADONFAN,
                Self::DEV_AMOROBARERU,
                Self::DEV_AKETUBAN,
                Self::DEV_AREAKOIRU,
                Self::DEV_APURIN,
                Self::DEV_AMUUMA,
                Self::DEV_AURUGAMOSU,
                Self::DEV_AAAAA,
                Self::DEV_BDONFAN,
                Self::DEV_BKETUBAN,
                Self::DEV_BURUGAMOSU,
                Self::DEV_BHARITEYAMA,
                Self::DEV_BSAZANDORA,
                Self::DEV_BBANGIRASU,
                Self::DEV_BKOORI,
                Self::DEV_BBBBB,
                Self::DEV_ZYUNDEN1,
                Self::DEV_ZYUNDEN2,
                Self::DEV_ZYUNDEN3,
                Self::DEV_ZYUNDEN4,
                Self::DEV_AIGUANA,
                Self::DEV_BIGUANA,
                Self::DEV_FEARII1,
                Self::DEV_FEARII2,
                Self::DEV_FEARII3,
                Self::DEV_HINOKO1,
                Self::DEV_HINOKO2A,
                Self::DEV_HINOKO2B,
                Self::DEV_OKAKINGU,
                Self::DEV_OKAGYARADOSU,
                Self::DEV_KOMATANA3,
                Self::DEV_rUPAA2,
                Self::DEV_MANKII3,
            ];
            /// Returns the variant's name or "" if unknown.
            pub fn variant_name(self) -> Option<&'static str> {
                match self {
                    Self::DEV_NULL => Some("DEV_NULL"),
                    Self::DEV_HUSIGIDANE => Some("DEV_HUSIGIDANE"),
                    Self::DEV_HUSIGISOU => Some("DEV_HUSIGISOU"),
                    Self::DEV_HUSIGIBANA => Some("DEV_HUSIGIBANA"),
                    Self::DEV_HITOKAGE => Some("DEV_HITOKAGE"),
                    Self::DEV_RIZAADO => Some("DEV_RIZAADO"),
                    Self::DEV_RIZAADON => Some("DEV_RIZAADON"),
                    Self::DEV_ZENIGAME => Some("DEV_ZENIGAME"),
                    Self::DEV_KAMEERU => Some("DEV_KAMEERU"),
                    Self::DEV_KAMEKKUSU => Some("DEV_KAMEKKUSU"),
                    Self::DEV_KYATAPII => Some("DEV_KYATAPII"),
                    Self::DEV_TORANSERU => Some("DEV_TORANSERU"),
                    Self::DEV_BATAHURII => Some("DEV_BATAHURII"),
                    Self::DEV_BIIDORU => Some("DEV_BIIDORU"),
                    Self::DEV_KOKUUN => Some("DEV_KOKUUN"),
                    Self::DEV_SUPIAA => Some("DEV_SUPIAA"),
                    Self::DEV_POPPO => Some("DEV_POPPO"),
                    Self::DEV_PIZYON => Some("DEV_PIZYON"),
                    Self::DEV_PIZYOTTO => Some("DEV_PIZYOTTO"),
                    Self::DEV_KORATTA => Some("DEV_KORATTA"),
                    Self::DEV_RATTA => Some("DEV_RATTA"),
                    Self::DEV_ONISUZUME => Some("DEV_ONISUZUME"),
                    Self::DEV_ONIDORIRU => Some("DEV_ONIDORIRU"),
                    Self::DEV_AABO => Some("DEV_AABO"),
                    Self::DEV_AABOKKU => Some("DEV_AABOKKU"),
                    Self::DEV_PIKATYUU => Some("DEV_PIKATYUU"),
                    Self::DEV_RAITYUU => Some("DEV_RAITYUU"),
                    Self::DEV_SANDO => Some("DEV_SANDO"),
                    Self::DEV_SANDOPAN => Some("DEV_SANDOPAN"),
                    Self::DEV_NIDORAN_F => Some("DEV_NIDORAN_F"),
                    Self::DEV_NIDORIINA => Some("DEV_NIDORIINA"),
                    Self::DEV_NIDOKUIN => Some("DEV_NIDOKUIN"),
                    Self::DEV_NIDORAN_M => Some("DEV_NIDORAN_M"),
                    Self::DEV_NIDORIINO => Some("DEV_NIDORIINO"),
                    Self::DEV_NIDOKINGU => Some("DEV_NIDOKINGU"),
                    Self::DEV_PIPPI => Some("DEV_PIPPI"),
                    Self::DEV_PIKUSII => Some("DEV_PIKUSII"),
                    Self::DEV_ROKON => Some("DEV_ROKON"),
                    Self::DEV_KYUUKON => Some("DEV_KYUUKON"),
                    Self::DEV_PURIN => Some("DEV_PURIN"),
                    Self::DEV_PUKURIN => Some("DEV_PUKURIN"),
                    Self::DEV_ZUBATTO => Some("DEV_ZUBATTO"),
                    Self::DEV_GORUBATTO => Some("DEV_GORUBATTO"),
                    Self::DEV_NAZONOKUSA => Some("DEV_NAZONOKUSA"),
                    Self::DEV_KUSAIHANA => Some("DEV_KUSAIHANA"),
                    Self::DEV_RAHURESIA => Some("DEV_RAHURESIA"),
                    Self::DEV_PARASU => Some("DEV_PARASU"),
                    Self::DEV_PARASEKUTO => Some("DEV_PARASEKUTO"),
                    Self::DEV_KONPAN => Some("DEV_KONPAN"),
                    Self::DEV_MORUFON => Some("DEV_MORUFON"),
                    Self::DEV_DHIGUDA => Some("DEV_DHIGUDA"),
                    Self::DEV_DAGUTORIO => Some("DEV_DAGUTORIO"),
                    Self::DEV_NYAASU => Some("DEV_NYAASU"),
                    Self::DEV_PERUSIAN => Some("DEV_PERUSIAN"),
                    Self::DEV_KODAKKU => Some("DEV_KODAKKU"),
                    Self::DEV_GORUDAKKU => Some("DEV_GORUDAKKU"),
                    Self::DEV_MANKII => Some("DEV_MANKII"),
                    Self::DEV_OKORIZARU => Some("DEV_OKORIZARU"),
                    Self::DEV_GAADHI => Some("DEV_GAADHI"),
                    Self::DEV_UINDHI => Some("DEV_UINDHI"),
                    Self::DEV_NYOROMO => Some("DEV_NYOROMO"),
                    Self::DEV_NYOROZO => Some("DEV_NYOROZO"),
                    Self::DEV_NYOROBON => Some("DEV_NYOROBON"),
                    Self::DEV_KEESHI => Some("DEV_KEESHI"),
                    Self::DEV_YUNGERAA => Some("DEV_YUNGERAA"),
                    Self::DEV_HUUDHIN => Some("DEV_HUUDHIN"),
                    Self::DEV_WANRIKII => Some("DEV_WANRIKII"),
                    Self::DEV_GOORIKII => Some("DEV_GOORIKII"),
                    Self::DEV_KAIRIKII => Some("DEV_KAIRIKII"),
                    Self::DEV_MADATUBOMI => Some("DEV_MADATUBOMI"),
                    Self::DEV_UTUDON => Some("DEV_UTUDON"),
                    Self::DEV_UTUBOTTO => Some("DEV_UTUBOTTO"),
                    Self::DEV_MENOKURAGE => Some("DEV_MENOKURAGE"),
                    Self::DEV_DOKUKURAGE => Some("DEV_DOKUKURAGE"),
                    Self::DEV_ISITUBUTE => Some("DEV_ISITUBUTE"),
                    Self::DEV_GOROON => Some("DEV_GOROON"),
                    Self::DEV_GOROONYA => Some("DEV_GOROONYA"),
                    Self::DEV_PONIITA => Some("DEV_PONIITA"),
                    Self::DEV_GYAROPPU => Some("DEV_GYAROPPU"),
                    Self::DEV_YADON => Some("DEV_YADON"),
                    Self::DEV_YADORAN => Some("DEV_YADORAN"),
                    Self::DEV_KOIRU => Some("DEV_KOIRU"),
                    Self::DEV_REAKOIRU => Some("DEV_REAKOIRU"),
                    Self::DEV_KAMONEGI => Some("DEV_KAMONEGI"),
                    Self::DEV_DOODOO => Some("DEV_DOODOO"),
                    Self::DEV_DOODORIO => Some("DEV_DOODORIO"),
                    Self::DEV_PAUWAU => Some("DEV_PAUWAU"),
                    Self::DEV_ZYUGON => Some("DEV_ZYUGON"),
                    Self::DEV_BETOBETAA => Some("DEV_BETOBETAA"),
                    Self::DEV_BETOBETON => Some("DEV_BETOBETON"),
                    Self::DEV_SHERUDAA => Some("DEV_SHERUDAA"),
                    Self::DEV_PARUSHEN => Some("DEV_PARUSHEN"),
                    Self::DEV_GOOSU => Some("DEV_GOOSU"),
                    Self::DEV_GOOSUTO => Some("DEV_GOOSUTO"),
                    Self::DEV_GENGAA => Some("DEV_GENGAA"),
                    Self::DEV_IWAAKU => Some("DEV_IWAAKU"),
                    Self::DEV_SURIIPU => Some("DEV_SURIIPU"),
                    Self::DEV_SURIIPAA => Some("DEV_SURIIPAA"),
                    Self::DEV_KURABU => Some("DEV_KURABU"),
                    Self::DEV_KINGURAA => Some("DEV_KINGURAA"),
                    Self::DEV_BIRIRIDAMA => Some("DEV_BIRIRIDAMA"),
                    Self::DEV_MARUMAIN => Some("DEV_MARUMAIN"),
                    Self::DEV_TAMATAMA => Some("DEV_TAMATAMA"),
                    Self::DEV_NASSII => Some("DEV_NASSII"),
                    Self::DEV_KARAKARA => Some("DEV_KARAKARA"),
                    Self::DEV_GARAGARA => Some("DEV_GARAGARA"),
                    Self::DEV_SAWAMURAA => Some("DEV_SAWAMURAA"),
                    Self::DEV_EBIWARAA => Some("DEV_EBIWARAA"),
                    Self::DEV_BERORINGA => Some("DEV_BERORINGA"),
                    Self::DEV_DOGAASU => Some("DEV_DOGAASU"),
                    Self::DEV_MATADOGASU => Some("DEV_MATADOGASU"),
                    Self::DEV_SAIHOON => Some("DEV_SAIHOON"),
                    Self::DEV_SAIDON => Some("DEV_SAIDON"),
                    Self::DEV_RAKKII => Some("DEV_RAKKII"),
                    Self::DEV_MONZYARA => Some("DEV_MONZYARA"),
                    Self::DEV_GARUURA => Some("DEV_GARUURA"),
                    Self::DEV_TATTUU => Some("DEV_TATTUU"),
                    Self::DEV_SIIDORA => Some("DEV_SIIDORA"),
                    Self::DEV_TOSAKINTO => Some("DEV_TOSAKINTO"),
                    Self::DEV_AZUMAOU => Some("DEV_AZUMAOU"),
                    Self::DEV_HITODEMAN => Some("DEV_HITODEMAN"),
                    Self::DEV_SUTAAMII => Some("DEV_SUTAAMII"),
                    Self::DEV_BARIYAADO => Some("DEV_BARIYAADO"),
                    Self::DEV_SUTORAIKU => Some("DEV_SUTORAIKU"),
                    Self::DEV_RUUZYURA => Some("DEV_RUUZYURA"),
                    Self::DEV_EREBUU => Some("DEV_EREBUU"),
                    Self::DEV_BUUBAA => Some("DEV_BUUBAA"),
                    Self::DEV_KAIROSU => Some("DEV_KAIROSU"),
                    Self::DEV_KENTAROSU => Some("DEV_KENTAROSU"),
                    Self::DEV_KOIKINGU => Some("DEV_KOIKINGU"),
                    Self::DEV_GYARADOSU => Some("DEV_GYARADOSU"),
                    Self::DEV_RAPURASU => Some("DEV_RAPURASU"),
                    Self::DEV_METAMON => Some("DEV_METAMON"),
                    Self::DEV_IIBUI => Some("DEV_IIBUI"),
                    Self::DEV_SYAWAAZU => Some("DEV_SYAWAAZU"),
                    Self::DEV_SANDAASU => Some("DEV_SANDAASU"),
                    Self::DEV_BUUSUTAA => Some("DEV_BUUSUTAA"),
                    Self::DEV_PORIGON => Some("DEV_PORIGON"),
                    Self::DEV_OMUNAITO => Some("DEV_OMUNAITO"),
                    Self::DEV_OMUSUTAA => Some("DEV_OMUSUTAA"),
                    Self::DEV_KABUTO => Some("DEV_KABUTO"),
                    Self::DEV_KABUTOPUSU => Some("DEV_KABUTOPUSU"),
                    Self::DEV_PUTERA => Some("DEV_PUTERA"),
                    Self::DEV_KABIGON => Some("DEV_KABIGON"),
                    Self::DEV_HURIIZAA => Some("DEV_HURIIZAA"),
                    Self::DEV_SANDAA => Some("DEV_SANDAA"),
                    Self::DEV_FAIYAA => Some("DEV_FAIYAA"),
                    Self::DEV_MINIRYUU => Some("DEV_MINIRYUU"),
                    Self::DEV_HAKURYUU => Some("DEV_HAKURYUU"),
                    Self::DEV_KAIRYUU => Some("DEV_KAIRYUU"),
                    Self::DEV_MYUUTUU => Some("DEV_MYUUTUU"),
                    Self::DEV_MYUU => Some("DEV_MYUU"),
                    Self::DEV_TIKORIITA => Some("DEV_TIKORIITA"),
                    Self::DEV_BEIRIIHU => Some("DEV_BEIRIIHU"),
                    Self::DEV_MEGANIUMU => Some("DEV_MEGANIUMU"),
                    Self::DEV_HINOARASI => Some("DEV_HINOARASI"),
                    Self::DEV_MAGUMARASI => Some("DEV_MAGUMARASI"),
                    Self::DEV_BAKUHUUN => Some("DEV_BAKUHUUN"),
                    Self::DEV_WANINOKO => Some("DEV_WANINOKO"),
                    Self::DEV_ARIGEITU => Some("DEV_ARIGEITU"),
                    Self::DEV_OODAIRU => Some("DEV_OODAIRU"),
                    Self::DEV_OTATI => Some("DEV_OTATI"),
                    Self::DEV_OOTATI => Some("DEV_OOTATI"),
                    Self::DEV_HOOHOO => Some("DEV_HOOHOO"),
                    Self::DEV_YORUNOZUKU => Some("DEV_YORUNOZUKU"),
                    Self::DEV_REDHIBA => Some("DEV_REDHIBA"),
                    Self::DEV_REDHIAN => Some("DEV_REDHIAN"),
                    Self::DEV_ITOMARU => Some("DEV_ITOMARU"),
                    Self::DEV_ARIADOSU => Some("DEV_ARIADOSU"),
                    Self::DEV_KUROBATTO => Some("DEV_KUROBATTO"),
                    Self::DEV_TYONTII => Some("DEV_TYONTII"),
                    Self::DEV_RANTAAN => Some("DEV_RANTAAN"),
                    Self::DEV_PITYUU => Some("DEV_PITYUU"),
                    Self::DEV_PHI => Some("DEV_PHI"),
                    Self::DEV_PUPURIN => Some("DEV_PUPURIN"),
                    Self::DEV_TOGEPII => Some("DEV_TOGEPII"),
                    Self::DEV_TOGETIKKU => Some("DEV_TOGETIKKU"),
                    Self::DEV_NEITHI => Some("DEV_NEITHI"),
                    Self::DEV_NEITHIO => Some("DEV_NEITHIO"),
                    Self::DEV_MERIIPU => Some("DEV_MERIIPU"),
                    Self::DEV_MOKOKO => Some("DEV_MOKOKO"),
                    Self::DEV_DENRYUU => Some("DEV_DENRYUU"),
                    Self::DEV_KIREIHANA => Some("DEV_KIREIHANA"),
                    Self::DEV_MARIRU => Some("DEV_MARIRU"),
                    Self::DEV_MARIRURI => Some("DEV_MARIRURI"),
                    Self::DEV_USOKKII => Some("DEV_USOKKII"),
                    Self::DEV_NYOROTONO => Some("DEV_NYOROTONO"),
                    Self::DEV_HANEKKO => Some("DEV_HANEKKO"),
                    Self::DEV_POPOKKO => Some("DEV_POPOKKO"),
                    Self::DEV_WATAKKO => Some("DEV_WATAKKO"),
                    Self::DEV_EIPAMU => Some("DEV_EIPAMU"),
                    Self::DEV_HIMANATTU => Some("DEV_HIMANATTU"),
                    Self::DEV_KIMAWARI => Some("DEV_KIMAWARI"),
                    Self::DEV_YANYANMA => Some("DEV_YANYANMA"),
                    Self::DEV_UPAA => Some("DEV_UPAA"),
                    Self::DEV_NUOO => Some("DEV_NUOO"),
                    Self::DEV_EEFI => Some("DEV_EEFI"),
                    Self::DEV_BURAKKII => Some("DEV_BURAKKII"),
                    Self::DEV_YAMIKARASU => Some("DEV_YAMIKARASU"),
                    Self::DEV_YADOKINGU => Some("DEV_YADOKINGU"),
                    Self::DEV_MUUMA => Some("DEV_MUUMA"),
                    Self::DEV_ANNOON => Some("DEV_ANNOON"),
                    Self::DEV_SOONANSU => Some("DEV_SOONANSU"),
                    Self::DEV_KIRINRIKI => Some("DEV_KIRINRIKI"),
                    Self::DEV_KUNUGIDAMA => Some("DEV_KUNUGIDAMA"),
                    Self::DEV_FORETOSU => Some("DEV_FORETOSU"),
                    Self::DEV_NOKOTTI => Some("DEV_NOKOTTI"),
                    Self::DEV_GURAIGAA => Some("DEV_GURAIGAA"),
                    Self::DEV_HAGANEERU => Some("DEV_HAGANEERU"),
                    Self::DEV_BURUU => Some("DEV_BURUU"),
                    Self::DEV_GURANBURU => Some("DEV_GURANBURU"),
                    Self::DEV_HARIISEN => Some("DEV_HARIISEN"),
                    Self::DEV_HASSAMU => Some("DEV_HASSAMU"),
                    Self::DEV_TUBOTUBO => Some("DEV_TUBOTUBO"),
                    Self::DEV_HERAKUROSU => Some("DEV_HERAKUROSU"),
                    Self::DEV_NYUURA => Some("DEV_NYUURA"),
                    Self::DEV_HIMEGUMA => Some("DEV_HIMEGUMA"),
                    Self::DEV_RINGUMA => Some("DEV_RINGUMA"),
                    Self::DEV_MAGUMAGGU => Some("DEV_MAGUMAGGU"),
                    Self::DEV_MAGUKARUGO => Some("DEV_MAGUKARUGO"),
                    Self::DEV_URIMUU => Some("DEV_URIMUU"),
                    Self::DEV_INOMUU => Some("DEV_INOMUU"),
                    Self::DEV_SANIIGO => Some("DEV_SANIIGO"),
                    Self::DEV_TEPPOUO => Some("DEV_TEPPOUO"),
                    Self::DEV_OKUTAN => Some("DEV_OKUTAN"),
                    Self::DEV_DERIBAADO => Some("DEV_DERIBAADO"),
                    Self::DEV_MANTAIN => Some("DEV_MANTAIN"),
                    Self::DEV_EAAMUDO => Some("DEV_EAAMUDO"),
                    Self::DEV_DERUBIRU => Some("DEV_DERUBIRU"),
                    Self::DEV_HERUGAA => Some("DEV_HERUGAA"),
                    Self::DEV_KINGUDORA => Some("DEV_KINGUDORA"),
                    Self::DEV_GOMAZOU => Some("DEV_GOMAZOU"),
                    Self::DEV_DONFAN => Some("DEV_DONFAN"),
                    Self::DEV_PORIGON2 => Some("DEV_PORIGON2"),
                    Self::DEV_ODOSISI => Some("DEV_ODOSISI"),
                    Self::DEV_DOOBURU => Some("DEV_DOOBURU"),
                    Self::DEV_BARUKII => Some("DEV_BARUKII"),
                    Self::DEV_KAPOERAA => Some("DEV_KAPOERAA"),
                    Self::DEV_MUTYUURU => Some("DEV_MUTYUURU"),
                    Self::DEV_EREKIDDO => Some("DEV_EREKIDDO"),
                    Self::DEV_BUBHI => Some("DEV_BUBHI"),
                    Self::DEV_MIRUTANKU => Some("DEV_MIRUTANKU"),
                    Self::DEV_HAPINASU => Some("DEV_HAPINASU"),
                    Self::DEV_RAIKOU => Some("DEV_RAIKOU"),
                    Self::DEV_ENTEI => Some("DEV_ENTEI"),
                    Self::DEV_SUIKUN => Some("DEV_SUIKUN"),
                    Self::DEV_YOOGIRASU => Some("DEV_YOOGIRASU"),
                    Self::DEV_SANAGIRASU => Some("DEV_SANAGIRASU"),
                    Self::DEV_BANGIRASU => Some("DEV_BANGIRASU"),
                    Self::DEV_RUGIA => Some("DEV_RUGIA"),
                    Self::DEV_HOUOU => Some("DEV_HOUOU"),
                    Self::DEV_SEREBHI => Some("DEV_SEREBHI"),
                    Self::DEV_KIMORI => Some("DEV_KIMORI"),
                    Self::DEV_ZYUPUTORU => Some("DEV_ZYUPUTORU"),
                    Self::DEV_ZYUKAIN => Some("DEV_ZYUKAIN"),
                    Self::DEV_ATYAMO => Some("DEV_ATYAMO"),
                    Self::DEV_WAKASYAMO => Some("DEV_WAKASYAMO"),
                    Self::DEV_BASYAAMO => Some("DEV_BASYAAMO"),
                    Self::DEV_MIZUGOROU => Some("DEV_MIZUGOROU"),
                    Self::DEV_NUMAKUROO => Some("DEV_NUMAKUROO"),
                    Self::DEV_RAGURAAZI => Some("DEV_RAGURAAZI"),
                    Self::DEV_POTIENA => Some("DEV_POTIENA"),
                    Self::DEV_GURAENA => Some("DEV_GURAENA"),
                    Self::DEV_ZIGUZAGUMA => Some("DEV_ZIGUZAGUMA"),
                    Self::DEV_MASSUGUMA => Some("DEV_MASSUGUMA"),
                    Self::DEV_KEMUSSO => Some("DEV_KEMUSSO"),
                    Self::DEV_KARASARISU => Some("DEV_KARASARISU"),
                    Self::DEV_AGEHANTO => Some("DEV_AGEHANTO"),
                    Self::DEV_MAYURUDO => Some("DEV_MAYURUDO"),
                    Self::DEV_DOKUKEIRU => Some("DEV_DOKUKEIRU"),
                    Self::DEV_HASUBOO => Some("DEV_HASUBOO"),
                    Self::DEV_HASUBURERO => Some("DEV_HASUBURERO"),
                    Self::DEV_RUNPAPPA => Some("DEV_RUNPAPPA"),
                    Self::DEV_TANEBOO => Some("DEV_TANEBOO"),
                    Self::DEV_KONOHANA => Some("DEV_KONOHANA"),
                    Self::DEV_DAATENGU => Some("DEV_DAATENGU"),
                    Self::DEV_SUBAME => Some("DEV_SUBAME"),
                    Self::DEV_OOSUBAME => Some("DEV_OOSUBAME"),
                    Self::DEV_KYAMOME => Some("DEV_KYAMOME"),
                    Self::DEV_PERIPPAA => Some("DEV_PERIPPAA"),
                    Self::DEV_RARUTOSU => Some("DEV_RARUTOSU"),
                    Self::DEV_KIRURIA => Some("DEV_KIRURIA"),
                    Self::DEV_SAANAITO => Some("DEV_SAANAITO"),
                    Self::DEV_AMETAMA => Some("DEV_AMETAMA"),
                    Self::DEV_AMEMOOSU => Some("DEV_AMEMOOSU"),
                    Self::DEV_KINOKOKO => Some("DEV_KINOKOKO"),
                    Self::DEV_KINOGASSA => Some("DEV_KINOGASSA"),
                    Self::DEV_NAMAKERO => Some("DEV_NAMAKERO"),
                    Self::DEV_YARUKIMONO => Some("DEV_YARUKIMONO"),
                    Self::DEV_KEKKINGU => Some("DEV_KEKKINGU"),
                    Self::DEV_TUTININ => Some("DEV_TUTININ"),
                    Self::DEV_TEKKANIN => Some("DEV_TEKKANIN"),
                    Self::DEV_NUKENIN => Some("DEV_NUKENIN"),
                    Self::DEV_GONYONYO => Some("DEV_GONYONYO"),
                    Self::DEV_DOGOOMU => Some("DEV_DOGOOMU"),
                    Self::DEV_BAKUONGU => Some("DEV_BAKUONGU"),
                    Self::DEV_MAKUNOSITA => Some("DEV_MAKUNOSITA"),
                    Self::DEV_HARITEYAMA => Some("DEV_HARITEYAMA"),
                    Self::DEV_RURIRI => Some("DEV_RURIRI"),
                    Self::DEV_NOZUPASU => Some("DEV_NOZUPASU"),
                    Self::DEV_ENEKO => Some("DEV_ENEKO"),
                    Self::DEV_ENEKORORO => Some("DEV_ENEKORORO"),
                    Self::DEV_YAMIRAMI => Some("DEV_YAMIRAMI"),
                    Self::DEV_KUTIITO => Some("DEV_KUTIITO"),
                    Self::DEV_KOKODORA => Some("DEV_KOKODORA"),
                    Self::DEV_KODORA => Some("DEV_KODORA"),
                    Self::DEV_BOSUGODORA => Some("DEV_BOSUGODORA"),
                    Self::DEV_ASANAN => Some("DEV_ASANAN"),
                    Self::DEV_TYAAREMU => Some("DEV_TYAAREMU"),
                    Self::DEV_RAKURAI => Some("DEV_RAKURAI"),
                    Self::DEV_RAIBORUTO => Some("DEV_RAIBORUTO"),
                    Self::DEV_PURASURU => Some("DEV_PURASURU"),
                    Self::DEV_MAINAN => Some("DEV_MAINAN"),
                    Self::DEV_BARUBIITO => Some("DEV_BARUBIITO"),
                    Self::DEV_IRUMIIZE => Some("DEV_IRUMIIZE"),
                    Self::DEV_ROZERIA => Some("DEV_ROZERIA"),
                    Self::DEV_GOKURIN => Some("DEV_GOKURIN"),
                    Self::DEV_MARUNOOMU => Some("DEV_MARUNOOMU"),
                    Self::DEV_KIBANIA => Some("DEV_KIBANIA"),
                    Self::DEV_SAMEHADAA => Some("DEV_SAMEHADAA"),
                    Self::DEV_HOERUKO => Some("DEV_HOERUKO"),
                    Self::DEV_HOERUOO => Some("DEV_HOERUOO"),
                    Self::DEV_DONMERU => Some("DEV_DONMERU"),
                    Self::DEV_BAKUUDA => Some("DEV_BAKUUDA"),
                    Self::DEV_KOOTASU => Some("DEV_KOOTASU"),
                    Self::DEV_BANEBUU => Some("DEV_BANEBUU"),
                    Self::DEV_BUUPIGGU => Some("DEV_BUUPIGGU"),
                    Self::DEV_PATTIIRU => Some("DEV_PATTIIRU"),
                    Self::DEV_NAKKURAA => Some("DEV_NAKKURAA"),
                    Self::DEV_BIBURAABA => Some("DEV_BIBURAABA"),
                    Self::DEV_HURAIGON => Some("DEV_HURAIGON"),
                    Self::DEV_SABONEA => Some("DEV_SABONEA"),
                    Self::DEV_NOKUTASU => Some("DEV_NOKUTASU"),
                    Self::DEV_TIRUTTO => Some("DEV_TIRUTTO"),
                    Self::DEV_TIRUTARISU => Some("DEV_TIRUTARISU"),
                    Self::DEV_ZANGUUSU => Some("DEV_ZANGUUSU"),
                    Self::DEV_HABUNEEKU => Some("DEV_HABUNEEKU"),
                    Self::DEV_RUNATOON => Some("DEV_RUNATOON"),
                    Self::DEV_SORUROKKU => Some("DEV_SORUROKKU"),
                    Self::DEV_DOZYOTTI => Some("DEV_DOZYOTTI"),
                    Self::DEV_NAMAZUN => Some("DEV_NAMAZUN"),
                    Self::DEV_HEIGANI => Some("DEV_HEIGANI"),
                    Self::DEV_SIZARIGAA => Some("DEV_SIZARIGAA"),
                    Self::DEV_YAZIRON => Some("DEV_YAZIRON"),
                    Self::DEV_NENDOORU => Some("DEV_NENDOORU"),
                    Self::DEV_RIRIIRA => Some("DEV_RIRIIRA"),
                    Self::DEV_YUREIDORU => Some("DEV_YUREIDORU"),
                    Self::DEV_ANOPUSU => Some("DEV_ANOPUSU"),
                    Self::DEV_AAMARUDO => Some("DEV_AAMARUDO"),
                    Self::DEV_HINBASU => Some("DEV_HINBASU"),
                    Self::DEV_MIROKAROSU => Some("DEV_MIROKAROSU"),
                    Self::DEV_POWARUN => Some("DEV_POWARUN"),
                    Self::DEV_KAKUREON => Some("DEV_KAKUREON"),
                    Self::DEV_KAGEBOUZU => Some("DEV_KAGEBOUZU"),
                    Self::DEV_ZYUPETTA => Some("DEV_ZYUPETTA"),
                    Self::DEV_YOMAWARU => Some("DEV_YOMAWARU"),
                    Self::DEV_SAMAYOORU => Some("DEV_SAMAYOORU"),
                    Self::DEV_TOROPIUSU => Some("DEV_TOROPIUSU"),
                    Self::DEV_TIRIIN => Some("DEV_TIRIIN"),
                    Self::DEV_ABUSORU => Some("DEV_ABUSORU"),
                    Self::DEV_SOONANO => Some("DEV_SOONANO"),
                    Self::DEV_YUKIWARASI => Some("DEV_YUKIWARASI"),
                    Self::DEV_ONIGOORI => Some("DEV_ONIGOORI"),
                    Self::DEV_TAMAZARASI => Some("DEV_TAMAZARASI"),
                    Self::DEV_TODOGURAA => Some("DEV_TODOGURAA"),
                    Self::DEV_TODOZERUGA => Some("DEV_TODOZERUGA"),
                    Self::DEV_PAARURU => Some("DEV_PAARURU"),
                    Self::DEV_HANTEERU => Some("DEV_HANTEERU"),
                    Self::DEV_SAKURABISU => Some("DEV_SAKURABISU"),
                    Self::DEV_ZIIRANSU => Some("DEV_ZIIRANSU"),
                    Self::DEV_RABUKASU => Some("DEV_RABUKASU"),
                    Self::DEV_TATUBEI => Some("DEV_TATUBEI"),
                    Self::DEV_KOMORUU => Some("DEV_KOMORUU"),
                    Self::DEV_BOOMANDA => Some("DEV_BOOMANDA"),
                    Self::DEV_DANBARU => Some("DEV_DANBARU"),
                    Self::DEV_METANGU => Some("DEV_METANGU"),
                    Self::DEV_METAGUROSU => Some("DEV_METAGUROSU"),
                    Self::DEV_REZIROKKU => Some("DEV_REZIROKKU"),
                    Self::DEV_REZIAISU => Some("DEV_REZIAISU"),
                    Self::DEV_REZISUTIRU => Some("DEV_REZISUTIRU"),
                    Self::DEV_RATHIASU => Some("DEV_RATHIASU"),
                    Self::DEV_RATHIOSU => Some("DEV_RATHIOSU"),
                    Self::DEV_KAIOOGA => Some("DEV_KAIOOGA"),
                    Self::DEV_GURAADON => Some("DEV_GURAADON"),
                    Self::DEV_REKKUUZA => Some("DEV_REKKUUZA"),
                    Self::DEV_ZIRAATI => Some("DEV_ZIRAATI"),
                    Self::DEV_DEOKISISU => Some("DEV_DEOKISISU"),
                    Self::DEV_NAETORU => Some("DEV_NAETORU"),
                    Self::DEV_HAYASIGAME => Some("DEV_HAYASIGAME"),
                    Self::DEV_DODAITOSU => Some("DEV_DODAITOSU"),
                    Self::DEV_HIKOZARU => Some("DEV_HIKOZARU"),
                    Self::DEV_MOUKAZARU => Some("DEV_MOUKAZARU"),
                    Self::DEV_GOUKAZARU => Some("DEV_GOUKAZARU"),
                    Self::DEV_POTTYAMA => Some("DEV_POTTYAMA"),
                    Self::DEV_POTTAISI => Some("DEV_POTTAISI"),
                    Self::DEV_ENPERUTO => Some("DEV_ENPERUTO"),
                    Self::DEV_MUKKURU => Some("DEV_MUKKURU"),
                    Self::DEV_MUKUBAADO => Some("DEV_MUKUBAADO"),
                    Self::DEV_MUKUHOOKU => Some("DEV_MUKUHOOKU"),
                    Self::DEV_BIPPA => Some("DEV_BIPPA"),
                    Self::DEV_BIIDARU => Some("DEV_BIIDARU"),
                    Self::DEV_KOROBOOSI => Some("DEV_KOROBOOSI"),
                    Self::DEV_KOROTOKKU => Some("DEV_KOROTOKKU"),
                    Self::DEV_KORINKU => Some("DEV_KORINKU"),
                    Self::DEV_RUKUSIO => Some("DEV_RUKUSIO"),
                    Self::DEV_RENTORAA => Some("DEV_RENTORAA"),
                    Self::DEV_SUBOMII => Some("DEV_SUBOMII"),
                    Self::DEV_ROZUREIDO => Some("DEV_ROZUREIDO"),
                    Self::DEV_ZUGAIDOSU => Some("DEV_ZUGAIDOSU"),
                    Self::DEV_RAMUPARUDO => Some("DEV_RAMUPARUDO"),
                    Self::DEV_TATETOPUSU => Some("DEV_TATETOPUSU"),
                    Self::DEV_TORIDEPUSU => Some("DEV_TORIDEPUSU"),
                    Self::DEV_MINOMUTTI => Some("DEV_MINOMUTTI"),
                    Self::DEV_MINOMADAMU => Some("DEV_MINOMADAMU"),
                    Self::DEV_GAAMEIRU => Some("DEV_GAAMEIRU"),
                    Self::DEV_MITUHANII => Some("DEV_MITUHANII"),
                    Self::DEV_BIIKUIN => Some("DEV_BIIKUIN"),
                    Self::DEV_PATIRISU => Some("DEV_PATIRISU"),
                    Self::DEV_BUIZERU => Some("DEV_BUIZERU"),
                    Self::DEV_HUROOZERU => Some("DEV_HUROOZERU"),
                    Self::DEV_THERINBO => Some("DEV_THERINBO"),
                    Self::DEV_THERIMU => Some("DEV_THERIMU"),
                    Self::DEV_KARANAKUSI => Some("DEV_KARANAKUSI"),
                    Self::DEV_TORITODON => Some("DEV_TORITODON"),
                    Self::DEV_ETEBOOSU => Some("DEV_ETEBOOSU"),
                    Self::DEV_HUWANTE => Some("DEV_HUWANTE"),
                    Self::DEV_HUWARAIDO => Some("DEV_HUWARAIDO"),
                    Self::DEV_MIMIRORU => Some("DEV_MIMIRORU"),
                    Self::DEV_MIMIROPPU => Some("DEV_MIMIROPPU"),
                    Self::DEV_MUUMAAZI => Some("DEV_MUUMAAZI"),
                    Self::DEV_DONKARASU => Some("DEV_DONKARASU"),
                    Self::DEV_NYARUMAA => Some("DEV_NYARUMAA"),
                    Self::DEV_BUNYATTO => Some("DEV_BUNYATTO"),
                    Self::DEV_RIISYAN => Some("DEV_RIISYAN"),
                    Self::DEV_SUKANPUU => Some("DEV_SUKANPUU"),
                    Self::DEV_SUKATANKU => Some("DEV_SUKATANKU"),
                    Self::DEV_DOOMIRAA => Some("DEV_DOOMIRAA"),
                    Self::DEV_DOOTAKUN => Some("DEV_DOOTAKUN"),
                    Self::DEV_USOHATI => Some("DEV_USOHATI"),
                    Self::DEV_MANENE => Some("DEV_MANENE"),
                    Self::DEV_PINPUKU => Some("DEV_PINPUKU"),
                    Self::DEV_PERAPPU => Some("DEV_PERAPPU"),
                    Self::DEV_MIKARUGE => Some("DEV_MIKARUGE"),
                    Self::DEV_HUKAMARU => Some("DEV_HUKAMARU"),
                    Self::DEV_GABAITO => Some("DEV_GABAITO"),
                    Self::DEV_GABURIASU => Some("DEV_GABURIASU"),
                    Self::DEV_GONBE => Some("DEV_GONBE"),
                    Self::DEV_RIORU => Some("DEV_RIORU"),
                    Self::DEV_RUKARIO => Some("DEV_RUKARIO"),
                    Self::DEV_HIPOPOTASU => Some("DEV_HIPOPOTASU"),
                    Self::DEV_KABARUDON => Some("DEV_KABARUDON"),
                    Self::DEV_SUKORUPI => Some("DEV_SUKORUPI"),
                    Self::DEV_DORAPION => Some("DEV_DORAPION"),
                    Self::DEV_GUREGGURU => Some("DEV_GUREGGURU"),
                    Self::DEV_DOKUROGGU => Some("DEV_DOKUROGGU"),
                    Self::DEV_MASUKIPPA => Some("DEV_MASUKIPPA"),
                    Self::DEV_KEIKOUO => Some("DEV_KEIKOUO"),
                    Self::DEV_NEORANTO => Some("DEV_NEORANTO"),
                    Self::DEV_TAMANTA => Some("DEV_TAMANTA"),
                    Self::DEV_YUKIKABURI => Some("DEV_YUKIKABURI"),
                    Self::DEV_YUKINOOO => Some("DEV_YUKINOOO"),
                    Self::DEV_MANYUURA => Some("DEV_MANYUURA"),
                    Self::DEV_ZIBAKOIRU => Some("DEV_ZIBAKOIRU"),
                    Self::DEV_BEROBERUTO => Some("DEV_BEROBERUTO"),
                    Self::DEV_DOSAIDON => Some("DEV_DOSAIDON"),
                    Self::DEV_MOZYANBO => Some("DEV_MOZYANBO"),
                    Self::DEV_EREKIBURU => Some("DEV_EREKIBURU"),
                    Self::DEV_BUUBAAN => Some("DEV_BUUBAAN"),
                    Self::DEV_TOGEKISSU => Some("DEV_TOGEKISSU"),
                    Self::DEV_MEGAYANMA => Some("DEV_MEGAYANMA"),
                    Self::DEV_RIIFIA => Some("DEV_RIIFIA"),
                    Self::DEV_GUREISIA => Some("DEV_GUREISIA"),
                    Self::DEV_GURAION => Some("DEV_GURAION"),
                    Self::DEV_MANMUU => Some("DEV_MANMUU"),
                    Self::DEV_PORIGONz => Some("DEV_PORIGONz"),
                    Self::DEV_ERUREIDO => Some("DEV_ERUREIDO"),
                    Self::DEV_DAINOOZU => Some("DEV_DAINOOZU"),
                    Self::DEV_YONOWAARU => Some("DEV_YONOWAARU"),
                    Self::DEV_YUKIMENOKO => Some("DEV_YUKIMENOKO"),
                    Self::DEV_ROTOMU => Some("DEV_ROTOMU"),
                    Self::DEV_YUKUSII => Some("DEV_YUKUSII"),
                    Self::DEV_EMURITTO => Some("DEV_EMURITTO"),
                    Self::DEV_AGUNOMU => Some("DEV_AGUNOMU"),
                    Self::DEV_DHIARUGA => Some("DEV_DHIARUGA"),
                    Self::DEV_PARUKIA => Some("DEV_PARUKIA"),
                    Self::DEV_HIIDORAN => Some("DEV_HIIDORAN"),
                    Self::DEV_REZIGIGASU => Some("DEV_REZIGIGASU"),
                    Self::DEV_GIRATHINA => Some("DEV_GIRATHINA"),
                    Self::DEV_KURESERIA => Some("DEV_KURESERIA"),
                    Self::DEV_FIONE => Some("DEV_FIONE"),
                    Self::DEV_MANAFI => Some("DEV_MANAFI"),
                    Self::DEV_DAAKURAI => Some("DEV_DAAKURAI"),
                    Self::DEV_SHEIMI => Some("DEV_SHEIMI"),
                    Self::DEV_ARUSEUSU => Some("DEV_ARUSEUSU"),
                    Self::DEV_BIKUTHINI => Some("DEV_BIKUTHINI"),
                    Self::DEV_TUTAAZYA => Some("DEV_TUTAAZYA"),
                    Self::DEV_ZYANOBII => Some("DEV_ZYANOBII"),
                    Self::DEV_ZYAROODA => Some("DEV_ZYAROODA"),
                    Self::DEV_POKABU => Some("DEV_POKABU"),
                    Self::DEV_TYAOBUU => Some("DEV_TYAOBUU"),
                    Self::DEV_ENBUOO => Some("DEV_ENBUOO"),
                    Self::DEV_MIZYUMARU => Some("DEV_MIZYUMARU"),
                    Self::DEV_HUTATIMARU => Some("DEV_HUTATIMARU"),
                    Self::DEV_DAIKENKI => Some("DEV_DAIKENKI"),
                    Self::DEV_MINEZUMI => Some("DEV_MINEZUMI"),
                    Self::DEV_MIRUHOGGU => Some("DEV_MIRUHOGGU"),
                    Self::DEV_YOOTERII => Some("DEV_YOOTERII"),
                    Self::DEV_HAADERIA => Some("DEV_HAADERIA"),
                    Self::DEV_MUURANDO => Some("DEV_MUURANDO"),
                    Self::DEV_TYORONEKO => Some("DEV_TYORONEKO"),
                    Self::DEV_REPARUDASU => Some("DEV_REPARUDASU"),
                    Self::DEV_YANAPPU => Some("DEV_YANAPPU"),
                    Self::DEV_YANAKKII => Some("DEV_YANAKKII"),
                    Self::DEV_BAOPPU => Some("DEV_BAOPPU"),
                    Self::DEV_BAOKKII => Some("DEV_BAOKKII"),
                    Self::DEV_HIYAPPU => Some("DEV_HIYAPPU"),
                    Self::DEV_HIYAKKII => Some("DEV_HIYAKKII"),
                    Self::DEV_MUNNA => Some("DEV_MUNNA"),
                    Self::DEV_MUSYAANA => Some("DEV_MUSYAANA"),
                    Self::DEV_MAMEPATO => Some("DEV_MAMEPATO"),
                    Self::DEV_HATOOBOO => Some("DEV_HATOOBOO"),
                    Self::DEV_KENHOROU => Some("DEV_KENHOROU"),
                    Self::DEV_SIMAMA => Some("DEV_SIMAMA"),
                    Self::DEV_ZEBURAIKA => Some("DEV_ZEBURAIKA"),
                    Self::DEV_DANGORO => Some("DEV_DANGORO"),
                    Self::DEV_GANTORU => Some("DEV_GANTORU"),
                    Self::DEV_GIGAIASU => Some("DEV_GIGAIASU"),
                    Self::DEV_KOROMORI => Some("DEV_KOROMORI"),
                    Self::DEV_KOKOROMORI => Some("DEV_KOKOROMORI"),
                    Self::DEV_MOGURYUU => Some("DEV_MOGURYUU"),
                    Self::DEV_DORYUUZU => Some("DEV_DORYUUZU"),
                    Self::DEV_TABUNNE => Some("DEV_TABUNNE"),
                    Self::DEV_DOKKORAA => Some("DEV_DOKKORAA"),
                    Self::DEV_DOTEKKOTU => Some("DEV_DOTEKKOTU"),
                    Self::DEV_ROOBUSIN => Some("DEV_ROOBUSIN"),
                    Self::DEV_OTAMARO => Some("DEV_OTAMARO"),
                    Self::DEV_GAMAGARU => Some("DEV_GAMAGARU"),
                    Self::DEV_GAMAGEROGE => Some("DEV_GAMAGEROGE"),
                    Self::DEV_NAGEKI => Some("DEV_NAGEKI"),
                    Self::DEV_DAGEKI => Some("DEV_DAGEKI"),
                    Self::DEV_KURUMIRU => Some("DEV_KURUMIRU"),
                    Self::DEV_KURUMAYU => Some("DEV_KURUMAYU"),
                    Self::DEV_HAHAKOMORI => Some("DEV_HAHAKOMORI"),
                    Self::DEV_HUSIDE => Some("DEV_HUSIDE"),
                    Self::DEV_HOIIGA => Some("DEV_HOIIGA"),
                    Self::DEV_PENDORAA => Some("DEV_PENDORAA"),
                    Self::DEV_MONMEN => Some("DEV_MONMEN"),
                    Self::DEV_ERUHUUN => Some("DEV_ERUHUUN"),
                    Self::DEV_TYURINE => Some("DEV_TYURINE"),
                    Self::DEV_DOREDHIA => Some("DEV_DOREDHIA"),
                    Self::DEV_BASURAO => Some("DEV_BASURAO"),
                    Self::DEV_MEGUROKO => Some("DEV_MEGUROKO"),
                    Self::DEV_WARUBIRU => Some("DEV_WARUBIRU"),
                    Self::DEV_WARUBIARU => Some("DEV_WARUBIARU"),
                    Self::DEV_DARUMAKKA => Some("DEV_DARUMAKKA"),
                    Self::DEV_HIHIDARUMA => Some("DEV_HIHIDARUMA"),
                    Self::DEV_MARAKATTI => Some("DEV_MARAKATTI"),
                    Self::DEV_ISIZUMAI => Some("DEV_ISIZUMAI"),
                    Self::DEV_IWAPARESU => Some("DEV_IWAPARESU"),
                    Self::DEV_ZURUGGU => Some("DEV_ZURUGGU"),
                    Self::DEV_ZURUZUKIN => Some("DEV_ZURUZUKIN"),
                    Self::DEV_SINBORAA => Some("DEV_SINBORAA"),
                    Self::DEV_DESUMASU => Some("DEV_DESUMASU"),
                    Self::DEV_DESUKAAN => Some("DEV_DESUKAAN"),
                    Self::DEV_PUROTOOGA => Some("DEV_PUROTOOGA"),
                    Self::DEV_ABAGOORA => Some("DEV_ABAGOORA"),
                    Self::DEV_AAKEN => Some("DEV_AAKEN"),
                    Self::DEV_AAKEOSU => Some("DEV_AAKEOSU"),
                    Self::DEV_YABUKURON => Some("DEV_YABUKURON"),
                    Self::DEV_DASUTODASU => Some("DEV_DASUTODASU"),
                    Self::DEV_ZOROA => Some("DEV_ZOROA"),
                    Self::DEV_ZOROAAKU => Some("DEV_ZOROAAKU"),
                    Self::DEV_TIRAAMHI => Some("DEV_TIRAAMHI"),
                    Self::DEV_TIRATIINO => Some("DEV_TIRATIINO"),
                    Self::DEV_GOTIMU => Some("DEV_GOTIMU"),
                    Self::DEV_GOTIMIRU => Some("DEV_GOTIMIRU"),
                    Self::DEV_GOTIRUZERU => Some("DEV_GOTIRUZERU"),
                    Self::DEV_YUNIRAN => Some("DEV_YUNIRAN"),
                    Self::DEV_DABURAN => Some("DEV_DABURAN"),
                    Self::DEV_RANKURUSU => Some("DEV_RANKURUSU"),
                    Self::DEV_KOARUHII => Some("DEV_KOARUHII"),
                    Self::DEV_SUWANNA => Some("DEV_SUWANNA"),
                    Self::DEV_BANIPUTTI => Some("DEV_BANIPUTTI"),
                    Self::DEV_BANIRITTI => Some("DEV_BANIRITTI"),
                    Self::DEV_BAIBANIRA => Some("DEV_BAIBANIRA"),
                    Self::DEV_SIKIZIKA => Some("DEV_SIKIZIKA"),
                    Self::DEV_MEBUKIZIKA => Some("DEV_MEBUKIZIKA"),
                    Self::DEV_EMONGA => Some("DEV_EMONGA"),
                    Self::DEV_KABURUMO => Some("DEV_KABURUMO"),
                    Self::DEV_SYUBARUGO => Some("DEV_SYUBARUGO"),
                    Self::DEV_TAMAGETAKE => Some("DEV_TAMAGETAKE"),
                    Self::DEV_MOROBARERU => Some("DEV_MOROBARERU"),
                    Self::DEV_PURURIRU => Some("DEV_PURURIRU"),
                    Self::DEV_BURUNGERU => Some("DEV_BURUNGERU"),
                    Self::DEV_MAMANBOU => Some("DEV_MAMANBOU"),
                    Self::DEV_BATYURU => Some("DEV_BATYURU"),
                    Self::DEV_DENTYURA => Some("DEV_DENTYURA"),
                    Self::DEV_TESSIIDO => Some("DEV_TESSIIDO"),
                    Self::DEV_NATTOREI => Some("DEV_NATTOREI"),
                    Self::DEV_GIARU => Some("DEV_GIARU"),
                    Self::DEV_GIGIARU => Some("DEV_GIGIARU"),
                    Self::DEV_GIGIGIARU => Some("DEV_GIGIGIARU"),
                    Self::DEV_SIBISIRASU => Some("DEV_SIBISIRASU"),
                    Self::DEV_SIBIBIIRU => Some("DEV_SIBIBIIRU"),
                    Self::DEV_SIBIRUDON => Some("DEV_SIBIRUDON"),
                    Self::DEV_RIGUREE => Some("DEV_RIGUREE"),
                    Self::DEV_OOBEMU => Some("DEV_OOBEMU"),
                    Self::DEV_HITOMOSI => Some("DEV_HITOMOSI"),
                    Self::DEV_RANPURAA => Some("DEV_RANPURAA"),
                    Self::DEV_SYANDERA => Some("DEV_SYANDERA"),
                    Self::DEV_KIBAGO => Some("DEV_KIBAGO"),
                    Self::DEV_ONONDO => Some("DEV_ONONDO"),
                    Self::DEV_ONONOKUSU => Some("DEV_ONONOKUSU"),
                    Self::DEV_KUMASYUN => Some("DEV_KUMASYUN"),
                    Self::DEV_TUNBEAA => Some("DEV_TUNBEAA"),
                    Self::DEV_HURIIZIO => Some("DEV_HURIIZIO"),
                    Self::DEV_TYOBOMAKI => Some("DEV_TYOBOMAKI"),
                    Self::DEV_AGIRUDAA => Some("DEV_AGIRUDAA"),
                    Self::DEV_MAGGYO => Some("DEV_MAGGYO"),
                    Self::DEV_KOZYOHUU => Some("DEV_KOZYOHUU"),
                    Self::DEV_KOZYONDO => Some("DEV_KOZYONDO"),
                    Self::DEV_KURIMUGAN => Some("DEV_KURIMUGAN"),
                    Self::DEV_GOBITTO => Some("DEV_GOBITTO"),
                    Self::DEV_GORUUGU => Some("DEV_GORUUGU"),
                    Self::DEV_KOMATANA => Some("DEV_KOMATANA"),
                    Self::DEV_KIRIKIZAN => Some("DEV_KIRIKIZAN"),
                    Self::DEV_BAHHURON => Some("DEV_BAHHURON"),
                    Self::DEV_WASIBON => Some("DEV_WASIBON"),
                    Self::DEV_WHOOGURU => Some("DEV_WHOOGURU"),
                    Self::DEV_BARUTYAI => Some("DEV_BARUTYAI"),
                    Self::DEV_BARUZIINA => Some("DEV_BARUZIINA"),
                    Self::DEV_KUITARAN => Some("DEV_KUITARAN"),
                    Self::DEV_AIANTO => Some("DEV_AIANTO"),
                    Self::DEV_MONOZU => Some("DEV_MONOZU"),
                    Self::DEV_ZIHEDDO => Some("DEV_ZIHEDDO"),
                    Self::DEV_SAZANDORA => Some("DEV_SAZANDORA"),
                    Self::DEV_MERARUBA => Some("DEV_MERARUBA"),
                    Self::DEV_URUGAMOSU => Some("DEV_URUGAMOSU"),
                    Self::DEV_KOBARUON => Some("DEV_KOBARUON"),
                    Self::DEV_TERAKION => Some("DEV_TERAKION"),
                    Self::DEV_BIRIZION => Some("DEV_BIRIZION"),
                    Self::DEV_TORUNEROSU => Some("DEV_TORUNEROSU"),
                    Self::DEV_BORUTOROSU => Some("DEV_BORUTOROSU"),
                    Self::DEV_RESIRAMU => Some("DEV_RESIRAMU"),
                    Self::DEV_ZEKUROMU => Some("DEV_ZEKUROMU"),
                    Self::DEV_RANDOROSU => Some("DEV_RANDOROSU"),
                    Self::DEV_KYUREMU => Some("DEV_KYUREMU"),
                    Self::DEV_KERUDHIO => Some("DEV_KERUDHIO"),
                    Self::DEV_MEROETTA => Some("DEV_MEROETTA"),
                    Self::DEV_GENOSEKUTO => Some("DEV_GENOSEKUTO"),
                    Self::DEV_HARIMARON => Some("DEV_HARIMARON"),
                    Self::DEV_HARIBOOGU => Some("DEV_HARIBOOGU"),
                    Self::DEV_BURIGARON => Some("DEV_BURIGARON"),
                    Self::DEV_FOKKO => Some("DEV_FOKKO"),
                    Self::DEV_TEERUNAA => Some("DEV_TEERUNAA"),
                    Self::DEV_MAFOKUSII => Some("DEV_MAFOKUSII"),
                    Self::DEV_KEROMATU => Some("DEV_KEROMATU"),
                    Self::DEV_GEKOGASIRA => Some("DEV_GEKOGASIRA"),
                    Self::DEV_GEKKOUGA => Some("DEV_GEKKOUGA"),
                    Self::DEV_HORUBII => Some("DEV_HORUBII"),
                    Self::DEV_HORUUDO => Some("DEV_HORUUDO"),
                    Self::DEV_YAYAKOMA => Some("DEV_YAYAKOMA"),
                    Self::DEV_HINOYAKOMA => Some("DEV_HINOYAKOMA"),
                    Self::DEV_FAIAROO => Some("DEV_FAIAROO"),
                    Self::DEV_KOHUKIMUSI => Some("DEV_KOHUKIMUSI"),
                    Self::DEV_KOHUURAI => Some("DEV_KOHUURAI"),
                    Self::DEV_BIBIYON => Some("DEV_BIBIYON"),
                    Self::DEV_SISIKO => Some("DEV_SISIKO"),
                    Self::DEV_KAENZISI => Some("DEV_KAENZISI"),
                    Self::DEV_HURABEBE => Some("DEV_HURABEBE"),
                    Self::DEV_HURAETTE => Some("DEV_HURAETTE"),
                    Self::DEV_HURAAJESU => Some("DEV_HURAAJESU"),
                    Self::DEV_MHEEKURU => Some("DEV_MHEEKURU"),
                    Self::DEV_GOOGOOTO => Some("DEV_GOOGOOTO"),
                    Self::DEV_YANTYAMU => Some("DEV_YANTYAMU"),
                    Self::DEV_GORONDA => Some("DEV_GORONDA"),
                    Self::DEV_TORIMIAN => Some("DEV_TORIMIAN"),
                    Self::DEV_NYASUPAA => Some("DEV_NYASUPAA"),
                    Self::DEV_NYAONIKUSU => Some("DEV_NYAONIKUSU"),
                    Self::DEV_HITOTUKI => Some("DEV_HITOTUKI"),
                    Self::DEV_NIDANGIRU => Some("DEV_NIDANGIRU"),
                    Self::DEV_GIRUGARUDO => Some("DEV_GIRUGARUDO"),
                    Self::DEV_SYUSYUPU => Some("DEV_SYUSYUPU"),
                    Self::DEV_HUREHUWAN => Some("DEV_HUREHUWAN"),
                    Self::DEV_PEROPPAHU => Some("DEV_PEROPPAHU"),
                    Self::DEV_PERORIIMU => Some("DEV_PERORIIMU"),
                    Self::DEV_MAAIIKA => Some("DEV_MAAIIKA"),
                    Self::DEV_KARAMANERO => Some("DEV_KARAMANERO"),
                    Self::DEV_KAMETETE => Some("DEV_KAMETETE"),
                    Self::DEV_GAMENODESU => Some("DEV_GAMENODESU"),
                    Self::DEV_KUZUMOO => Some("DEV_KUZUMOO"),
                    Self::DEV_DORAMIDORO => Some("DEV_DORAMIDORO"),
                    Self::DEV_UDEPPOU => Some("DEV_UDEPPOU"),
                    Self::DEV_BUROSUTAA => Some("DEV_BUROSUTAA"),
                    Self::DEV_ERIKITERU => Some("DEV_ERIKITERU"),
                    Self::DEV_EREZAADO => Some("DEV_EREZAADO"),
                    Self::DEV_TIGORASU => Some("DEV_TIGORASU"),
                    Self::DEV_GATIGORASU => Some("DEV_GATIGORASU"),
                    Self::DEV_AMARUSU => Some("DEV_AMARUSU"),
                    Self::DEV_AMARURUGA => Some("DEV_AMARURUGA"),
                    Self::DEV_NINFIA => Some("DEV_NINFIA"),
                    Self::DEV_RUTYABURU => Some("DEV_RUTYABURU"),
                    Self::DEV_DEDENNE => Some("DEV_DEDENNE"),
                    Self::DEV_MERESII => Some("DEV_MERESII"),
                    Self::DEV_NUMERA => Some("DEV_NUMERA"),
                    Self::DEV_NUMEIRU => Some("DEV_NUMEIRU"),
                    Self::DEV_NUMERUGON => Some("DEV_NUMERUGON"),
                    Self::DEV_KUREHFI => Some("DEV_KUREHFI"),
                    Self::DEV_BOKUREE => Some("DEV_BOKUREE"),
                    Self::DEV_OOROTTO => Some("DEV_OOROTTO"),
                    Self::DEV_BAKETTYA => Some("DEV_BAKETTYA"),
                    Self::DEV_PANPUZIN => Some("DEV_PANPUZIN"),
                    Self::DEV_KATIKOORU => Some("DEV_KATIKOORU"),
                    Self::DEV_KUREBEESU => Some("DEV_KUREBEESU"),
                    Self::DEV_ONBATTO => Some("DEV_ONBATTO"),
                    Self::DEV_ONBAAN => Some("DEV_ONBAAN"),
                    Self::DEV_ZERUNEASU => Some("DEV_ZERUNEASU"),
                    Self::DEV_IBERUTARU => Some("DEV_IBERUTARU"),
                    Self::DEV_ZIGARUDE => Some("DEV_ZIGARUDE"),
                    Self::DEV_DHIANSII => Some("DEV_DHIANSII"),
                    Self::DEV_HUUPA => Some("DEV_HUUPA"),
                    Self::DEV_BORUKENION => Some("DEV_BORUKENION"),
                    Self::DEV_MOKUROO => Some("DEV_MOKUROO"),
                    Self::DEV_HUKUSUROO => Some("DEV_HUKUSUROO"),
                    Self::DEV_ZYUNAIPAA => Some("DEV_ZYUNAIPAA"),
                    Self::DEV_NYABII => Some("DEV_NYABII"),
                    Self::DEV_NYAHIITO => Some("DEV_NYAHIITO"),
                    Self::DEV_GAOGAEN => Some("DEV_GAOGAEN"),
                    Self::DEV_ASIMARI => Some("DEV_ASIMARI"),
                    Self::DEV_OSYAMARI => Some("DEV_OSYAMARI"),
                    Self::DEV_ASIREENU => Some("DEV_ASIREENU"),
                    Self::DEV_TUTUKERA => Some("DEV_TUTUKERA"),
                    Self::DEV_KERARAPPA => Some("DEV_KERARAPPA"),
                    Self::DEV_DODEKABASI => Some("DEV_DODEKABASI"),
                    Self::DEV_YANGUUSU => Some("DEV_YANGUUSU"),
                    Self::DEV_DEKAGUUSU => Some("DEV_DEKAGUUSU"),
                    Self::DEV_AGOZIMUSI => Some("DEV_AGOZIMUSI"),
                    Self::DEV_DENDIMUSI => Some("DEV_DENDIMUSI"),
                    Self::DEV_KUWAGANON => Some("DEV_KUWAGANON"),
                    Self::DEV_MAKENKANI => Some("DEV_MAKENKANI"),
                    Self::DEV_KEKENKANI => Some("DEV_KEKENKANI"),
                    Self::DEV_ODORIDORI => Some("DEV_ODORIDORI"),
                    Self::DEV_ABURII => Some("DEV_ABURII"),
                    Self::DEV_ABURIBON => Some("DEV_ABURIBON"),
                    Self::DEV_IWANKO => Some("DEV_IWANKO"),
                    Self::DEV_RUGARUGAN => Some("DEV_RUGARUGAN"),
                    Self::DEV_YOWASI => Some("DEV_YOWASI"),
                    Self::DEV_HIDOIDE => Some("DEV_HIDOIDE"),
                    Self::DEV_DOHIDOIDE => Some("DEV_DOHIDOIDE"),
                    Self::DEV_DOROBANKO => Some("DEV_DOROBANKO"),
                    Self::DEV_BANBADORO => Some("DEV_BANBADORO"),
                    Self::DEV_SIZUKUMO => Some("DEV_SIZUKUMO"),
                    Self::DEV_ONISIZUKUMO => Some("DEV_ONISIZUKUMO"),
                    Self::DEV_KARIKIRI => Some("DEV_KARIKIRI"),
                    Self::DEV_RARANTESU => Some("DEV_RARANTESU"),
                    Self::DEV_NEMASYU => Some("DEV_NEMASYU"),
                    Self::DEV_MASHEEDO => Some("DEV_MASHEEDO"),
                    Self::DEV_YATOUMORI => Some("DEV_YATOUMORI"),
                    Self::DEV_ENNYUUTO => Some("DEV_ENNYUUTO"),
                    Self::DEV_NUIKOGUMA => Some("DEV_NUIKOGUMA"),
                    Self::DEV_KITERUGUMA => Some("DEV_KITERUGUMA"),
                    Self::DEV_AMAKAZI => Some("DEV_AMAKAZI"),
                    Self::DEV_AMAMAIKO => Some("DEV_AMAMAIKO"),
                    Self::DEV_AMAAZYO => Some("DEV_AMAAZYO"),
                    Self::DEV_KYUWAWAA => Some("DEV_KYUWAWAA"),
                    Self::DEV_YAREYUUTAN => Some("DEV_YAREYUUTAN"),
                    Self::DEV_NAGETUKESARU => Some("DEV_NAGETUKESARU"),
                    Self::DEV_KOSOKUMUSI => Some("DEV_KOSOKUMUSI"),
                    Self::DEV_GUSOKUMUSYA => Some("DEV_GUSOKUMUSYA"),
                    Self::DEV_SUNABHA => Some("DEV_SUNABHA"),
                    Self::DEV_SIRODESUNA => Some("DEV_SIRODESUNA"),
                    Self::DEV_NAMAKOBUSI => Some("DEV_NAMAKOBUSI"),
                    Self::DEV_TAIPUNURU => Some("DEV_TAIPUNURU"),
                    Self::DEV_SIRUVHADHI => Some("DEV_SIRUVHADHI"),
                    Self::DEV_METENO => Some("DEV_METENO"),
                    Self::DEV_NEKKOARA => Some("DEV_NEKKOARA"),
                    Self::DEV_BAKUGAMESU => Some("DEV_BAKUGAMESU"),
                    Self::DEV_TOGEDEMARU => Some("DEV_TOGEDEMARU"),
                    Self::DEV_MIMIKKYU => Some("DEV_MIMIKKYU"),
                    Self::DEV_HAGIGISIRI => Some("DEV_HAGIGISIRI"),
                    Self::DEV_ZIZIIRON => Some("DEV_ZIZIIRON"),
                    Self::DEV_DADARIN => Some("DEV_DADARIN"),
                    Self::DEV_ZYARAKO => Some("DEV_ZYARAKO"),
                    Self::DEV_ZYARANGO => Some("DEV_ZYARANGO"),
                    Self::DEV_ZYARARANGA => Some("DEV_ZYARARANGA"),
                    Self::DEV_KAPUKOKEKO => Some("DEV_KAPUKOKEKO"),
                    Self::DEV_KAPUTETEHU => Some("DEV_KAPUTETEHU"),
                    Self::DEV_KAPUBURURU => Some("DEV_KAPUBURURU"),
                    Self::DEV_KAPUREHIRE => Some("DEV_KAPUREHIRE"),
                    Self::DEV_KOSUMOGGU => Some("DEV_KOSUMOGGU"),
                    Self::DEV_KOSUMOUMU => Some("DEV_KOSUMOUMU"),
                    Self::DEV_SORUGAREO => Some("DEV_SORUGAREO"),
                    Self::DEV_RUNAAARA => Some("DEV_RUNAAARA"),
                    Self::DEV_UTUROIDO => Some("DEV_UTUROIDO"),
                    Self::DEV_MASSIBUUN => Some("DEV_MASSIBUUN"),
                    Self::DEV_FEROOTHE => Some("DEV_FEROOTHE"),
                    Self::DEV_DENZYUMOKU => Some("DEV_DENZYUMOKU"),
                    Self::DEV_TEKKAGUYA => Some("DEV_TEKKAGUYA"),
                    Self::DEV_KAMITURUGI => Some("DEV_KAMITURUGI"),
                    Self::DEV_AKUZIKINGU => Some("DEV_AKUZIKINGU"),
                    Self::DEV_NEKUROZUMA => Some("DEV_NEKUROZUMA"),
                    Self::DEV_MAGIANA => Some("DEV_MAGIANA"),
                    Self::DEV_MAASYADOO => Some("DEV_MAASYADOO"),
                    Self::DEV_BEBENOMU => Some("DEV_BEBENOMU"),
                    Self::DEV_AAGOYON => Some("DEV_AAGOYON"),
                    Self::DEV_TUNDETUNDE => Some("DEV_TUNDETUNDE"),
                    Self::DEV_ZUGADOON => Some("DEV_ZUGADOON"),
                    Self::DEV_ZERAORA => Some("DEV_ZERAORA"),
                    Self::DEV_MERUTAN => Some("DEV_MERUTAN"),
                    Self::DEV_MERUMETARU => Some("DEV_MERUMETARU"),
                    Self::DEV_SARUNORI => Some("DEV_SARUNORI"),
                    Self::DEV_BATINKII => Some("DEV_BATINKII"),
                    Self::DEV_GORIRANDAA => Some("DEV_GORIRANDAA"),
                    Self::DEV_HIBANII => Some("DEV_HIBANII"),
                    Self::DEV_RABIHUTTO => Some("DEV_RABIHUTTO"),
                    Self::DEV_EESUBAAN => Some("DEV_EESUBAAN"),
                    Self::DEV_MESSON => Some("DEV_MESSON"),
                    Self::DEV_ZIMEREON => Some("DEV_ZIMEREON"),
                    Self::DEV_INTEREON => Some("DEV_INTEREON"),
                    Self::DEV_HOSIGARISU => Some("DEV_HOSIGARISU"),
                    Self::DEV_YOKUBARISU => Some("DEV_YOKUBARISU"),
                    Self::DEV_KOKOGARA => Some("DEV_KOKOGARA"),
                    Self::DEV_AOGARASU => Some("DEV_AOGARASU"),
                    Self::DEV_AAMAAGAA => Some("DEV_AAMAAGAA"),
                    Self::DEV_SATTIMUSI => Some("DEV_SATTIMUSI"),
                    Self::DEV_REDOOMUSI => Some("DEV_REDOOMUSI"),
                    Self::DEV_IORUBU => Some("DEV_IORUBU"),
                    Self::DEV_KUSUNE => Some("DEV_KUSUNE"),
                    Self::DEV_FOKUSURAI => Some("DEV_FOKUSURAI"),
                    Self::DEV_HIMENKA => Some("DEV_HIMENKA"),
                    Self::DEV_WATASIRAGA => Some("DEV_WATASIRAGA"),
                    Self::DEV_UURUU => Some("DEV_UURUU"),
                    Self::DEV_BAIUURUU => Some("DEV_BAIUURUU"),
                    Self::DEV_KAMUKAME => Some("DEV_KAMUKAME"),
                    Self::DEV_KAZIRIGAME => Some("DEV_KAZIRIGAME"),
                    Self::DEV_WANPATI => Some("DEV_WANPATI"),
                    Self::DEV_PARUSUWAN => Some("DEV_PARUSUWAN"),
                    Self::DEV_TANDON => Some("DEV_TANDON"),
                    Self::DEV_TOROGGON => Some("DEV_TOROGGON"),
                    Self::DEV_SEKITANZAN => Some("DEV_SEKITANZAN"),
                    Self::DEV_KAZITTYU => Some("DEV_KAZITTYU"),
                    Self::DEV_APPURYUU => Some("DEV_APPURYUU"),
                    Self::DEV_TARUPPURU => Some("DEV_TARUPPURU"),
                    Self::DEV_SUNAHEBI => Some("DEV_SUNAHEBI"),
                    Self::DEV_SADAIZYA => Some("DEV_SADAIZYA"),
                    Self::DEV_UUU => Some("DEV_UUU"),
                    Self::DEV_SASIKAMASU => Some("DEV_SASIKAMASU"),
                    Self::DEV_KAMASUZYOO => Some("DEV_KAMASUZYOO"),
                    Self::DEV_EREZUN => Some("DEV_EREZUN"),
                    Self::DEV_SUTORINDAA => Some("DEV_SUTORINDAA"),
                    Self::DEV_YAKUDE => Some("DEV_YAKUDE"),
                    Self::DEV_MARUYAKUDE => Some("DEV_MARUYAKUDE"),
                    Self::DEV_TATAKKO => Some("DEV_TATAKKO"),
                    Self::DEV_OTOSUPASU => Some("DEV_OTOSUPASU"),
                    Self::DEV_YABATYA => Some("DEV_YABATYA"),
                    Self::DEV_POTTODESU => Some("DEV_POTTODESU"),
                    Self::DEV_MIBURIMU => Some("DEV_MIBURIMU"),
                    Self::DEV_TEBURIMU => Some("DEV_TEBURIMU"),
                    Self::DEV_BURIMUON => Some("DEV_BURIMUON"),
                    Self::DEV_BEROBAA => Some("DEV_BEROBAA"),
                    Self::DEV_GIMOO => Some("DEV_GIMOO"),
                    Self::DEV_OORONGE => Some("DEV_OORONGE"),
                    Self::DEV_TATIHUSAGUMA => Some("DEV_TATIHUSAGUMA"),
                    Self::DEV_NYAIKINGU => Some("DEV_NYAIKINGU"),
                    Self::DEV_SANIGOON => Some("DEV_SANIGOON"),
                    Self::DEV_NEGIGANAITO => Some("DEV_NEGIGANAITO"),
                    Self::DEV_BARIKOORU => Some("DEV_BARIKOORU"),
                    Self::DEV_DESUBAAN => Some("DEV_DESUBAAN"),
                    Self::DEV_MAHOMIRU => Some("DEV_MAHOMIRU"),
                    Self::DEV_MAHOIPPU => Some("DEV_MAHOIPPU"),
                    Self::DEV_TAIREETU => Some("DEV_TAIREETU"),
                    Self::DEV_BATINUNI => Some("DEV_BATINUNI"),
                    Self::DEV_YUKIHAMI => Some("DEV_YUKIHAMI"),
                    Self::DEV_MOSUNOU => Some("DEV_MOSUNOU"),
                    Self::DEV_ISIHENZIN => Some("DEV_ISIHENZIN"),
                    Self::DEV_KOORIPPO => Some("DEV_KOORIPPO"),
                    Self::DEV_IESSAN => Some("DEV_IESSAN"),
                    Self::DEV_MORUPEKO => Some("DEV_MORUPEKO"),
                    Self::DEV_ZOUDOU => Some("DEV_ZOUDOU"),
                    Self::DEV_DAIOUDOU => Some("DEV_DAIOUDOU"),
                    Self::DEV_PATTIRAGON => Some("DEV_PATTIRAGON"),
                    Self::DEV_PATTIRUDON => Some("DEV_PATTIRUDON"),
                    Self::DEV_UONORAGON => Some("DEV_UONORAGON"),
                    Self::DEV_UOTIRUDON => Some("DEV_UOTIRUDON"),
                    Self::DEV_ZYURARUDON => Some("DEV_ZYURARUDON"),
                    Self::DEV_DORAMESIYA => Some("DEV_DORAMESIYA"),
                    Self::DEV_DORONTI => Some("DEV_DORONTI"),
                    Self::DEV_DORAPARUTO => Some("DEV_DORAPARUTO"),
                    Self::DEV_ZASIAN => Some("DEV_ZASIAN"),
                    Self::DEV_ZAMAZENTA => Some("DEV_ZAMAZENTA"),
                    Self::DEV_MUGENDAINA => Some("DEV_MUGENDAINA"),
                    Self::DEV_AAMAA1 => Some("DEV_AAMAA1"),
                    Self::DEV_AAMAA2 => Some("DEV_AAMAA2"),
                    Self::DEV_m23 => Some("DEV_m23"),
                    Self::DEV_REDEN => Some("DEV_REDEN"),
                    Self::DEV_REDORA => Some("DEV_REDORA"),
                    Self::DEV_HAKUBA => Some("DEV_HAKUBA"),
                    Self::DEV_KOKUBA => Some("DEV_KOKUBA"),
                    Self::DEV_KURAUN => Some("DEV_KURAUN"),
                    Self::DEV_ODOSISI2 => Some("DEV_ODOSISI2"),
                    Self::DEV_SUTORAIKU2 => Some("DEV_SUTORAIKU2"),
                    Self::DEV_HIMEGUMA3 => Some("DEV_HIMEGUMA3"),
                    Self::DEV_rBASURAO2 => Some("DEV_rBASURAO2"),
                    Self::DEV_rNYUURA2 => Some("DEV_rNYUURA2"),
                    Self::DEV_rHARISEN2 => Some("DEV_rHARISEN2"),
                    Self::DEV_FEATOROSU => Some("DEV_FEATOROSU"),
                    Self::DEV_NEKO1 => Some("DEV_NEKO1"),
                    Self::DEV_NEKO2 => Some("DEV_NEKO2"),
                    Self::DEV_NEKO3 => Some("DEV_NEKO3"),
                    Self::DEV_WANI1 => Some("DEV_WANI1"),
                    Self::DEV_WANI2 => Some("DEV_WANI2"),
                    Self::DEV_WANI3 => Some("DEV_WANI3"),
                    Self::DEV_KAMO1 => Some("DEV_KAMO1"),
                    Self::DEV_KAMO2 => Some("DEV_KAMO2"),
                    Self::DEV_KAMO3 => Some("DEV_KAMO3"),
                    Self::DEV_BUTA1 => Some("DEV_BUTA1"),
                    Self::DEV_BUTA2 => Some("DEV_BUTA2"),
                    Self::DEV_NOKOTTI2 => Some("DEV_NOKOTTI2"),
                    Self::DEV_KUMO1 => Some("DEV_KUMO1"),
                    Self::DEV_KUMO2 => Some("DEV_KUMO2"),
                    Self::DEV_BATTA1 => Some("DEV_BATTA1"),
                    Self::DEV_BATTA2 => Some("DEV_BATTA2"),
                    Self::DEV_SUKARABE1 => Some("DEV_SUKARABE1"),
                    Self::DEV_SUKARABE2 => Some("DEV_SUKARABE2"),
                    Self::DEV_OBAKEINU1 => Some("DEV_OBAKEINU1"),
                    Self::DEV_OBAKEINU2 => Some("DEV_OBAKEINU2"),
                    Self::DEV_DATYOU1 => Some("DEV_DATYOU1"),
                    Self::DEV_DATYOU2 => Some("DEV_DATYOU2"),
                    Self::DEV_KIRINRIKI2 => Some("DEV_KIRINRIKI2"),
                    Self::DEV_UMIDHIGUDA => Some("DEV_UMIDHIGUDA"),
                    Self::DEV_UMITORIO => Some("DEV_UMITORIO"),
                    Self::DEV_OYAKATA => Some("DEV_OYAKATA"),
                    Self::DEV_MERURUUSA => Some("DEV_MERURUUSA"),
                    Self::DEV_IRUKA1 => Some("DEV_IRUKA1"),
                    Self::DEV_IRUKA2 => Some("DEV_IRUKA2"),
                    Self::DEV_ORIIBU1 => Some("DEV_ORIIBU1"),
                    Self::DEV_ORIIBU2 => Some("DEV_ORIIBU2"),
                    Self::DEV_ORIIBU3 => Some("DEV_ORIIBU3"),
                    Self::DEV_HABANERO1 => Some("DEV_HABANERO1"),
                    Self::DEV_HABANERO2 => Some("DEV_HABANERO2"),
                    Self::DEV_KAERU1 => Some("DEV_KAERU1"),
                    Self::DEV_KAERU2 => Some("DEV_KAERU2"),
                    Self::DEV_ENZIN1 => Some("DEV_ENZIN1"),
                    Self::DEV_ENZIN2 => Some("DEV_ENZIN2"),
                    Self::DEV_MIMIZU => Some("DEV_MIMIZU"),
                    Self::DEV_NEZUMI1 => Some("DEV_NEZUMI1"),
                    Self::DEV_NEZUMI2 => Some("DEV_NEZUMI2"),
                    Self::DEV_OKAKUZIRA1 => Some("DEV_OKAKUZIRA1"),
                    Self::DEV_OKAKUZIRA2 => Some("DEV_OKAKUZIRA2"),
                    Self::DEV_KOORIDORA1 => Some("DEV_KOORIDORA1"),
                    Self::DEV_KOORIDORA2 => Some("DEV_KOORIDORA2"),
                    Self::DEV_KOORIDORA3 => Some("DEV_KOORIDORA3"),
                    Self::DEV_SUSIDORA => Some("DEV_SUSIDORA"),
                    Self::DEV_BAIKU => Some("DEV_BAIKU"),
                    Self::DEV_MAAMOTTO1 => Some("DEV_MAAMOTTO1"),
                    Self::DEV_MAAMOTTO2 => Some("DEV_MAAMOTTO2"),
                    Self::DEV_MAAMOTTO3 => Some("DEV_MAAMOTTO3"),
                    Self::DEV_MIZUDORI1 => Some("DEV_MIZUDORI1"),
                    Self::DEV_MIZUDORI2 => Some("DEV_MIZUDORI2"),
                    Self::DEV_KOUNOTORI => Some("DEV_KOUNOTORI"),
                    Self::DEV_INKO => Some("DEV_INKO"),
                    Self::DEV_HURAMINGO => Some("DEV_HURAMINGO"),
                    Self::DEV_KEGANI => Some("DEV_KEGANI"),
                    Self::DEV_GANEN1 => Some("DEV_GANEN1"),
                    Self::DEV_GANEN2 => Some("DEV_GANEN2"),
                    Self::DEV_GANEN3 => Some("DEV_GANEN3"),
                    Self::DEV_KARUKAN1 => Some("DEV_KARUKAN1"),
                    Self::DEV_KARUKAN2 => Some("DEV_KARUKAN2"),
                    Self::DEV_AIAI1 => Some("DEV_AIAI1"),
                    Self::DEV_AIAI2 => Some("DEV_AIAI2"),
                    Self::DEV_PANINU1 => Some("DEV_PANINU1"),
                    Self::DEV_PANINU2 => Some("DEV_PANINU2"),
                    Self::DEV_MASUTHIHU1 => Some("DEV_MASUTHIHU1"),
                    Self::DEV_MASUTHIHU2 => Some("DEV_MASUTHIHU2"),
                    Self::DEV_TANBURU1 => Some("DEV_TANBURU1"),
                    Self::DEV_TANBURU2 => Some("DEV_TANBURU2"),
                    Self::DEV_KOIN1 => Some("DEV_KOIN1"),
                    Self::DEV_KOIN2 => Some("DEV_KOIN2"),
                    Self::DEV_ADONFAN => Some("DEV_ADONFAN"),
                    Self::DEV_AMOROBARERU => Some("DEV_AMOROBARERU"),
                    Self::DEV_AKETUBAN => Some("DEV_AKETUBAN"),
                    Self::DEV_AREAKOIRU => Some("DEV_AREAKOIRU"),
                    Self::DEV_APURIN => Some("DEV_APURIN"),
                    Self::DEV_AMUUMA => Some("DEV_AMUUMA"),
                    Self::DEV_AURUGAMOSU => Some("DEV_AURUGAMOSU"),
                    Self::DEV_AAAAA => Some("DEV_AAAAA"),
                    Self::DEV_BDONFAN => Some("DEV_BDONFAN"),
                    Self::DEV_BKETUBAN => Some("DEV_BKETUBAN"),
                    Self::DEV_BURUGAMOSU => Some("DEV_BURUGAMOSU"),
                    Self::DEV_BHARITEYAMA => Some("DEV_BHARITEYAMA"),
                    Self::DEV_BSAZANDORA => Some("DEV_BSAZANDORA"),
                    Self::DEV_BBANGIRASU => Some("DEV_BBANGIRASU"),
                    Self::DEV_BKOORI => Some("DEV_BKOORI"),
                    Self::DEV_BBBBB => Some("DEV_BBBBB"),
                    Self::DEV_ZYUNDEN1 => Some("DEV_ZYUNDEN1"),
                    Self::DEV_ZYUNDEN2 => Some("DEV_ZYUNDEN2"),
                    Self::DEV_ZYUNDEN3 => Some("DEV_ZYUNDEN3"),
                    Self::DEV_ZYUNDEN4 => Some("DEV_ZYUNDEN4"),
                    Self::DEV_AIGUANA => Some("DEV_AIGUANA"),
                    Self::DEV_BIGUANA => Some("DEV_BIGUANA"),
                    Self::DEV_FEARII1 => Some("DEV_FEARII1"),
                    Self::DEV_FEARII2 => Some("DEV_FEARII2"),
                    Self::DEV_FEARII3 => Some("DEV_FEARII3"),
                    Self::DEV_HINOKO1 => Some("DEV_HINOKO1"),
                    Self::DEV_HINOKO2A => Some("DEV_HINOKO2A"),
                    Self::DEV_HINOKO2B => Some("DEV_HINOKO2B"),
                    Self::DEV_OKAKINGU => Some("DEV_OKAKINGU"),
                    Self::DEV_OKAGYARADOSU => Some("DEV_OKAGYARADOSU"),
                    Self::DEV_KOMATANA3 => Some("DEV_KOMATANA3"),
                    Self::DEV_rUPAA2 => Some("DEV_rUPAA2"),
                    Self::DEV_MANKII3 => Some("DEV_MANKII3"),
                    _ => None,
                }
            }
        }
        impl core::fmt::Debug for DevID {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                if let Some(name) = self.variant_name() {
                    f.write_str(name)
                } else {
                    f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
                }
            }
        }
        impl<'a> flatbuffers::Follow<'a> for DevID {
            type Inner = Self;
            #[inline]
            unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
                let b = flatbuffers::read_scalar_at::<u16>(buf, loc);
                Self(b)
            }
        }

        impl flatbuffers::Push for DevID {
            type Output = DevID;
            #[inline]
            unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
                flatbuffers::emplace_scalar::<u16>(dst, self.0);
            }
        }

        impl flatbuffers::EndianScalar for DevID {
            type Scalar = u16;
            #[inline]
            fn to_little_endian(self) -> u16 {
                self.0.to_le()
            }
            #[inline]
            #[allow(clippy::wrong_self_convention)]
            fn from_little_endian(v: u16) -> Self {
                let b = u16::from_le(v);
                Self(b)
            }
        }

        impl<'a> flatbuffers::Verifiable for DevID {
            #[inline]
            fn run_verifier(
                v: &mut flatbuffers::Verifier,
                pos: usize,
            ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
                use self::flatbuffers::Verifiable;
                u16::run_verifier(v, pos)
            }
        }

        impl flatbuffers::SimpleToVerifyInSlice for DevID {}
        #[deprecated(
            since = "2.0.0",
            note = "Use associated constants instead. This will no longer be generated in 2021."
        )]
        pub const ENUM_MIN_WAZA_ID: u16 = 0;
        #[deprecated(
            since = "2.0.0",
            note = "Use associated constants instead. This will no longer be generated in 2021."
        )]
        pub const ENUM_MAX_WAZA_ID: u16 = 900;
        #[deprecated(
            since = "2.0.0",
            note = "Use associated constants instead. This will no longer be generated in 2021."
        )]
        #[allow(non_camel_case_types)]
        pub const ENUM_VALUES_WAZA_ID: [WazaID; 901] = [
            WazaID::WAZA_NULL,
            WazaID::WAZA_HATAKU,
            WazaID::WAZA_KARATETYOPPU,
            WazaID::WAZA_OUHUKUBINTA,
            WazaID::WAZA_RENZOKUPANTI,
            WazaID::WAZA_MEGATONPANTI,
            WazaID::WAZA_NEKONIKOBAN,
            WazaID::WAZA_HONOONOPANTI,
            WazaID::WAZA_REITOUPANTI,
            WazaID::WAZA_KAMINARIPANTI,
            WazaID::WAZA_HIKKAKU,
            WazaID::WAZA_HASAMU,
            WazaID::WAZA_HASAMIGIROTIN,
            WazaID::WAZA_KAMAITATI,
            WazaID::WAZA_TURUGINOMAI,
            WazaID::WAZA_IAIGIRI,
            WazaID::WAZA_KAZEOKOSI,
            WazaID::WAZA_TUBASADEUTU,
            WazaID::WAZA_HUKITOBASI,
            WazaID::WAZA_SORAWOTOBU,
            WazaID::WAZA_SIMETUKERU,
            WazaID::WAZA_TATAKITUKERU,
            WazaID::WAZA_TURUNOMUTI,
            WazaID::WAZA_HUMITUKE,
            WazaID::WAZA_NIDOGERI,
            WazaID::WAZA_MEGATONKIKKU,
            WazaID::WAZA_TOBIGERI,
            WazaID::WAZA_MAWASIGERI,
            WazaID::WAZA_SUNAKAKE,
            WazaID::WAZA_ZUTUKI,
            WazaID::WAZA_TUNODETUKU,
            WazaID::WAZA_MIDAREDUKI,
            WazaID::WAZA_TUNODORIRU,
            WazaID::WAZA_TAIATARI,
            WazaID::WAZA_NOSIKAKARI,
            WazaID::WAZA_MAKITUKU,
            WazaID::WAZA_TOSSIN,
            WazaID::WAZA_ABARERU,
            WazaID::WAZA_SUTEMITAKKURU,
            WazaID::WAZA_SIPPOWOHURU,
            WazaID::WAZA_DOKUBARI,
            WazaID::WAZA_DABURUNIIDORU,
            WazaID::WAZA_MISAIRUBARI,
            WazaID::WAZA_NIRAMITUKERU,
            WazaID::WAZA_KAMITUKU,
            WazaID::WAZA_NAKIGOE,
            WazaID::WAZA_HOERU,
            WazaID::WAZA_UTAU,
            WazaID::WAZA_TYOUONPA,
            WazaID::WAZA_SONIKKUBUUMU,
            WazaID::WAZA_KANASIBARI,
            WazaID::WAZA_YOUKAIEKI,
            WazaID::WAZA_HINOKO,
            WazaID::WAZA_KAENHOUSYA,
            WazaID::WAZA_SIROIKIRI,
            WazaID::WAZA_MIZUDEPPOU,
            WazaID::WAZA_HAIDOROPONPU,
            WazaID::WAZA_NAMINORI,
            WazaID::WAZA_REITOUBIIMU,
            WazaID::WAZA_HUBUKI,
            WazaID::WAZA_SAIKEKOUSEN,
            WazaID::WAZA_BABURUKOUSEN,
            WazaID::WAZA_OORORABIIMU,
            WazaID::WAZA_HAKAIKOUSEN,
            WazaID::WAZA_TUTUKU,
            WazaID::WAZA_DORIRUKUTIBASI,
            WazaID::WAZA_ZIGOKUGURUMA,
            WazaID::WAZA_KETAGURI,
            WazaID::WAZA_KAUNTAA,
            WazaID::WAZA_TIKYUUNAGE,
            WazaID::WAZA_KAIRIKI,
            WazaID::WAZA_SUITORU,
            WazaID::WAZA_MEGADOREIN,
            WazaID::WAZA_YADORIGINOTANE,
            WazaID::WAZA_SEITYOU,
            WazaID::WAZA_HAPPAKATTAA,
            WazaID::WAZA_SOORAABIIMU,
            WazaID::WAZA_DOKUNOKONA,
            WazaID::WAZA_SIBIREGONA,
            WazaID::WAZA_NEMURIGONA,
            WazaID::WAZA_HANABIRANOMAI,
            WazaID::WAZA_ITOWOHAKU,
            WazaID::WAZA_RYUUNOIKARI,
            WazaID::WAZA_HONOONOUZU,
            WazaID::WAZA_DENKISYOKKU,
            WazaID::WAZA_10MANBORUTO,
            WazaID::WAZA_DENZIHA,
            WazaID::WAZA_KAMINARI,
            WazaID::WAZA_IWAOTOSI,
            WazaID::WAZA_ZISIN,
            WazaID::WAZA_ZIWARE,
            WazaID::WAZA_ANAWOHORU,
            WazaID::WAZA_DOKUDOKU,
            WazaID::WAZA_NENRIKI,
            WazaID::WAZA_SAIKOKINESISU,
            WazaID::WAZA_SAIMINZYUTU,
            WazaID::WAZA_YOGANOPOOZU,
            WazaID::WAZA_KOUSOKUIDOU,
            WazaID::WAZA_DENKOUSEKKA,
            WazaID::WAZA_IKARI,
            WazaID::WAZA_TEREPOOTO,
            WazaID::WAZA_NAITOHEDDO,
            WazaID::WAZA_MONOMANE,
            WazaID::WAZA_IYANAOTO,
            WazaID::WAZA_KAGEBUNSIN,
            WazaID::WAZA_ZIKOSAISEI,
            WazaID::WAZA_KATAKUNARU,
            WazaID::WAZA_TIISAKUNARU,
            WazaID::WAZA_ENMAKU,
            WazaID::WAZA_AYASIIHIKARI,
            WazaID::WAZA_KARANIKOMORU,
            WazaID::WAZA_MARUKUNARU,
            WazaID::WAZA_BARIAA,
            WazaID::WAZA_HIKARINOKABE,
            WazaID::WAZA_KUROIKIRI,
            WazaID::WAZA_RIHUREKUTAA,
            WazaID::WAZA_KIAIDAME,
            WazaID::WAZA_GAMAN,
            WazaID::WAZA_YUBIWOHURU,
            WazaID::WAZA_OUMUGAESI,
            WazaID::WAZA_ZIBAKU,
            WazaID::WAZA_TAMAGOBAKUDAN,
            WazaID::WAZA_SITADENAMERU,
            WazaID::WAZA_SUMOGGU,
            WazaID::WAZA_HEDOROKOUGEKI,
            WazaID::WAZA_HONEKONBOU,
            WazaID::WAZA_DAIMONZI,
            WazaID::WAZA_TAKINOBORI,
            WazaID::WAZA_KARADEHASAMU,
            WazaID::WAZA_SUPIIDOSUTAA,
            WazaID::WAZA_ROKETTOZUTUKI,
            WazaID::WAZA_TOGEKYANON,
            WazaID::WAZA_KARAMITUKU,
            WazaID::WAZA_DOWASURE,
            WazaID::WAZA_SUPUUNMAGE,
            WazaID::WAZA_TAMAGOUMI,
            WazaID::WAZA_TOBIHIZAGERI,
            WazaID::WAZA_HEBINIRAMI,
            WazaID::WAZA_YUMEKUI,
            WazaID::WAZA_DOKUGASU,
            WazaID::WAZA_TAMANAGE,
            WazaID::WAZA_KYUUKETU,
            WazaID::WAZA_AKUMANOKISSU,
            WazaID::WAZA_GODDOBAADO,
            WazaID::WAZA_HENSIN,
            WazaID::WAZA_AWA,
            WazaID::WAZA_PIYOPIYOPANTI,
            WazaID::WAZA_KINOKONOHOUSI,
            WazaID::WAZA_HURASSYU,
            WazaID::WAZA_SAIKOWHEEBU,
            WazaID::WAZA_HANERU,
            WazaID::WAZA_TOKERU,
            WazaID::WAZA_KURABUHANMAA,
            WazaID::WAZA_DAIBAKUHATU,
            WazaID::WAZA_MIDAREHIKKAKI,
            WazaID::WAZA_HONEBUUMERAN,
            WazaID::WAZA_NEMURU,
            WazaID::WAZA_IWANADARE,
            WazaID::WAZA_HISSATUMAEBA,
            WazaID::WAZA_KAKUBARU,
            WazaID::WAZA_TEKUSUTYAA,
            WazaID::WAZA_TORAIATAKKU,
            WazaID::WAZA_IKARINOMAEBA,
            WazaID::WAZA_KIRISAKU,
            WazaID::WAZA_MIGAWARI,
            WazaID::WAZA_WARUAGAKI,
            WazaID::WAZA_SUKETTI,
            WazaID::WAZA_TORIPURUKIKKU,
            WazaID::WAZA_DOROBOU,
            WazaID::WAZA_KUMONOSU,
            WazaID::WAZA_KOKORONOME,
            WazaID::WAZA_AKUMU,
            WazaID::WAZA_KAENGURUMA,
            WazaID::WAZA_IBIKI,
            WazaID::WAZA_NOROI,
            WazaID::WAZA_ZITABATA,
            WazaID::WAZA_TEKUSUTYAA2,
            WazaID::WAZA_EAROBURASUTO,
            WazaID::WAZA_WATAHOUSI,
            WazaID::WAZA_KISIKAISEI,
            WazaID::WAZA_URAMI,
            WazaID::WAZA_KONAYUKI,
            WazaID::WAZA_MAMORU,
            WazaID::WAZA_MAHHAPANTI,
            WazaID::WAZA_KOWAIKAO,
            WazaID::WAZA_DAMASIUTI,
            WazaID::WAZA_TENSINOKISSU,
            WazaID::WAZA_HARADAIKO,
            WazaID::WAZA_HEDOROBAKUDAN,
            WazaID::WAZA_DOROKAKE,
            WazaID::WAZA_OKUTANHOU,
            WazaID::WAZA_MAKIBISI,
            WazaID::WAZA_DENZIHOU,
            WazaID::WAZA_MIYABURU,
            WazaID::WAZA_MITIDURE,
            WazaID::WAZA_HOROBINOUTA,
            WazaID::WAZA_KOGOERUKAZE,
            WazaID::WAZA_MIKIRI,
            WazaID::WAZA_BOONRASSYU,
            WazaID::WAZA_ROKKUON,
            WazaID::WAZA_GEKIRIN,
            WazaID::WAZA_SUNAARASI,
            WazaID::WAZA_GIGADOREIN,
            WazaID::WAZA_KORAERU,
            WazaID::WAZA_AMAERU,
            WazaID::WAZA_KOROGARU,
            WazaID::WAZA_MINEUTI,
            WazaID::WAZA_IBARU,
            WazaID::WAZA_MIRUKUNOMI,
            WazaID::WAZA_SUPAAKU,
            WazaID::WAZA_RENZOKUGIRI,
            WazaID::WAZA_HAGANENOTUBASA,
            WazaID::WAZA_KUROIMANAZASI,
            WazaID::WAZA_MEROMERO,
            WazaID::WAZA_NEGOTO,
            WazaID::WAZA_IYASINOSUZU,
            WazaID::WAZA_ONGAESI,
            WazaID::WAZA_PUREZENTO,
            WazaID::WAZA_YATUATARI,
            WazaID::WAZA_SINPINOMAMORI,
            WazaID::WAZA_ITAMIWAKE,
            WazaID::WAZA_SEINARUHONOO,
            WazaID::WAZA_MAGUNITYUUDO,
            WazaID::WAZA_BAKURETUPANTI,
            WazaID::WAZA_MEGAHOON,
            WazaID::WAZA_RYUUNOIBUKI,
            WazaID::WAZA_BATONTATTI,
            WazaID::WAZA_ANKOORU,
            WazaID::WAZA_OIUTI,
            WazaID::WAZA_KOUSOKUSUPIN,
            WazaID::WAZA_AMAIKAORI,
            WazaID::WAZA_AIANTEERU,
            WazaID::WAZA_METARUKUROO,
            WazaID::WAZA_ATEMINAGE,
            WazaID::WAZA_ASANOHIZASI,
            WazaID::WAZA_KOUGOUSEI,
            WazaID::WAZA_TUKINOHIKARI,
            WazaID::WAZA_MEZAMERUPAWAA,
            WazaID::WAZA_KUROSUTYOPPU,
            WazaID::WAZA_TATUMAKI,
            WazaID::WAZA_AMAGOI,
            WazaID::WAZA_NIHONBARE,
            WazaID::WAZA_KAMIKUDAKU,
            WazaID::WAZA_MIRAAKOOTO,
            WazaID::WAZA_ZIKOANZI,
            WazaID::WAZA_SINSOKU,
            WazaID::WAZA_GENSINOTIKARA,
            WazaID::WAZA_SYADOOBOORU,
            WazaID::WAZA_MIRAIYOTI,
            WazaID::WAZA_IWAKUDAKI,
            WazaID::WAZA_UZUSIO,
            WazaID::WAZA_HUKURODATAKI,
            WazaID::WAZA_NEKODAMASI,
            WazaID::WAZA_SAWAGU,
            WazaID::WAZA_TAKUWAERU,
            WazaID::WAZA_HAKIDASU,
            WazaID::WAZA_NOMIKOMU,
            WazaID::WAZA_NEPPUU,
            WazaID::WAZA_ARARE,
            WazaID::WAZA_ITYAMON,
            WazaID::WAZA_ODATERU,
            WazaID::WAZA_ONIBI,
            WazaID::WAZA_OKIMIYAGE,
            WazaID::WAZA_KARAGENKI,
            WazaID::WAZA_KIAIPANTI,
            WazaID::WAZA_KITUKE,
            WazaID::WAZA_KONOYUBITOMARE,
            WazaID::WAZA_SIZENNOTIKARA,
            WazaID::WAZA_ZYUUDEN,
            WazaID::WAZA_TYOUHATU,
            WazaID::WAZA_TEDASUKE,
            WazaID::WAZA_TORIKKU,
            WazaID::WAZA_NARIKIRI,
            WazaID::WAZA_NEGAIGOTO,
            WazaID::WAZA_NEKONOTE,
            WazaID::WAZA_NEWOHARU,
            WazaID::WAZA_BAKADIKARA,
            WazaID::WAZA_MAZIKKUKOOTO,
            WazaID::WAZA_RISAIKURU,
            WazaID::WAZA_RIBENZI,
            WazaID::WAZA_KAWARAWARI,
            WazaID::WAZA_AKUBI,
            WazaID::WAZA_HATAKIOTOSU,
            WazaID::WAZA_GAMUSYARA,
            WazaID::WAZA_HUNKA,
            WazaID::WAZA_SUKIRUSUWAPPU,
            WazaID::WAZA_HUUIN,
            WazaID::WAZA_RIHURESSYU,
            WazaID::WAZA_ONNEN,
            WazaID::WAZA_YOKODORI,
            WazaID::WAZA_HIMITUNOTIKARA,
            WazaID::WAZA_DAIBINGU,
            WazaID::WAZA_TUPPARI,
            WazaID::WAZA_HOGOSYOKU,
            WazaID::WAZA_HOTARUBI,
            WazaID::WAZA_RASUTAAPAAZI,
            WazaID::WAZA_MISUTOBOORU,
            WazaID::WAZA_FEZAADANSU,
            WazaID::WAZA_HURAHURADANSU,
            WazaID::WAZA_BUREIZUKIKKU,
            WazaID::WAZA_DOROASOBI,
            WazaID::WAZA_AISUBOORU,
            WazaID::WAZA_NIIDORUAAMU,
            WazaID::WAZA_NAMAKERU,
            WazaID::WAZA_HAIPAABOISU,
            WazaID::WAZA_DOKUDOKUNOKIBA,
            WazaID::WAZA_BUREIKUKUROO,
            WazaID::WAZA_BURASUTOBAAN,
            WazaID::WAZA_HAIDOROKANON,
            WazaID::WAZA_KOMETTOPANTI,
            WazaID::WAZA_ODOROKASU,
            WazaID::WAZA_WHEZAABOORU,
            WazaID::WAZA_AROMASERAPII,
            WazaID::WAZA_USONAKI,
            WazaID::WAZA_EAKATTAA,
            WazaID::WAZA_OOBAAHIITO,
            WazaID::WAZA_KAGIWAKERU,
            WazaID::WAZA_GANSEKIHUUZI,
            WazaID::WAZA_GINIRONOKAZE,
            WazaID::WAZA_KINZOKUON,
            WazaID::WAZA_KUSABUE,
            WazaID::WAZA_KUSUGURU,
            WazaID::WAZA_KOSUMOPAWAA,
            WazaID::WAZA_SIOHUKI,
            WazaID::WAZA_SIGUNARUBIIMU,
            WazaID::WAZA_SYADOOPANTI,
            WazaID::WAZA_ZINTUURIKI,
            WazaID::WAZA_SUKAIAPPAA,
            WazaID::WAZA_SUNAZIGOKU,
            WazaID::WAZA_ZETTAIREIDO,
            WazaID::WAZA_DAKURYUU,
            WazaID::WAZA_TANEMASINGAN,
            WazaID::WAZA_TUBAMEGAESI,
            WazaID::WAZA_TURARABARI,
            WazaID::WAZA_TEPPEKI,
            WazaID::WAZA_TOOSENBOU,
            WazaID::WAZA_TOOBOE,
            WazaID::WAZA_DORAGONKUROO,
            WazaID::WAZA_HAADOPURANTO,
            WazaID::WAZA_BIRUDOAPPU,
            WazaID::WAZA_TOBIHANERU,
            WazaID::WAZA_MADDOSYOTTO,
            WazaID::WAZA_POIZUNTEERU,
            WazaID::WAZA_HOSIGARU,
            WazaID::WAZA_BORUTEKKAA,
            WazaID::WAZA_MAZIKARURIIHU,
            WazaID::WAZA_MIZUASOBI,
            WazaID::WAZA_MEISOU,
            WazaID::WAZA_RIIHUBUREEDO,
            WazaID::WAZA_RYUUNOMAI,
            WazaID::WAZA_ROKKUBURASUTO,
            WazaID::WAZA_DENGEKIHA,
            WazaID::WAZA_MIZUNOHADOU,
            WazaID::WAZA_HAMETUNONEGAI,
            WazaID::WAZA_SAIKOBUUSUTO,
            WazaID::WAZA_HANEYASUME,
            WazaID::WAZA_ZYUURYOKU,
            WazaID::WAZA_MIRAKURUAI,
            WazaID::WAZA_MEZAMASIBINTA,
            WazaID::WAZA_AAMUHANMAA,
            WazaID::WAZA_ZYAIROBOORU,
            WazaID::WAZA_IYASINONEGAI,
            WazaID::WAZA_SIOMIZU,
            WazaID::WAZA_SIZENNOMEGUMI,
            WazaID::WAZA_FEINTO,
            WazaID::WAZA_TUIBAMU,
            WazaID::WAZA_OIKAZE,
            WazaID::WAZA_TUBOWOTUKU,
            WazaID::WAZA_METARUBAASUTO,
            WazaID::WAZA_TONBOGAERI,
            WazaID::WAZA_INFAITO,
            WazaID::WAZA_SIPPEGAESI,
            WazaID::WAZA_DAMEOSI,
            WazaID::WAZA_SASIOSAE,
            WazaID::WAZA_NAGETUKERU,
            WazaID::WAZA_SAIKOSIHUTO,
            WazaID::WAZA_KIRIHUDA,
            WazaID::WAZA_KAIHUKUHUUZI,
            WazaID::WAZA_SIBORITORU,
            WazaID::WAZA_PAWAATORIKKU,
            WazaID::WAZA_IEKI,
            WazaID::WAZA_OMAZINAI,
            WazaID::WAZA_SAKIDORI,
            WazaID::WAZA_MANEKKO,
            WazaID::WAZA_PAWAASUWAPPU,
            WazaID::WAZA_GAADOSUWAPPU,
            WazaID::WAZA_OSIOKI,
            WazaID::WAZA_TOTTEOKI,
            WazaID::WAZA_NAYAMINOTANE,
            WazaID::WAZA_HUIUTI,
            WazaID::WAZA_DOKUBISI,
            WazaID::WAZA_HAATOSUWAPPU,
            WazaID::WAZA_AKUARINGU,
            WazaID::WAZA_DENZIHUYUU,
            WazaID::WAZA_HUREADORAIBU,
            WazaID::WAZA_HAKKEI,
            WazaID::WAZA_HADOUDAN,
            WazaID::WAZA_ROKKUKATTO,
            WazaID::WAZA_DOKUDUKI,
            WazaID::WAZA_AKUNOHADOU,
            WazaID::WAZA_TUZIGIRI,
            WazaID::WAZA_AKUATEERU,
            WazaID::WAZA_TANEBAKUDAN,
            WazaID::WAZA_EASURASSYU,
            WazaID::WAZA_SIZAAKUROSU,
            WazaID::WAZA_MUSINOSAZAMEKI,
            WazaID::WAZA_RYUUNOHADOU,
            WazaID::WAZA_DORAGONDAIBU,
            WazaID::WAZA_PAWAAJEMU,
            WazaID::WAZA_DOREINPANTI,
            WazaID::WAZA_SINKUUHA,
            WazaID::WAZA_KIAIDAMA,
            WazaID::WAZA_ENAZIIBOORU,
            WazaID::WAZA_BUREIBUBAADO,
            WazaID::WAZA_DAITINOTIKARA,
            WazaID::WAZA_SURIKAE,
            WazaID::WAZA_GIGAINPAKUTO,
            WazaID::WAZA_WARUDAKUMI,
            WazaID::WAZA_BARETTOPANTI,
            WazaID::WAZA_YUKINADARE,
            WazaID::WAZA_KOORINOTUBUTE,
            WazaID::WAZA_SYADOOKUROO,
            WazaID::WAZA_KAMINARINOKIBA,
            WazaID::WAZA_KOORINOKIBA,
            WazaID::WAZA_HONOONOKIBA,
            WazaID::WAZA_KAGEUTI,
            WazaID::WAZA_DOROBAKUDAN,
            WazaID::WAZA_SAIKOKATTAA,
            WazaID::WAZA_SINENNOZUTUKI,
            WazaID::WAZA_MIRAASYOTTO,
            WazaID::WAZA_RASUTAAKANON,
            WazaID::WAZA_ROKKUKURAIMU,
            WazaID::WAZA_KIRIBARAI,
            WazaID::WAZA_TORIKKURUUMU,
            WazaID::WAZA_RYUUSEIGUN,
            WazaID::WAZA_HOUDEN,
            WazaID::WAZA_HUNEN,
            WazaID::WAZA_RIIHUSUTOOMU,
            WazaID::WAZA_PAWAAWHIPPU,
            WazaID::WAZA_GANSEKIHOU,
            WazaID::WAZA_KUROSUPOIZUN,
            WazaID::WAZA_DASUTOSYUUTO,
            WazaID::WAZA_AIANHEDDO,
            WazaID::WAZA_MAGUNETTOBOMU,
            WazaID::WAZA_SUTOONEZZI,
            WazaID::WAZA_YUUWAKU,
            WazaID::WAZA_SUTERUSUROKKU,
            WazaID::WAZA_KUSAMUSUBI,
            WazaID::WAZA_OSYABERI,
            WazaID::WAZA_SABAKINOTUBUTE,
            WazaID::WAZA_MUSIKUI,
            WazaID::WAZA_TYAAZIBIIMU,
            WazaID::WAZA_UDDOHANMAA,
            WazaID::WAZA_AKUAJETTO,
            WazaID::WAZA_KOUGEKISIREI,
            WazaID::WAZA_BOUGYOSIREI,
            WazaID::WAZA_KAIHUKUSIREI,
            WazaID::WAZA_MOROHANOZUTUKI,
            WazaID::WAZA_DABURUATAKKU,
            WazaID::WAZA_TOKINOHOUKOU,
            WazaID::WAZA_AKUUSETUDAN,
            WazaID::WAZA_MIKADUKINOMAI,
            WazaID::WAZA_NIGIRITUBUSU,
            WazaID::WAZA_MAGUMASUTOOMU,
            WazaID::WAZA_DAAKUHOORU,
            WazaID::WAZA_SIIDOHUREA,
            WazaID::WAZA_AYASIIKAZE,
            WazaID::WAZA_SYADOODAIBU,
            WazaID::WAZA_TUMETOGI,
            WazaID::WAZA_WAIDOGAADO,
            WazaID::WAZA_GAADOSHEA,
            WazaID::WAZA_PAWAASHEA,
            WazaID::WAZA_WANDAARUUMU,
            WazaID::WAZA_SAIKOSYOKKU,
            WazaID::WAZA_BENOMUSYOKKU,
            WazaID::WAZA_BODHIPAAZI,
            WazaID::WAZA_IKARINOKONA,
            WazaID::WAZA_TEREKINESISU,
            WazaID::WAZA_MAZIKKURUUMU,
            WazaID::WAZA_UTIOTOSU,
            WazaID::WAZA_YAMAARASI,
            WazaID::WAZA_HAZIKERUHONOO,
            WazaID::WAZA_HEDOROWHEEBU,
            WazaID::WAZA_TYOUNOMAI,
            WazaID::WAZA_HEBIIBONBAA,
            WazaID::WAZA_SINKURONOIZU,
            WazaID::WAZA_EREKIBOORU,
            WazaID::WAZA_MIZUBITASI,
            WazaID::WAZA_NITOROTYAAZI,
            WazaID::WAZA_TOGUROWOMAKU,
            WazaID::WAZA_ROOKIKKU,
            WazaID::WAZA_ASIDDOBOMU,
            WazaID::WAZA_IKASAMA,
            WazaID::WAZA_SINPURUBIIMU,
            WazaID::WAZA_NAKAMADUKURI,
            WazaID::WAZA_OSAKINIDOUZO,
            WazaID::WAZA_RINSYOU,
            WazaID::WAZA_EKOOBOISU,
            WazaID::WAZA_NASIKUZUSI,
            WazaID::WAZA_KURIASUMOGGU,
            WazaID::WAZA_ASISUTOPAWAA,
            WazaID::WAZA_FASUTOGAADO,
            WazaID::WAZA_SAIDOTHENZI,
            WazaID::WAZA_NETTOU,
            WazaID::WAZA_KARAWOYABURU,
            WazaID::WAZA_IYASINOHADOU,
            WazaID::WAZA_TATARIME,
            WazaID::WAZA_HURIIFOORU,
            WazaID::WAZA_GIATHENZI,
            WazaID::WAZA_TOMOENAGE,
            WazaID::WAZA_YAKITUKUSU,
            WazaID::WAZA_SAKIOKURI,
            WazaID::WAZA_AKUROBATTO,
            WazaID::WAZA_MIRAATAIPU,
            WazaID::WAZA_KATAKIUTI,
            WazaID::WAZA_INOTIGAKE,
            WazaID::WAZA_GIHUTOPASU,
            WazaID::WAZA_RENGOKU,
            WazaID::WAZA_MIZUNOTIKAI,
            WazaID::WAZA_HONOONOTIKAI,
            WazaID::WAZA_KUSANOTIKAI,
            WazaID::WAZA_BORUTOTHENZI,
            WazaID::WAZA_MUSINOTEIKOU,
            WazaID::WAZA_ZINARASI,
            WazaID::WAZA_KOORINOIBUKI,
            WazaID::WAZA_DORAGONTEERU,
            WazaID::WAZA_HURUITATERU,
            WazaID::WAZA_EREKINETTO,
            WazaID::WAZA_WAIRUDOBORUTO,
            WazaID::WAZA_DORIRURAINAA,
            WazaID::WAZA_DABURUTYOPPU,
            WazaID::WAZA_HAATOSUTANPU,
            WazaID::WAZA_UDDOHOON,
            WazaID::WAZA_SEINARUTURUGI,
            WazaID::WAZA_SHERUBUREEDO,
            WazaID::WAZA_HIITOSUTANPU,
            WazaID::WAZA_GURASUMIKISAA,
            WazaID::WAZA_HAADOROORAA,
            WazaID::WAZA_KOTTONGAADO,
            WazaID::WAZA_NAITOBAASUTO,
            WazaID::WAZA_SAIKOBUREIKU,
            WazaID::WAZA_SUIIPUBINTA,
            WazaID::WAZA_BOUHUU,
            WazaID::WAZA_AHUROBUREIKU,
            WazaID::WAZA_GIASOOSAA,
            WazaID::WAZA_KAENDAN,
            WazaID::WAZA_TEKUNOBASUTAA,
            WazaID::WAZA_INISIENOUTA,
            WazaID::WAZA_SINPINOTURUGI,
            WazaID::WAZA_KOGOERUSEKAI,
            WazaID::WAZA_RAIGEKI,
            WazaID::WAZA_AOIHONOO,
            WazaID::WAZA_HONOONOMAI,
            WazaID::WAZA_HURIIZUBORUTO,
            WazaID::WAZA_KOORUDOHUREA,
            WazaID::WAZA_BAAKUAUTO,
            WazaID::WAZA_TURARAOTOSI,
            WazaID::WAZA_vJENEREETO,
            WazaID::WAZA_KUROSUHUREIMU,
            WazaID::WAZA_KUROSUSANDAA,
            WazaID::WAZA_HURAINGUPURESU,
            WazaID::WAZA_TATAMIGAESI,
            WazaID::WAZA_GEPPU,
            WazaID::WAZA_TAGAYASU,
            WazaID::WAZA_NEBANEBANETTO,
            WazaID::WAZA_TODOMEBARI,
            WazaID::WAZA_GOOSUTODAIBU,
            WazaID::WAZA_HAROWHIN,
            WazaID::WAZA_OTAKEBI,
            WazaID::WAZA_PURAZUMASYAWAA,
            WazaID::WAZA_PARABORATYAAZI,
            WazaID::WAZA_MORINONOROI,
            WazaID::WAZA_HANAHUBUKI,
            WazaID::WAZA_HURIIZUDORAI,
            WazaID::WAZA_TYAAMUBOISU,
            WazaID::WAZA_SUTEZERIHU,
            WazaID::WAZA_HIKKURIKAESU,
            WazaID::WAZA_DOREINKISSU,
            WazaID::WAZA_TORIKKUGAADO,
            WazaID::WAZA_HURAWAAGAADO,
            WazaID::WAZA_GURASUFIIRUDO,
            WazaID::WAZA_MISUTOFIIRUDO,
            WazaID::WAZA_SOUDEN,
            WazaID::WAZA_ZYARETUKU,
            WazaID::WAZA_YOUSEINOKAZE,
            WazaID::WAZA_MUUNFOOSU,
            WazaID::WAZA_BAKUONPA,
            WazaID::WAZA_FEARIIROKKU,
            WazaID::WAZA_KINGUSIIRUDO,
            WazaID::WAZA_NAKAYOKUSURU,
            WazaID::WAZA_NAISYOBANASI,
            WazaID::WAZA_DAIYASUTOOMU,
            WazaID::WAZA_SUTIIMUBAASUTO,
            WazaID::WAZA_IZIGENHOORU,
            WazaID::WAZA_MIZUSYURIKEN,
            WazaID::WAZA_MAZIKARUHUREIMU,
            WazaID::WAZA_NIIDORUGAADO,
            WazaID::WAZA_AROMAMISUTO,
            WazaID::WAZA_KAIDENPA,
            WazaID::WAZA_BENOMUTORAPPU,
            WazaID::WAZA_HUNZIN,
            WazaID::WAZA_ZIOKONTOROORU,
            WazaID::WAZA_ZIBASOUSA,
            WazaID::WAZA_HAPPIITAIMU,
            WazaID::WAZA_EREKIFIIRUDO,
            WazaID::WAZA_MAZIKARUSYAIN,
            WazaID::WAZA_OIWAI,
            WazaID::WAZA_TEWOTUNAGU,
            WazaID::WAZA_TUBURANAHITOMI,
            WazaID::WAZA_HOPPESURISURI,
            WazaID::WAZA_TEKAGEN,
            WazaID::WAZA_MATOWARITUKU,
            WazaID::WAZA_GUROUPANTI,
            WazaID::WAZA_DESUUINGU,
            WazaID::WAZA_SAUZANAROO,
            WazaID::WAZA_SAUZANWHEEBU,
            WazaID::WAZA_GURANDOFOOSU,
            WazaID::WAZA_HAMETUNOHIKARI,
            WazaID::WAZA_KONGENNOHADOU,
            WazaID::WAZA_DANGAINOTURUGI,
            WazaID::WAZA_GARYOUTENSEI,
            WazaID::WAZA_IZIGENRASSYU,
            WazaID::WAZA_URUTORADASSYUATAKKU,
            WazaID::WAZA_NOOMARUZENRYOKU,
            WazaID::WAZA_ZENRYOKUMUSOUGEKIRETUKEN,
            WazaID::WAZA_KAKUTOUZENRYOKU,
            WazaID::WAZA_FAINARUDAIBUKURASSYU,
            WazaID::WAZA_HIKOUZENRYOKU,
            WazaID::WAZA_ASIDDOPOIZUNDERIITO,
            WazaID::WAZA_DOKUZENRYOKU,
            WazaID::WAZA_RAIZINGURANDOOOBAA,
            WazaID::WAZA_ZIMENZENRYOKU,
            WazaID::WAZA_WAARUZUENDOFOORU,
            WazaID::WAZA_IWAZENRYOKU,
            WazaID::WAZA_ZETTAIHOSYOKUKAITENZAN,
            WazaID::WAZA_MUSIZENRYOKU,
            WazaID::WAZA_MUGENANYAHENOIZANAI,
            WazaID::WAZA_GOOSUTOZENRYOKU,
            WazaID::WAZA_TYOUZETURASENRENGEKI,
            WazaID::WAZA_HAGANEZENRYOKU,
            WazaID::WAZA_DAINAMIKKUHURUHUREIMU,
            WazaID::WAZA_HONOOZENRYOKU,
            WazaID::WAZA_SUUPAAAKUATORUNEEDO,
            WazaID::WAZA_MIZUZENRYOKU,
            WazaID::WAZA_BURUUMUSYAINEKUSUTORA,
            WazaID::WAZA_KUSAZENRYOKU,
            WazaID::WAZA_SUPAAKINGUGIGABORUTO,
            WazaID::WAZA_DENKIZENRYOKU,
            WazaID::WAZA_MAKISIMAMUSAIBUREIKAA,
            WazaID::WAZA_ESUPAAZENRYOKU,
            WazaID::WAZA_REIZINGUZIOHURIIZU,
            WazaID::WAZA_KOORIZENRYOKU,
            WazaID::WAZA_ARUTHIMETTODORAGONBAAN,
            WazaID::WAZA_DORAGONZENRYOKU,
            WazaID::WAZA_BURAKKUHOORUIKURIPUSU,
            WazaID::WAZA_AKUZENRYOKU,
            WazaID::WAZA_RABURIISUTAAINPAKUTO,
            WazaID::WAZA_FEARIIZENRYOKU,
            WazaID::WAZA_HISSATUNOPIKATYUUTO,
            WazaID::WAZA_SUNAATUME,
            WazaID::WAZA_DEAIGASIRA,
            WazaID::WAZA_TOOTIKA,
            WazaID::WAZA_KAGENUI,
            WazaID::WAZA_ddRARIATTO,
            WazaID::WAZA_UTAKATANOARIA,
            WazaID::WAZA_AISUHANMAA,
            WazaID::WAZA_HURAWAAHIIRU,
            WazaID::WAZA_10MANBARIKI,
            WazaID::WAZA_TIKARAWOSUITORU,
            WazaID::WAZA_SOORAABUREEDO,
            WazaID::WAZA_KONOHA,
            WazaID::WAZA_SUPOTTORAITO,
            WazaID::WAZA_DOKUNOITO,
            WazaID::WAZA_TOGISUMASU,
            WazaID::WAZA_ASISUTOGIA,
            WazaID::WAZA_ZIGOKUDUKI,
            WazaID::WAZA_KAHUNDANGO,
            WazaID::WAZA_ANKAASYOTTO,
            WazaID::WAZA_SAIKOFIIRUDO,
            WazaID::WAZA_TOBIKAKARU,
            WazaID::WAZA_HONOONOMUTI,
            WazaID::WAZA_TUKEAGARU,
            WazaID::WAZA_MOETUKIRU,
            WazaID::WAZA_SUPIIDOSUWAPPU,
            WazaID::WAZA_SUMAATOHOON,
            WazaID::WAZA_ZYOUKA,
            WazaID::WAZA_MEZAMERUDANSU,
            WazaID::WAZA_KOAPANISSYAA,
            WazaID::WAZA_TOROPIKARUKIKKU,
            WazaID::WAZA_SAIHAI,
            WazaID::WAZA_KUTIBASIKYANON,
            WazaID::WAZA_SUKEIRUNOIZU,
            WazaID::WAZA_DORAGONHANMAA,
            WazaID::WAZA_BUNMAWASU,
            WazaID::WAZA_OORORABEERU,
            WazaID::WAZA_SYADOOAROOZUSUTORAIKU,
            WazaID::WAZA_HAIPAADAAKUKURASSYAA,
            WazaID::WAZA_WADATUMINOSINFONIA,
            WazaID::WAZA_GAADHIANDEAROORA,
            WazaID::WAZA_SITISEIDAKKONTAI,
            WazaID::WAZA_RAITONINGUSAAHURAIDO,
            WazaID::WAZA_HONKIWODASUKOUGEKI,
            WazaID::WAZA_NAINEBORUBUUSUTO,
            WazaID::WAZA_ORIZINZUSUUPAANOVHA,
            WazaID::WAZA_TORAPPUSHERU,
            WazaID::WAZA_HURUURUKANON,
            WazaID::WAZA_SAIKOFANGU,
            WazaID::WAZA_ZIDANDA,
            WazaID::WAZA_SYADOOBOON,
            WazaID::WAZA_AKUSERUROKKU,
            WazaID::WAZA_AKUABUREIKU,
            WazaID::WAZA_PURIZUMUREEZAA,
            WazaID::WAZA_SYADOOSUTIIRU,
            WazaID::WAZA_METEODORAIBU,
            WazaID::WAZA_SYADOOREI,
            WazaID::WAZA_NAMIDAME,
            WazaID::WAZA_BIRIBIRITIKUTIKU,
            WazaID::WAZA_SIZENNOIKARI,
            WazaID::WAZA_MARUTIATAKKU,
            WazaID::WAZA_1000MANBORUTO,
            WazaID::WAZA_BIKKURIHEDDO,
            WazaID::WAZA_PURAZUMAFISUTO,
            WazaID::WAZA_FOTONGEIZAA,
            WazaID::WAZA_TENKOGASUMETUBOUNOHIKARI,
            WazaID::WAZA_SANSYAINSUMASSYAA,
            WazaID::WAZA_MUUNRAITOBURASUTAA,
            WazaID::WAZA_POKABOKAHURENDOTAIMU,
            WazaID::WAZA_RAZIARUEZZISUTOOMU,
            WazaID::WAZA_BUREIZINGUSOURUBIITO,
            WazaID::WAZA_BATIBATIAKUSERU,
            WazaID::WAZA_ZABUZABUSAAHU,
            WazaID::WAZA_HUWAHUWAFOORU,
            WazaID::WAZA_PIKAPIKASANDAA,
            WazaID::WAZA_IKIIKIBABURU,
            WazaID::WAZA_BIRIBIRIEREKI,
            WazaID::WAZA_MERAMERABAAN,
            WazaID::WAZA_DOBADOBAOORA,
            WazaID::WAZA_WARUWARUZOON,
            WazaID::WAZA_SUKUSUKUBONBAA,
            WazaID::WAZA_KOTIKOTIHUROSUTO,
            WazaID::WAZA_KIRAKIRASUTOOMU,
            WazaID::WAZA_BUIBUIBUREIKU,
            WazaID::WAZA_DABURUPANTHAA,
            WazaID::WAZA_DAIWHOORU,
            WazaID::WAZA_DAIMAKKUSUHOU,
            WazaID::WAZA_NERAIUTI,
            WazaID::WAZA_KURAITUKU,
            WazaID::WAZA_HOOBARU,
            WazaID::WAZA_HAISUINOZIN,
            WazaID::WAZA_TAARUSYOTTO,
            WazaID::WAZA_MAHOUNOKONA,
            WazaID::WAZA_DORAGONAROO,
            WazaID::WAZA_OTYAKAI,
            WazaID::WAZA_TAKOGATAME,
            WazaID::WAZA_DENGEKIKUTIBASI,
            WazaID::WAZA_ERAGAMI,
            WazaID::WAZA_KOOTOTHENZI,
            WazaID::WAZA_DAIBAAN,
            WazaID::WAZA_DAIWAAMU,
            WazaID::WAZA_DAISANDAA,
            WazaID::WAZA_DAIATAKKU,
            WazaID::WAZA_DAINAKKURU,
            WazaID::WAZA_DAIHOROU,
            WazaID::WAZA_DAIAISU,
            WazaID::WAZA_DAIASIDDO,
            WazaID::WAZA_DAISUTORIIMU,
            WazaID::WAZA_DAIJETTO,
            WazaID::WAZA_DAIFEARII,
            WazaID::WAZA_DAIDORAGUUN,
            WazaID::WAZA_DAISAIKO,
            WazaID::WAZA_DAIROKKU,
            WazaID::WAZA_DAIAASU,
            WazaID::WAZA_DAIAAKU,
            WazaID::WAZA_DAISOUGEN,
            WazaID::WAZA_DAISUTIRU,
            WazaID::WAZA_SOURUBIITO,
            WazaID::WAZA_BODHIPURESU,
            WazaID::WAZA_DEKOREESYON,
            WazaID::WAZA_DORAMUATAKKU,
            WazaID::WAZA_TORABASAMI,
            WazaID::WAZA_KAENBOORU,
            WazaID::WAZA_KYOZYUUZAN,
            WazaID::WAZA_KYOZYUUDAN,
            WazaID::WAZA_OORAGURUMA,
            WazaID::WAZA_WAIDOBUREIKAA,
            WazaID::WAZA_EDADUKI,
            WazaID::WAZA_OOBAADORAIBU,
            WazaID::WAZA_RINGOSAN,
            WazaID::WAZA_NYUUTON,
            WazaID::WAZA_SOURUKURASSYU,
            WazaID::WAZA_WANDAASUTIIMU,
            WazaID::WAZA_INOTINOSIZUKU,
            WazaID::WAZA_BUROKKINGU,
            WazaID::WAZA_DOGEZATUKI,
            WazaID::WAZA_SUTAAASARUTO,
            WazaID::WAZA_MUGENDAIBIIMU,
            WazaID::WAZA_TETTEIKOUSEN,
            WazaID::WAZA_WAIDOFOOSU,
            WazaID::WAZA_AIANROORAA,
            WazaID::WAZA_SUKEIRUSYOTTO,
            WazaID::WAZA_METEOBIIMU,
            WazaID::WAZA_SHERUAAMUZU,
            WazaID::WAZA_MISUTOBAASUTO,
            WazaID::WAZA_GURASUSURAIDAA,
            WazaID::WAZA_RAIZINGUBORUTO,
            WazaID::WAZA_DAITINOHADOU,
            WazaID::WAZA_HAIYORUITIGEKI,
            WazaID::WAZA_SITTONOHONOO,
            WazaID::WAZA_UPPUNBARASI,
            WazaID::WAZA_PORUTAAGAISUTO,
            WazaID::WAZA_HUSYOKUGASU,
            WazaID::WAZA_KOOTINGU,
            WazaID::WAZA_KUIKKUTAAN,
            WazaID::WAZA_TORIPURUAKUSERU,
            WazaID::WAZA_DABURUUINGU,
            WazaID::WAZA_NESSANODAITI,
            WazaID::WAZA_ZYANGURUHIIRU,
            WazaID::WAZA_ANKOKUKYOUDA,
            WazaID::WAZA_SUIRYUURENDA,
            WazaID::WAZA_SANDAAPURIZUN,
            WazaID::WAZA_DORAGONENAZII,
            WazaID::WAZA_ITETUKUSISEN,
            WazaID::WAZA_MOEAGARUIKARI,
            WazaID::WAZA_RAIMEIGERI,
            WazaID::WAZA_BURIZAADORANSU,
            WazaID::WAZA_ASUTORARUBITTO,
            WazaID::WAZA_BUKIMINAZYUMON,
            WazaID::WAZA_FEITARUKUROO,
            WazaID::WAZA_BARIAARASSYU,
            WazaID::WAZA_PAWAASIHUTO,
            WazaID::WAZA_GANSEKIAKKUSU,
            WazaID::WAZA_HARUNOARASI,
            WazaID::WAZA_SINPINOTIKARA,
            WazaID::WAZA_DAIHUNGEKI,
            WazaID::WAZA_WHEEBUTAKKURU,
            WazaID::WAZA_KUROROBURASUTO,
            WazaID::WAZA_HYOUZANOROSI,
            WazaID::WAZA_SYOURINOMAI,
            WazaID::WAZA_BUTIKAMASI,
            WazaID::WAZA_DOKUBARISENBON,
            WazaID::WAZA_OORAUINGU,
            WazaID::WAZA_URAMITURAMI,
            WazaID::WAZA_TATEKOMORU,
            WazaID::WAZA_3BONNOYA,
            WazaID::WAZA_HYAKKIYAKOU,
            WazaID::WAZA_HIKENTIENAMI,
            WazaID::WAZA_KOGARASIARASI,
            WazaID::WAZA_KAMINARIARASI,
            WazaID::WAZA_NESSANOARASI,
            WazaID::WAZA_MIKADUKINOINORI,
            WazaID::WAZA_BUREIBUTYAAZI,
            WazaID::WAZA_TERABAASUTO,
            WazaID::WAZA_SUREDDOTORAPPU,
            WazaID::WAZA_KAKATOOTOSI,
            WazaID::WAZA_OHAKAMAIRI,
            WazaID::WAZA_RUMINAKORIZYON,
            WazaID::WAZA_ITTYOUAGARI,
            WazaID::WAZA_JETTOPANTI,
            WazaID::WAZA_HABANEROEKISU,
            WazaID::WAZA_HOIIRUSUPIN,
            WazaID::WAZA_NEZUMIZAN,
            WazaID::WAZA_AISUSUPINAA,
            WazaID::WAZA_KYOKENTOTUGEKI,
            WazaID::WAZA_SAIKINOINORI,
            WazaID::WAZA_SIODUKE,
            WazaID::WAZA_TORIPURUDAIBU,
            WazaID::WAZA_KARUKANSUPIN,
            WazaID::WAZA_UTUSIE,
            WazaID::WAZA_MIWOKEZURU,
            WazaID::WAZA_DOGEZAN,
            WazaID::WAZA_TORIKKUHURAWAA,
            WazaID::WAZA_HUREASONGU,
            WazaID::WAZA_AKUASUTEPPU,
            WazaID::WAZA_REIZINGUBURU,
            WazaID::WAZA_GOORUDORASSYU,
            WazaID::WAZA_SAIKOBUREIDO,
            WazaID::WAZA_HAIDOROSUTIIMU,
            WazaID::WAZA_KATASUTOROFII,
            WazaID::WAZA_AKUSERUBUREIKU,
            WazaID::WAZA_INAZUMADORAIBU,
            WazaID::WAZA_SIPPOKIRI,
            WazaID::WAZA_SAMUIGYAGU,
            WazaID::WAZA_OKATADUKE,
            WazaID::WAZA_YUKIGESIKI,
            WazaID::WAZA_TOBITUKU,
            WazaID::WAZA_KUSAWAKE,
            WazaID::WAZA_HIYAMIZU,
            WazaID::WAZA_HAIPAADORIRU,
            WazaID::WAZA_TUINBIIMU,
            WazaID::WAZA_HUNDONOKOBUSI,
            WazaID::WAZA_AAMAAKYANON,
            WazaID::WAZA_MUNENNOTURUGI,
            WazaID::WAZA_DENKOUSOUGEKI,
            WazaID::WAZA_GIGAHANMAA,
            WazaID::WAZA_HOUHUKU,
            WazaID::WAZA_AKUAKATTAA,
            WazaID::WAZA_MOOBIRUKOUGEKI,
            WazaID::WAZA_MOOBIRUKOUGEKI2,
            WazaID::WAZA_MOOBIRUKOUGEKI3,
            WazaID::WAZA_MOOBIRUKOUGEKI4,
            WazaID::WAZA_MOOBIRUKOUGEKI5,
        ];

        #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
        #[repr(transparent)]
        pub struct WazaID(pub u16);
        #[allow(non_upper_case_globals)]
        impl WazaID {
            pub const WAZA_NULL: Self = Self(0);
            pub const WAZA_HATAKU: Self = Self(1);
            pub const WAZA_KARATETYOPPU: Self = Self(2);
            pub const WAZA_OUHUKUBINTA: Self = Self(3);
            pub const WAZA_RENZOKUPANTI: Self = Self(4);
            pub const WAZA_MEGATONPANTI: Self = Self(5);
            pub const WAZA_NEKONIKOBAN: Self = Self(6);
            pub const WAZA_HONOONOPANTI: Self = Self(7);
            pub const WAZA_REITOUPANTI: Self = Self(8);
            pub const WAZA_KAMINARIPANTI: Self = Self(9);
            pub const WAZA_HIKKAKU: Self = Self(10);
            pub const WAZA_HASAMU: Self = Self(11);
            pub const WAZA_HASAMIGIROTIN: Self = Self(12);
            pub const WAZA_KAMAITATI: Self = Self(13);
            pub const WAZA_TURUGINOMAI: Self = Self(14);
            pub const WAZA_IAIGIRI: Self = Self(15);
            pub const WAZA_KAZEOKOSI: Self = Self(16);
            pub const WAZA_TUBASADEUTU: Self = Self(17);
            pub const WAZA_HUKITOBASI: Self = Self(18);
            pub const WAZA_SORAWOTOBU: Self = Self(19);
            pub const WAZA_SIMETUKERU: Self = Self(20);
            pub const WAZA_TATAKITUKERU: Self = Self(21);
            pub const WAZA_TURUNOMUTI: Self = Self(22);
            pub const WAZA_HUMITUKE: Self = Self(23);
            pub const WAZA_NIDOGERI: Self = Self(24);
            pub const WAZA_MEGATONKIKKU: Self = Self(25);
            pub const WAZA_TOBIGERI: Self = Self(26);
            pub const WAZA_MAWASIGERI: Self = Self(27);
            pub const WAZA_SUNAKAKE: Self = Self(28);
            pub const WAZA_ZUTUKI: Self = Self(29);
            pub const WAZA_TUNODETUKU: Self = Self(30);
            pub const WAZA_MIDAREDUKI: Self = Self(31);
            pub const WAZA_TUNODORIRU: Self = Self(32);
            pub const WAZA_TAIATARI: Self = Self(33);
            pub const WAZA_NOSIKAKARI: Self = Self(34);
            pub const WAZA_MAKITUKU: Self = Self(35);
            pub const WAZA_TOSSIN: Self = Self(36);
            pub const WAZA_ABARERU: Self = Self(37);
            pub const WAZA_SUTEMITAKKURU: Self = Self(38);
            pub const WAZA_SIPPOWOHURU: Self = Self(39);
            pub const WAZA_DOKUBARI: Self = Self(40);
            pub const WAZA_DABURUNIIDORU: Self = Self(41);
            pub const WAZA_MISAIRUBARI: Self = Self(42);
            pub const WAZA_NIRAMITUKERU: Self = Self(43);
            pub const WAZA_KAMITUKU: Self = Self(44);
            pub const WAZA_NAKIGOE: Self = Self(45);
            pub const WAZA_HOERU: Self = Self(46);
            pub const WAZA_UTAU: Self = Self(47);
            pub const WAZA_TYOUONPA: Self = Self(48);
            pub const WAZA_SONIKKUBUUMU: Self = Self(49);
            pub const WAZA_KANASIBARI: Self = Self(50);
            pub const WAZA_YOUKAIEKI: Self = Self(51);
            pub const WAZA_HINOKO: Self = Self(52);
            pub const WAZA_KAENHOUSYA: Self = Self(53);
            pub const WAZA_SIROIKIRI: Self = Self(54);
            pub const WAZA_MIZUDEPPOU: Self = Self(55);
            pub const WAZA_HAIDOROPONPU: Self = Self(56);
            pub const WAZA_NAMINORI: Self = Self(57);
            pub const WAZA_REITOUBIIMU: Self = Self(58);
            pub const WAZA_HUBUKI: Self = Self(59);
            pub const WAZA_SAIKEKOUSEN: Self = Self(60);
            pub const WAZA_BABURUKOUSEN: Self = Self(61);
            pub const WAZA_OORORABIIMU: Self = Self(62);
            pub const WAZA_HAKAIKOUSEN: Self = Self(63);
            pub const WAZA_TUTUKU: Self = Self(64);
            pub const WAZA_DORIRUKUTIBASI: Self = Self(65);
            pub const WAZA_ZIGOKUGURUMA: Self = Self(66);
            pub const WAZA_KETAGURI: Self = Self(67);
            pub const WAZA_KAUNTAA: Self = Self(68);
            pub const WAZA_TIKYUUNAGE: Self = Self(69);
            pub const WAZA_KAIRIKI: Self = Self(70);
            pub const WAZA_SUITORU: Self = Self(71);
            pub const WAZA_MEGADOREIN: Self = Self(72);
            pub const WAZA_YADORIGINOTANE: Self = Self(73);
            pub const WAZA_SEITYOU: Self = Self(74);
            pub const WAZA_HAPPAKATTAA: Self = Self(75);
            pub const WAZA_SOORAABIIMU: Self = Self(76);
            pub const WAZA_DOKUNOKONA: Self = Self(77);
            pub const WAZA_SIBIREGONA: Self = Self(78);
            pub const WAZA_NEMURIGONA: Self = Self(79);
            pub const WAZA_HANABIRANOMAI: Self = Self(80);
            pub const WAZA_ITOWOHAKU: Self = Self(81);
            pub const WAZA_RYUUNOIKARI: Self = Self(82);
            pub const WAZA_HONOONOUZU: Self = Self(83);
            pub const WAZA_DENKISYOKKU: Self = Self(84);
            pub const WAZA_10MANBORUTO: Self = Self(85);
            pub const WAZA_DENZIHA: Self = Self(86);
            pub const WAZA_KAMINARI: Self = Self(87);
            pub const WAZA_IWAOTOSI: Self = Self(88);
            pub const WAZA_ZISIN: Self = Self(89);
            pub const WAZA_ZIWARE: Self = Self(90);
            pub const WAZA_ANAWOHORU: Self = Self(91);
            pub const WAZA_DOKUDOKU: Self = Self(92);
            pub const WAZA_NENRIKI: Self = Self(93);
            pub const WAZA_SAIKOKINESISU: Self = Self(94);
            pub const WAZA_SAIMINZYUTU: Self = Self(95);
            pub const WAZA_YOGANOPOOZU: Self = Self(96);
            pub const WAZA_KOUSOKUIDOU: Self = Self(97);
            pub const WAZA_DENKOUSEKKA: Self = Self(98);
            pub const WAZA_IKARI: Self = Self(99);
            pub const WAZA_TEREPOOTO: Self = Self(100);
            pub const WAZA_NAITOHEDDO: Self = Self(101);
            pub const WAZA_MONOMANE: Self = Self(102);
            pub const WAZA_IYANAOTO: Self = Self(103);
            pub const WAZA_KAGEBUNSIN: Self = Self(104);
            pub const WAZA_ZIKOSAISEI: Self = Self(105);
            pub const WAZA_KATAKUNARU: Self = Self(106);
            pub const WAZA_TIISAKUNARU: Self = Self(107);
            pub const WAZA_ENMAKU: Self = Self(108);
            pub const WAZA_AYASIIHIKARI: Self = Self(109);
            pub const WAZA_KARANIKOMORU: Self = Self(110);
            pub const WAZA_MARUKUNARU: Self = Self(111);
            pub const WAZA_BARIAA: Self = Self(112);
            pub const WAZA_HIKARINOKABE: Self = Self(113);
            pub const WAZA_KUROIKIRI: Self = Self(114);
            pub const WAZA_RIHUREKUTAA: Self = Self(115);
            pub const WAZA_KIAIDAME: Self = Self(116);
            pub const WAZA_GAMAN: Self = Self(117);
            pub const WAZA_YUBIWOHURU: Self = Self(118);
            pub const WAZA_OUMUGAESI: Self = Self(119);
            pub const WAZA_ZIBAKU: Self = Self(120);
            pub const WAZA_TAMAGOBAKUDAN: Self = Self(121);
            pub const WAZA_SITADENAMERU: Self = Self(122);
            pub const WAZA_SUMOGGU: Self = Self(123);
            pub const WAZA_HEDOROKOUGEKI: Self = Self(124);
            pub const WAZA_HONEKONBOU: Self = Self(125);
            pub const WAZA_DAIMONZI: Self = Self(126);
            pub const WAZA_TAKINOBORI: Self = Self(127);
            pub const WAZA_KARADEHASAMU: Self = Self(128);
            pub const WAZA_SUPIIDOSUTAA: Self = Self(129);
            pub const WAZA_ROKETTOZUTUKI: Self = Self(130);
            pub const WAZA_TOGEKYANON: Self = Self(131);
            pub const WAZA_KARAMITUKU: Self = Self(132);
            pub const WAZA_DOWASURE: Self = Self(133);
            pub const WAZA_SUPUUNMAGE: Self = Self(134);
            pub const WAZA_TAMAGOUMI: Self = Self(135);
            pub const WAZA_TOBIHIZAGERI: Self = Self(136);
            pub const WAZA_HEBINIRAMI: Self = Self(137);
            pub const WAZA_YUMEKUI: Self = Self(138);
            pub const WAZA_DOKUGASU: Self = Self(139);
            pub const WAZA_TAMANAGE: Self = Self(140);
            pub const WAZA_KYUUKETU: Self = Self(141);
            pub const WAZA_AKUMANOKISSU: Self = Self(142);
            pub const WAZA_GODDOBAADO: Self = Self(143);
            pub const WAZA_HENSIN: Self = Self(144);
            pub const WAZA_AWA: Self = Self(145);
            pub const WAZA_PIYOPIYOPANTI: Self = Self(146);
            pub const WAZA_KINOKONOHOUSI: Self = Self(147);
            pub const WAZA_HURASSYU: Self = Self(148);
            pub const WAZA_SAIKOWHEEBU: Self = Self(149);
            pub const WAZA_HANERU: Self = Self(150);
            pub const WAZA_TOKERU: Self = Self(151);
            pub const WAZA_KURABUHANMAA: Self = Self(152);
            pub const WAZA_DAIBAKUHATU: Self = Self(153);
            pub const WAZA_MIDAREHIKKAKI: Self = Self(154);
            pub const WAZA_HONEBUUMERAN: Self = Self(155);
            pub const WAZA_NEMURU: Self = Self(156);
            pub const WAZA_IWANADARE: Self = Self(157);
            pub const WAZA_HISSATUMAEBA: Self = Self(158);
            pub const WAZA_KAKUBARU: Self = Self(159);
            pub const WAZA_TEKUSUTYAA: Self = Self(160);
            pub const WAZA_TORAIATAKKU: Self = Self(161);
            pub const WAZA_IKARINOMAEBA: Self = Self(162);
            pub const WAZA_KIRISAKU: Self = Self(163);
            pub const WAZA_MIGAWARI: Self = Self(164);
            pub const WAZA_WARUAGAKI: Self = Self(165);
            pub const WAZA_SUKETTI: Self = Self(166);
            pub const WAZA_TORIPURUKIKKU: Self = Self(167);
            pub const WAZA_DOROBOU: Self = Self(168);
            pub const WAZA_KUMONOSU: Self = Self(169);
            pub const WAZA_KOKORONOME: Self = Self(170);
            pub const WAZA_AKUMU: Self = Self(171);
            pub const WAZA_KAENGURUMA: Self = Self(172);
            pub const WAZA_IBIKI: Self = Self(173);
            pub const WAZA_NOROI: Self = Self(174);
            pub const WAZA_ZITABATA: Self = Self(175);
            pub const WAZA_TEKUSUTYAA2: Self = Self(176);
            pub const WAZA_EAROBURASUTO: Self = Self(177);
            pub const WAZA_WATAHOUSI: Self = Self(178);
            pub const WAZA_KISIKAISEI: Self = Self(179);
            pub const WAZA_URAMI: Self = Self(180);
            pub const WAZA_KONAYUKI: Self = Self(181);
            pub const WAZA_MAMORU: Self = Self(182);
            pub const WAZA_MAHHAPANTI: Self = Self(183);
            pub const WAZA_KOWAIKAO: Self = Self(184);
            pub const WAZA_DAMASIUTI: Self = Self(185);
            pub const WAZA_TENSINOKISSU: Self = Self(186);
            pub const WAZA_HARADAIKO: Self = Self(187);
            pub const WAZA_HEDOROBAKUDAN: Self = Self(188);
            pub const WAZA_DOROKAKE: Self = Self(189);
            pub const WAZA_OKUTANHOU: Self = Self(190);
            pub const WAZA_MAKIBISI: Self = Self(191);
            pub const WAZA_DENZIHOU: Self = Self(192);
            pub const WAZA_MIYABURU: Self = Self(193);
            pub const WAZA_MITIDURE: Self = Self(194);
            pub const WAZA_HOROBINOUTA: Self = Self(195);
            pub const WAZA_KOGOERUKAZE: Self = Self(196);
            pub const WAZA_MIKIRI: Self = Self(197);
            pub const WAZA_BOONRASSYU: Self = Self(198);
            pub const WAZA_ROKKUON: Self = Self(199);
            pub const WAZA_GEKIRIN: Self = Self(200);
            pub const WAZA_SUNAARASI: Self = Self(201);
            pub const WAZA_GIGADOREIN: Self = Self(202);
            pub const WAZA_KORAERU: Self = Self(203);
            pub const WAZA_AMAERU: Self = Self(204);
            pub const WAZA_KOROGARU: Self = Self(205);
            pub const WAZA_MINEUTI: Self = Self(206);
            pub const WAZA_IBARU: Self = Self(207);
            pub const WAZA_MIRUKUNOMI: Self = Self(208);
            pub const WAZA_SUPAAKU: Self = Self(209);
            pub const WAZA_RENZOKUGIRI: Self = Self(210);
            pub const WAZA_HAGANENOTUBASA: Self = Self(211);
            pub const WAZA_KUROIMANAZASI: Self = Self(212);
            pub const WAZA_MEROMERO: Self = Self(213);
            pub const WAZA_NEGOTO: Self = Self(214);
            pub const WAZA_IYASINOSUZU: Self = Self(215);
            pub const WAZA_ONGAESI: Self = Self(216);
            pub const WAZA_PUREZENTO: Self = Self(217);
            pub const WAZA_YATUATARI: Self = Self(218);
            pub const WAZA_SINPINOMAMORI: Self = Self(219);
            pub const WAZA_ITAMIWAKE: Self = Self(220);
            pub const WAZA_SEINARUHONOO: Self = Self(221);
            pub const WAZA_MAGUNITYUUDO: Self = Self(222);
            pub const WAZA_BAKURETUPANTI: Self = Self(223);
            pub const WAZA_MEGAHOON: Self = Self(224);
            pub const WAZA_RYUUNOIBUKI: Self = Self(225);
            pub const WAZA_BATONTATTI: Self = Self(226);
            pub const WAZA_ANKOORU: Self = Self(227);
            pub const WAZA_OIUTI: Self = Self(228);
            pub const WAZA_KOUSOKUSUPIN: Self = Self(229);
            pub const WAZA_AMAIKAORI: Self = Self(230);
            pub const WAZA_AIANTEERU: Self = Self(231);
            pub const WAZA_METARUKUROO: Self = Self(232);
            pub const WAZA_ATEMINAGE: Self = Self(233);
            pub const WAZA_ASANOHIZASI: Self = Self(234);
            pub const WAZA_KOUGOUSEI: Self = Self(235);
            pub const WAZA_TUKINOHIKARI: Self = Self(236);
            pub const WAZA_MEZAMERUPAWAA: Self = Self(237);
            pub const WAZA_KUROSUTYOPPU: Self = Self(238);
            pub const WAZA_TATUMAKI: Self = Self(239);
            pub const WAZA_AMAGOI: Self = Self(240);
            pub const WAZA_NIHONBARE: Self = Self(241);
            pub const WAZA_KAMIKUDAKU: Self = Self(242);
            pub const WAZA_MIRAAKOOTO: Self = Self(243);
            pub const WAZA_ZIKOANZI: Self = Self(244);
            pub const WAZA_SINSOKU: Self = Self(245);
            pub const WAZA_GENSINOTIKARA: Self = Self(246);
            pub const WAZA_SYADOOBOORU: Self = Self(247);
            pub const WAZA_MIRAIYOTI: Self = Self(248);
            pub const WAZA_IWAKUDAKI: Self = Self(249);
            pub const WAZA_UZUSIO: Self = Self(250);
            pub const WAZA_HUKURODATAKI: Self = Self(251);
            pub const WAZA_NEKODAMASI: Self = Self(252);
            pub const WAZA_SAWAGU: Self = Self(253);
            pub const WAZA_TAKUWAERU: Self = Self(254);
            pub const WAZA_HAKIDASU: Self = Self(255);
            pub const WAZA_NOMIKOMU: Self = Self(256);
            pub const WAZA_NEPPUU: Self = Self(257);
            pub const WAZA_ARARE: Self = Self(258);
            pub const WAZA_ITYAMON: Self = Self(259);
            pub const WAZA_ODATERU: Self = Self(260);
            pub const WAZA_ONIBI: Self = Self(261);
            pub const WAZA_OKIMIYAGE: Self = Self(262);
            pub const WAZA_KARAGENKI: Self = Self(263);
            pub const WAZA_KIAIPANTI: Self = Self(264);
            pub const WAZA_KITUKE: Self = Self(265);
            pub const WAZA_KONOYUBITOMARE: Self = Self(266);
            pub const WAZA_SIZENNOTIKARA: Self = Self(267);
            pub const WAZA_ZYUUDEN: Self = Self(268);
            pub const WAZA_TYOUHATU: Self = Self(269);
            pub const WAZA_TEDASUKE: Self = Self(270);
            pub const WAZA_TORIKKU: Self = Self(271);
            pub const WAZA_NARIKIRI: Self = Self(272);
            pub const WAZA_NEGAIGOTO: Self = Self(273);
            pub const WAZA_NEKONOTE: Self = Self(274);
            pub const WAZA_NEWOHARU: Self = Self(275);
            pub const WAZA_BAKADIKARA: Self = Self(276);
            pub const WAZA_MAZIKKUKOOTO: Self = Self(277);
            pub const WAZA_RISAIKURU: Self = Self(278);
            pub const WAZA_RIBENZI: Self = Self(279);
            pub const WAZA_KAWARAWARI: Self = Self(280);
            pub const WAZA_AKUBI: Self = Self(281);
            pub const WAZA_HATAKIOTOSU: Self = Self(282);
            pub const WAZA_GAMUSYARA: Self = Self(283);
            pub const WAZA_HUNKA: Self = Self(284);
            pub const WAZA_SUKIRUSUWAPPU: Self = Self(285);
            pub const WAZA_HUUIN: Self = Self(286);
            pub const WAZA_RIHURESSYU: Self = Self(287);
            pub const WAZA_ONNEN: Self = Self(288);
            pub const WAZA_YOKODORI: Self = Self(289);
            pub const WAZA_HIMITUNOTIKARA: Self = Self(290);
            pub const WAZA_DAIBINGU: Self = Self(291);
            pub const WAZA_TUPPARI: Self = Self(292);
            pub const WAZA_HOGOSYOKU: Self = Self(293);
            pub const WAZA_HOTARUBI: Self = Self(294);
            pub const WAZA_RASUTAAPAAZI: Self = Self(295);
            pub const WAZA_MISUTOBOORU: Self = Self(296);
            pub const WAZA_FEZAADANSU: Self = Self(297);
            pub const WAZA_HURAHURADANSU: Self = Self(298);
            pub const WAZA_BUREIZUKIKKU: Self = Self(299);
            pub const WAZA_DOROASOBI: Self = Self(300);
            pub const WAZA_AISUBOORU: Self = Self(301);
            pub const WAZA_NIIDORUAAMU: Self = Self(302);
            pub const WAZA_NAMAKERU: Self = Self(303);
            pub const WAZA_HAIPAABOISU: Self = Self(304);
            pub const WAZA_DOKUDOKUNOKIBA: Self = Self(305);
            pub const WAZA_BUREIKUKUROO: Self = Self(306);
            pub const WAZA_BURASUTOBAAN: Self = Self(307);
            pub const WAZA_HAIDOROKANON: Self = Self(308);
            pub const WAZA_KOMETTOPANTI: Self = Self(309);
            pub const WAZA_ODOROKASU: Self = Self(310);
            pub const WAZA_WHEZAABOORU: Self = Self(311);
            pub const WAZA_AROMASERAPII: Self = Self(312);
            pub const WAZA_USONAKI: Self = Self(313);
            pub const WAZA_EAKATTAA: Self = Self(314);
            pub const WAZA_OOBAAHIITO: Self = Self(315);
            pub const WAZA_KAGIWAKERU: Self = Self(316);
            pub const WAZA_GANSEKIHUUZI: Self = Self(317);
            pub const WAZA_GINIRONOKAZE: Self = Self(318);
            pub const WAZA_KINZOKUON: Self = Self(319);
            pub const WAZA_KUSABUE: Self = Self(320);
            pub const WAZA_KUSUGURU: Self = Self(321);
            pub const WAZA_KOSUMOPAWAA: Self = Self(322);
            pub const WAZA_SIOHUKI: Self = Self(323);
            pub const WAZA_SIGUNARUBIIMU: Self = Self(324);
            pub const WAZA_SYADOOPANTI: Self = Self(325);
            pub const WAZA_ZINTUURIKI: Self = Self(326);
            pub const WAZA_SUKAIAPPAA: Self = Self(327);
            pub const WAZA_SUNAZIGOKU: Self = Self(328);
            pub const WAZA_ZETTAIREIDO: Self = Self(329);
            pub const WAZA_DAKURYUU: Self = Self(330);
            pub const WAZA_TANEMASINGAN: Self = Self(331);
            pub const WAZA_TUBAMEGAESI: Self = Self(332);
            pub const WAZA_TURARABARI: Self = Self(333);
            pub const WAZA_TEPPEKI: Self = Self(334);
            pub const WAZA_TOOSENBOU: Self = Self(335);
            pub const WAZA_TOOBOE: Self = Self(336);
            pub const WAZA_DORAGONKUROO: Self = Self(337);
            pub const WAZA_HAADOPURANTO: Self = Self(338);
            pub const WAZA_BIRUDOAPPU: Self = Self(339);
            pub const WAZA_TOBIHANERU: Self = Self(340);
            pub const WAZA_MADDOSYOTTO: Self = Self(341);
            pub const WAZA_POIZUNTEERU: Self = Self(342);
            pub const WAZA_HOSIGARU: Self = Self(343);
            pub const WAZA_BORUTEKKAA: Self = Self(344);
            pub const WAZA_MAZIKARURIIHU: Self = Self(345);
            pub const WAZA_MIZUASOBI: Self = Self(346);
            pub const WAZA_MEISOU: Self = Self(347);
            pub const WAZA_RIIHUBUREEDO: Self = Self(348);
            pub const WAZA_RYUUNOMAI: Self = Self(349);
            pub const WAZA_ROKKUBURASUTO: Self = Self(350);
            pub const WAZA_DENGEKIHA: Self = Self(351);
            pub const WAZA_MIZUNOHADOU: Self = Self(352);
            pub const WAZA_HAMETUNONEGAI: Self = Self(353);
            pub const WAZA_SAIKOBUUSUTO: Self = Self(354);
            pub const WAZA_HANEYASUME: Self = Self(355);
            pub const WAZA_ZYUURYOKU: Self = Self(356);
            pub const WAZA_MIRAKURUAI: Self = Self(357);
            pub const WAZA_MEZAMASIBINTA: Self = Self(358);
            pub const WAZA_AAMUHANMAA: Self = Self(359);
            pub const WAZA_ZYAIROBOORU: Self = Self(360);
            pub const WAZA_IYASINONEGAI: Self = Self(361);
            pub const WAZA_SIOMIZU: Self = Self(362);
            pub const WAZA_SIZENNOMEGUMI: Self = Self(363);
            pub const WAZA_FEINTO: Self = Self(364);
            pub const WAZA_TUIBAMU: Self = Self(365);
            pub const WAZA_OIKAZE: Self = Self(366);
            pub const WAZA_TUBOWOTUKU: Self = Self(367);
            pub const WAZA_METARUBAASUTO: Self = Self(368);
            pub const WAZA_TONBOGAERI: Self = Self(369);
            pub const WAZA_INFAITO: Self = Self(370);
            pub const WAZA_SIPPEGAESI: Self = Self(371);
            pub const WAZA_DAMEOSI: Self = Self(372);
            pub const WAZA_SASIOSAE: Self = Self(373);
            pub const WAZA_NAGETUKERU: Self = Self(374);
            pub const WAZA_SAIKOSIHUTO: Self = Self(375);
            pub const WAZA_KIRIHUDA: Self = Self(376);
            pub const WAZA_KAIHUKUHUUZI: Self = Self(377);
            pub const WAZA_SIBORITORU: Self = Self(378);
            pub const WAZA_PAWAATORIKKU: Self = Self(379);
            pub const WAZA_IEKI: Self = Self(380);
            pub const WAZA_OMAZINAI: Self = Self(381);
            pub const WAZA_SAKIDORI: Self = Self(382);
            pub const WAZA_MANEKKO: Self = Self(383);
            pub const WAZA_PAWAASUWAPPU: Self = Self(384);
            pub const WAZA_GAADOSUWAPPU: Self = Self(385);
            pub const WAZA_OSIOKI: Self = Self(386);
            pub const WAZA_TOTTEOKI: Self = Self(387);
            pub const WAZA_NAYAMINOTANE: Self = Self(388);
            pub const WAZA_HUIUTI: Self = Self(389);
            pub const WAZA_DOKUBISI: Self = Self(390);
            pub const WAZA_HAATOSUWAPPU: Self = Self(391);
            pub const WAZA_AKUARINGU: Self = Self(392);
            pub const WAZA_DENZIHUYUU: Self = Self(393);
            pub const WAZA_HUREADORAIBU: Self = Self(394);
            pub const WAZA_HAKKEI: Self = Self(395);
            pub const WAZA_HADOUDAN: Self = Self(396);
            pub const WAZA_ROKKUKATTO: Self = Self(397);
            pub const WAZA_DOKUDUKI: Self = Self(398);
            pub const WAZA_AKUNOHADOU: Self = Self(399);
            pub const WAZA_TUZIGIRI: Self = Self(400);
            pub const WAZA_AKUATEERU: Self = Self(401);
            pub const WAZA_TANEBAKUDAN: Self = Self(402);
            pub const WAZA_EASURASSYU: Self = Self(403);
            pub const WAZA_SIZAAKUROSU: Self = Self(404);
            pub const WAZA_MUSINOSAZAMEKI: Self = Self(405);
            pub const WAZA_RYUUNOHADOU: Self = Self(406);
            pub const WAZA_DORAGONDAIBU: Self = Self(407);
            pub const WAZA_PAWAAJEMU: Self = Self(408);
            pub const WAZA_DOREINPANTI: Self = Self(409);
            pub const WAZA_SINKUUHA: Self = Self(410);
            pub const WAZA_KIAIDAMA: Self = Self(411);
            pub const WAZA_ENAZIIBOORU: Self = Self(412);
            pub const WAZA_BUREIBUBAADO: Self = Self(413);
            pub const WAZA_DAITINOTIKARA: Self = Self(414);
            pub const WAZA_SURIKAE: Self = Self(415);
            pub const WAZA_GIGAINPAKUTO: Self = Self(416);
            pub const WAZA_WARUDAKUMI: Self = Self(417);
            pub const WAZA_BARETTOPANTI: Self = Self(418);
            pub const WAZA_YUKINADARE: Self = Self(419);
            pub const WAZA_KOORINOTUBUTE: Self = Self(420);
            pub const WAZA_SYADOOKUROO: Self = Self(421);
            pub const WAZA_KAMINARINOKIBA: Self = Self(422);
            pub const WAZA_KOORINOKIBA: Self = Self(423);
            pub const WAZA_HONOONOKIBA: Self = Self(424);
            pub const WAZA_KAGEUTI: Self = Self(425);
            pub const WAZA_DOROBAKUDAN: Self = Self(426);
            pub const WAZA_SAIKOKATTAA: Self = Self(427);
            pub const WAZA_SINENNOZUTUKI: Self = Self(428);
            pub const WAZA_MIRAASYOTTO: Self = Self(429);
            pub const WAZA_RASUTAAKANON: Self = Self(430);
            pub const WAZA_ROKKUKURAIMU: Self = Self(431);
            pub const WAZA_KIRIBARAI: Self = Self(432);
            pub const WAZA_TORIKKURUUMU: Self = Self(433);
            pub const WAZA_RYUUSEIGUN: Self = Self(434);
            pub const WAZA_HOUDEN: Self = Self(435);
            pub const WAZA_HUNEN: Self = Self(436);
            pub const WAZA_RIIHUSUTOOMU: Self = Self(437);
            pub const WAZA_PAWAAWHIPPU: Self = Self(438);
            pub const WAZA_GANSEKIHOU: Self = Self(439);
            pub const WAZA_KUROSUPOIZUN: Self = Self(440);
            pub const WAZA_DASUTOSYUUTO: Self = Self(441);
            pub const WAZA_AIANHEDDO: Self = Self(442);
            pub const WAZA_MAGUNETTOBOMU: Self = Self(443);
            pub const WAZA_SUTOONEZZI: Self = Self(444);
            pub const WAZA_YUUWAKU: Self = Self(445);
            pub const WAZA_SUTERUSUROKKU: Self = Self(446);
            pub const WAZA_KUSAMUSUBI: Self = Self(447);
            pub const WAZA_OSYABERI: Self = Self(448);
            pub const WAZA_SABAKINOTUBUTE: Self = Self(449);
            pub const WAZA_MUSIKUI: Self = Self(450);
            pub const WAZA_TYAAZIBIIMU: Self = Self(451);
            pub const WAZA_UDDOHANMAA: Self = Self(452);
            pub const WAZA_AKUAJETTO: Self = Self(453);
            pub const WAZA_KOUGEKISIREI: Self = Self(454);
            pub const WAZA_BOUGYOSIREI: Self = Self(455);
            pub const WAZA_KAIHUKUSIREI: Self = Self(456);
            pub const WAZA_MOROHANOZUTUKI: Self = Self(457);
            pub const WAZA_DABURUATAKKU: Self = Self(458);
            pub const WAZA_TOKINOHOUKOU: Self = Self(459);
            pub const WAZA_AKUUSETUDAN: Self = Self(460);
            pub const WAZA_MIKADUKINOMAI: Self = Self(461);
            pub const WAZA_NIGIRITUBUSU: Self = Self(462);
            pub const WAZA_MAGUMASUTOOMU: Self = Self(463);
            pub const WAZA_DAAKUHOORU: Self = Self(464);
            pub const WAZA_SIIDOHUREA: Self = Self(465);
            pub const WAZA_AYASIIKAZE: Self = Self(466);
            pub const WAZA_SYADOODAIBU: Self = Self(467);
            pub const WAZA_TUMETOGI: Self = Self(468);
            pub const WAZA_WAIDOGAADO: Self = Self(469);
            pub const WAZA_GAADOSHEA: Self = Self(470);
            pub const WAZA_PAWAASHEA: Self = Self(471);
            pub const WAZA_WANDAARUUMU: Self = Self(472);
            pub const WAZA_SAIKOSYOKKU: Self = Self(473);
            pub const WAZA_BENOMUSYOKKU: Self = Self(474);
            pub const WAZA_BODHIPAAZI: Self = Self(475);
            pub const WAZA_IKARINOKONA: Self = Self(476);
            pub const WAZA_TEREKINESISU: Self = Self(477);
            pub const WAZA_MAZIKKURUUMU: Self = Self(478);
            pub const WAZA_UTIOTOSU: Self = Self(479);
            pub const WAZA_YAMAARASI: Self = Self(480);
            pub const WAZA_HAZIKERUHONOO: Self = Self(481);
            pub const WAZA_HEDOROWHEEBU: Self = Self(482);
            pub const WAZA_TYOUNOMAI: Self = Self(483);
            pub const WAZA_HEBIIBONBAA: Self = Self(484);
            pub const WAZA_SINKURONOIZU: Self = Self(485);
            pub const WAZA_EREKIBOORU: Self = Self(486);
            pub const WAZA_MIZUBITASI: Self = Self(487);
            pub const WAZA_NITOROTYAAZI: Self = Self(488);
            pub const WAZA_TOGUROWOMAKU: Self = Self(489);
            pub const WAZA_ROOKIKKU: Self = Self(490);
            pub const WAZA_ASIDDOBOMU: Self = Self(491);
            pub const WAZA_IKASAMA: Self = Self(492);
            pub const WAZA_SINPURUBIIMU: Self = Self(493);
            pub const WAZA_NAKAMADUKURI: Self = Self(494);
            pub const WAZA_OSAKINIDOUZO: Self = Self(495);
            pub const WAZA_RINSYOU: Self = Self(496);
            pub const WAZA_EKOOBOISU: Self = Self(497);
            pub const WAZA_NASIKUZUSI: Self = Self(498);
            pub const WAZA_KURIASUMOGGU: Self = Self(499);
            pub const WAZA_ASISUTOPAWAA: Self = Self(500);
            pub const WAZA_FASUTOGAADO: Self = Self(501);
            pub const WAZA_SAIDOTHENZI: Self = Self(502);
            pub const WAZA_NETTOU: Self = Self(503);
            pub const WAZA_KARAWOYABURU: Self = Self(504);
            pub const WAZA_IYASINOHADOU: Self = Self(505);
            pub const WAZA_TATARIME: Self = Self(506);
            pub const WAZA_HURIIFOORU: Self = Self(507);
            pub const WAZA_GIATHENZI: Self = Self(508);
            pub const WAZA_TOMOENAGE: Self = Self(509);
            pub const WAZA_YAKITUKUSU: Self = Self(510);
            pub const WAZA_SAKIOKURI: Self = Self(511);
            pub const WAZA_AKUROBATTO: Self = Self(512);
            pub const WAZA_MIRAATAIPU: Self = Self(513);
            pub const WAZA_KATAKIUTI: Self = Self(514);
            pub const WAZA_INOTIGAKE: Self = Self(515);
            pub const WAZA_GIHUTOPASU: Self = Self(516);
            pub const WAZA_RENGOKU: Self = Self(517);
            pub const WAZA_MIZUNOTIKAI: Self = Self(518);
            pub const WAZA_HONOONOTIKAI: Self = Self(519);
            pub const WAZA_KUSANOTIKAI: Self = Self(520);
            pub const WAZA_BORUTOTHENZI: Self = Self(521);
            pub const WAZA_MUSINOTEIKOU: Self = Self(522);
            pub const WAZA_ZINARASI: Self = Self(523);
            pub const WAZA_KOORINOIBUKI: Self = Self(524);
            pub const WAZA_DORAGONTEERU: Self = Self(525);
            pub const WAZA_HURUITATERU: Self = Self(526);
            pub const WAZA_EREKINETTO: Self = Self(527);
            pub const WAZA_WAIRUDOBORUTO: Self = Self(528);
            pub const WAZA_DORIRURAINAA: Self = Self(529);
            pub const WAZA_DABURUTYOPPU: Self = Self(530);
            pub const WAZA_HAATOSUTANPU: Self = Self(531);
            pub const WAZA_UDDOHOON: Self = Self(532);
            pub const WAZA_SEINARUTURUGI: Self = Self(533);
            pub const WAZA_SHERUBUREEDO: Self = Self(534);
            pub const WAZA_HIITOSUTANPU: Self = Self(535);
            pub const WAZA_GURASUMIKISAA: Self = Self(536);
            pub const WAZA_HAADOROORAA: Self = Self(537);
            pub const WAZA_KOTTONGAADO: Self = Self(538);
            pub const WAZA_NAITOBAASUTO: Self = Self(539);
            pub const WAZA_SAIKOBUREIKU: Self = Self(540);
            pub const WAZA_SUIIPUBINTA: Self = Self(541);
            pub const WAZA_BOUHUU: Self = Self(542);
            pub const WAZA_AHUROBUREIKU: Self = Self(543);
            pub const WAZA_GIASOOSAA: Self = Self(544);
            pub const WAZA_KAENDAN: Self = Self(545);
            pub const WAZA_TEKUNOBASUTAA: Self = Self(546);
            pub const WAZA_INISIENOUTA: Self = Self(547);
            pub const WAZA_SINPINOTURUGI: Self = Self(548);
            pub const WAZA_KOGOERUSEKAI: Self = Self(549);
            pub const WAZA_RAIGEKI: Self = Self(550);
            pub const WAZA_AOIHONOO: Self = Self(551);
            pub const WAZA_HONOONOMAI: Self = Self(552);
            pub const WAZA_HURIIZUBORUTO: Self = Self(553);
            pub const WAZA_KOORUDOHUREA: Self = Self(554);
            pub const WAZA_BAAKUAUTO: Self = Self(555);
            pub const WAZA_TURARAOTOSI: Self = Self(556);
            pub const WAZA_vJENEREETO: Self = Self(557);
            pub const WAZA_KUROSUHUREIMU: Self = Self(558);
            pub const WAZA_KUROSUSANDAA: Self = Self(559);
            pub const WAZA_HURAINGUPURESU: Self = Self(560);
            pub const WAZA_TATAMIGAESI: Self = Self(561);
            pub const WAZA_GEPPU: Self = Self(562);
            pub const WAZA_TAGAYASU: Self = Self(563);
            pub const WAZA_NEBANEBANETTO: Self = Self(564);
            pub const WAZA_TODOMEBARI: Self = Self(565);
            pub const WAZA_GOOSUTODAIBU: Self = Self(566);
            pub const WAZA_HAROWHIN: Self = Self(567);
            pub const WAZA_OTAKEBI: Self = Self(568);
            pub const WAZA_PURAZUMASYAWAA: Self = Self(569);
            pub const WAZA_PARABORATYAAZI: Self = Self(570);
            pub const WAZA_MORINONOROI: Self = Self(571);
            pub const WAZA_HANAHUBUKI: Self = Self(572);
            pub const WAZA_HURIIZUDORAI: Self = Self(573);
            pub const WAZA_TYAAMUBOISU: Self = Self(574);
            pub const WAZA_SUTEZERIHU: Self = Self(575);
            pub const WAZA_HIKKURIKAESU: Self = Self(576);
            pub const WAZA_DOREINKISSU: Self = Self(577);
            pub const WAZA_TORIKKUGAADO: Self = Self(578);
            pub const WAZA_HURAWAAGAADO: Self = Self(579);
            pub const WAZA_GURASUFIIRUDO: Self = Self(580);
            pub const WAZA_MISUTOFIIRUDO: Self = Self(581);
            pub const WAZA_SOUDEN: Self = Self(582);
            pub const WAZA_ZYARETUKU: Self = Self(583);
            pub const WAZA_YOUSEINOKAZE: Self = Self(584);
            pub const WAZA_MUUNFOOSU: Self = Self(585);
            pub const WAZA_BAKUONPA: Self = Self(586);
            pub const WAZA_FEARIIROKKU: Self = Self(587);
            pub const WAZA_KINGUSIIRUDO: Self = Self(588);
            pub const WAZA_NAKAYOKUSURU: Self = Self(589);
            pub const WAZA_NAISYOBANASI: Self = Self(590);
            pub const WAZA_DAIYASUTOOMU: Self = Self(591);
            pub const WAZA_SUTIIMUBAASUTO: Self = Self(592);
            pub const WAZA_IZIGENHOORU: Self = Self(593);
            pub const WAZA_MIZUSYURIKEN: Self = Self(594);
            pub const WAZA_MAZIKARUHUREIMU: Self = Self(595);
            pub const WAZA_NIIDORUGAADO: Self = Self(596);
            pub const WAZA_AROMAMISUTO: Self = Self(597);
            pub const WAZA_KAIDENPA: Self = Self(598);
            pub const WAZA_BENOMUTORAPPU: Self = Self(599);
            pub const WAZA_HUNZIN: Self = Self(600);
            pub const WAZA_ZIOKONTOROORU: Self = Self(601);
            pub const WAZA_ZIBASOUSA: Self = Self(602);
            pub const WAZA_HAPPIITAIMU: Self = Self(603);
            pub const WAZA_EREKIFIIRUDO: Self = Self(604);
            pub const WAZA_MAZIKARUSYAIN: Self = Self(605);
            pub const WAZA_OIWAI: Self = Self(606);
            pub const WAZA_TEWOTUNAGU: Self = Self(607);
            pub const WAZA_TUBURANAHITOMI: Self = Self(608);
            pub const WAZA_HOPPESURISURI: Self = Self(609);
            pub const WAZA_TEKAGEN: Self = Self(610);
            pub const WAZA_MATOWARITUKU: Self = Self(611);
            pub const WAZA_GUROUPANTI: Self = Self(612);
            pub const WAZA_DESUUINGU: Self = Self(613);
            pub const WAZA_SAUZANAROO: Self = Self(614);
            pub const WAZA_SAUZANWHEEBU: Self = Self(615);
            pub const WAZA_GURANDOFOOSU: Self = Self(616);
            pub const WAZA_HAMETUNOHIKARI: Self = Self(617);
            pub const WAZA_KONGENNOHADOU: Self = Self(618);
            pub const WAZA_DANGAINOTURUGI: Self = Self(619);
            pub const WAZA_GARYOUTENSEI: Self = Self(620);
            pub const WAZA_IZIGENRASSYU: Self = Self(621);
            pub const WAZA_URUTORADASSYUATAKKU: Self = Self(622);
            pub const WAZA_NOOMARUZENRYOKU: Self = Self(623);
            pub const WAZA_ZENRYOKUMUSOUGEKIRETUKEN: Self = Self(624);
            pub const WAZA_KAKUTOUZENRYOKU: Self = Self(625);
            pub const WAZA_FAINARUDAIBUKURASSYU: Self = Self(626);
            pub const WAZA_HIKOUZENRYOKU: Self = Self(627);
            pub const WAZA_ASIDDOPOIZUNDERIITO: Self = Self(628);
            pub const WAZA_DOKUZENRYOKU: Self = Self(629);
            pub const WAZA_RAIZINGURANDOOOBAA: Self = Self(630);
            pub const WAZA_ZIMENZENRYOKU: Self = Self(631);
            pub const WAZA_WAARUZUENDOFOORU: Self = Self(632);
            pub const WAZA_IWAZENRYOKU: Self = Self(633);
            pub const WAZA_ZETTAIHOSYOKUKAITENZAN: Self = Self(634);
            pub const WAZA_MUSIZENRYOKU: Self = Self(635);
            pub const WAZA_MUGENANYAHENOIZANAI: Self = Self(636);
            pub const WAZA_GOOSUTOZENRYOKU: Self = Self(637);
            pub const WAZA_TYOUZETURASENRENGEKI: Self = Self(638);
            pub const WAZA_HAGANEZENRYOKU: Self = Self(639);
            pub const WAZA_DAINAMIKKUHURUHUREIMU: Self = Self(640);
            pub const WAZA_HONOOZENRYOKU: Self = Self(641);
            pub const WAZA_SUUPAAAKUATORUNEEDO: Self = Self(642);
            pub const WAZA_MIZUZENRYOKU: Self = Self(643);
            pub const WAZA_BURUUMUSYAINEKUSUTORA: Self = Self(644);
            pub const WAZA_KUSAZENRYOKU: Self = Self(645);
            pub const WAZA_SUPAAKINGUGIGABORUTO: Self = Self(646);
            pub const WAZA_DENKIZENRYOKU: Self = Self(647);
            pub const WAZA_MAKISIMAMUSAIBUREIKAA: Self = Self(648);
            pub const WAZA_ESUPAAZENRYOKU: Self = Self(649);
            pub const WAZA_REIZINGUZIOHURIIZU: Self = Self(650);
            pub const WAZA_KOORIZENRYOKU: Self = Self(651);
            pub const WAZA_ARUTHIMETTODORAGONBAAN: Self = Self(652);
            pub const WAZA_DORAGONZENRYOKU: Self = Self(653);
            pub const WAZA_BURAKKUHOORUIKURIPUSU: Self = Self(654);
            pub const WAZA_AKUZENRYOKU: Self = Self(655);
            pub const WAZA_RABURIISUTAAINPAKUTO: Self = Self(656);
            pub const WAZA_FEARIIZENRYOKU: Self = Self(657);
            pub const WAZA_HISSATUNOPIKATYUUTO: Self = Self(658);
            pub const WAZA_SUNAATUME: Self = Self(659);
            pub const WAZA_DEAIGASIRA: Self = Self(660);
            pub const WAZA_TOOTIKA: Self = Self(661);
            pub const WAZA_KAGENUI: Self = Self(662);
            pub const WAZA_ddRARIATTO: Self = Self(663);
            pub const WAZA_UTAKATANOARIA: Self = Self(664);
            pub const WAZA_AISUHANMAA: Self = Self(665);
            pub const WAZA_HURAWAAHIIRU: Self = Self(666);
            pub const WAZA_10MANBARIKI: Self = Self(667);
            pub const WAZA_TIKARAWOSUITORU: Self = Self(668);
            pub const WAZA_SOORAABUREEDO: Self = Self(669);
            pub const WAZA_KONOHA: Self = Self(670);
            pub const WAZA_SUPOTTORAITO: Self = Self(671);
            pub const WAZA_DOKUNOITO: Self = Self(672);
            pub const WAZA_TOGISUMASU: Self = Self(673);
            pub const WAZA_ASISUTOGIA: Self = Self(674);
            pub const WAZA_ZIGOKUDUKI: Self = Self(675);
            pub const WAZA_KAHUNDANGO: Self = Self(676);
            pub const WAZA_ANKAASYOTTO: Self = Self(677);
            pub const WAZA_SAIKOFIIRUDO: Self = Self(678);
            pub const WAZA_TOBIKAKARU: Self = Self(679);
            pub const WAZA_HONOONOMUTI: Self = Self(680);
            pub const WAZA_TUKEAGARU: Self = Self(681);
            pub const WAZA_MOETUKIRU: Self = Self(682);
            pub const WAZA_SUPIIDOSUWAPPU: Self = Self(683);
            pub const WAZA_SUMAATOHOON: Self = Self(684);
            pub const WAZA_ZYOUKA: Self = Self(685);
            pub const WAZA_MEZAMERUDANSU: Self = Self(686);
            pub const WAZA_KOAPANISSYAA: Self = Self(687);
            pub const WAZA_TOROPIKARUKIKKU: Self = Self(688);
            pub const WAZA_SAIHAI: Self = Self(689);
            pub const WAZA_KUTIBASIKYANON: Self = Self(690);
            pub const WAZA_SUKEIRUNOIZU: Self = Self(691);
            pub const WAZA_DORAGONHANMAA: Self = Self(692);
            pub const WAZA_BUNMAWASU: Self = Self(693);
            pub const WAZA_OORORABEERU: Self = Self(694);
            pub const WAZA_SYADOOAROOZUSUTORAIKU: Self = Self(695);
            pub const WAZA_HAIPAADAAKUKURASSYAA: Self = Self(696);
            pub const WAZA_WADATUMINOSINFONIA: Self = Self(697);
            pub const WAZA_GAADHIANDEAROORA: Self = Self(698);
            pub const WAZA_SITISEIDAKKONTAI: Self = Self(699);
            pub const WAZA_RAITONINGUSAAHURAIDO: Self = Self(700);
            pub const WAZA_HONKIWODASUKOUGEKI: Self = Self(701);
            pub const WAZA_NAINEBORUBUUSUTO: Self = Self(702);
            pub const WAZA_ORIZINZUSUUPAANOVHA: Self = Self(703);
            pub const WAZA_TORAPPUSHERU: Self = Self(704);
            pub const WAZA_HURUURUKANON: Self = Self(705);
            pub const WAZA_SAIKOFANGU: Self = Self(706);
            pub const WAZA_ZIDANDA: Self = Self(707);
            pub const WAZA_SYADOOBOON: Self = Self(708);
            pub const WAZA_AKUSERUROKKU: Self = Self(709);
            pub const WAZA_AKUABUREIKU: Self = Self(710);
            pub const WAZA_PURIZUMUREEZAA: Self = Self(711);
            pub const WAZA_SYADOOSUTIIRU: Self = Self(712);
            pub const WAZA_METEODORAIBU: Self = Self(713);
            pub const WAZA_SYADOOREI: Self = Self(714);
            pub const WAZA_NAMIDAME: Self = Self(715);
            pub const WAZA_BIRIBIRITIKUTIKU: Self = Self(716);
            pub const WAZA_SIZENNOIKARI: Self = Self(717);
            pub const WAZA_MARUTIATAKKU: Self = Self(718);
            pub const WAZA_1000MANBORUTO: Self = Self(719);
            pub const WAZA_BIKKURIHEDDO: Self = Self(720);
            pub const WAZA_PURAZUMAFISUTO: Self = Self(721);
            pub const WAZA_FOTONGEIZAA: Self = Self(722);
            pub const WAZA_TENKOGASUMETUBOUNOHIKARI: Self = Self(723);
            pub const WAZA_SANSYAINSUMASSYAA: Self = Self(724);
            pub const WAZA_MUUNRAITOBURASUTAA: Self = Self(725);
            pub const WAZA_POKABOKAHURENDOTAIMU: Self = Self(726);
            pub const WAZA_RAZIARUEZZISUTOOMU: Self = Self(727);
            pub const WAZA_BUREIZINGUSOURUBIITO: Self = Self(728);
            pub const WAZA_BATIBATIAKUSERU: Self = Self(729);
            pub const WAZA_ZABUZABUSAAHU: Self = Self(730);
            pub const WAZA_HUWAHUWAFOORU: Self = Self(731);
            pub const WAZA_PIKAPIKASANDAA: Self = Self(732);
            pub const WAZA_IKIIKIBABURU: Self = Self(733);
            pub const WAZA_BIRIBIRIEREKI: Self = Self(734);
            pub const WAZA_MERAMERABAAN: Self = Self(735);
            pub const WAZA_DOBADOBAOORA: Self = Self(736);
            pub const WAZA_WARUWARUZOON: Self = Self(737);
            pub const WAZA_SUKUSUKUBONBAA: Self = Self(738);
            pub const WAZA_KOTIKOTIHUROSUTO: Self = Self(739);
            pub const WAZA_KIRAKIRASUTOOMU: Self = Self(740);
            pub const WAZA_BUIBUIBUREIKU: Self = Self(741);
            pub const WAZA_DABURUPANTHAA: Self = Self(742);
            pub const WAZA_DAIWHOORU: Self = Self(743);
            pub const WAZA_DAIMAKKUSUHOU: Self = Self(744);
            pub const WAZA_NERAIUTI: Self = Self(745);
            pub const WAZA_KURAITUKU: Self = Self(746);
            pub const WAZA_HOOBARU: Self = Self(747);
            pub const WAZA_HAISUINOZIN: Self = Self(748);
            pub const WAZA_TAARUSYOTTO: Self = Self(749);
            pub const WAZA_MAHOUNOKONA: Self = Self(750);
            pub const WAZA_DORAGONAROO: Self = Self(751);
            pub const WAZA_OTYAKAI: Self = Self(752);
            pub const WAZA_TAKOGATAME: Self = Self(753);
            pub const WAZA_DENGEKIKUTIBASI: Self = Self(754);
            pub const WAZA_ERAGAMI: Self = Self(755);
            pub const WAZA_KOOTOTHENZI: Self = Self(756);
            pub const WAZA_DAIBAAN: Self = Self(757);
            pub const WAZA_DAIWAAMU: Self = Self(758);
            pub const WAZA_DAISANDAA: Self = Self(759);
            pub const WAZA_DAIATAKKU: Self = Self(760);
            pub const WAZA_DAINAKKURU: Self = Self(761);
            pub const WAZA_DAIHOROU: Self = Self(762);
            pub const WAZA_DAIAISU: Self = Self(763);
            pub const WAZA_DAIASIDDO: Self = Self(764);
            pub const WAZA_DAISUTORIIMU: Self = Self(765);
            pub const WAZA_DAIJETTO: Self = Self(766);
            pub const WAZA_DAIFEARII: Self = Self(767);
            pub const WAZA_DAIDORAGUUN: Self = Self(768);
            pub const WAZA_DAISAIKO: Self = Self(769);
            pub const WAZA_DAIROKKU: Self = Self(770);
            pub const WAZA_DAIAASU: Self = Self(771);
            pub const WAZA_DAIAAKU: Self = Self(772);
            pub const WAZA_DAISOUGEN: Self = Self(773);
            pub const WAZA_DAISUTIRU: Self = Self(774);
            pub const WAZA_SOURUBIITO: Self = Self(775);
            pub const WAZA_BODHIPURESU: Self = Self(776);
            pub const WAZA_DEKOREESYON: Self = Self(777);
            pub const WAZA_DORAMUATAKKU: Self = Self(778);
            pub const WAZA_TORABASAMI: Self = Self(779);
            pub const WAZA_KAENBOORU: Self = Self(780);
            pub const WAZA_KYOZYUUZAN: Self = Self(781);
            pub const WAZA_KYOZYUUDAN: Self = Self(782);
            pub const WAZA_OORAGURUMA: Self = Self(783);
            pub const WAZA_WAIDOBUREIKAA: Self = Self(784);
            pub const WAZA_EDADUKI: Self = Self(785);
            pub const WAZA_OOBAADORAIBU: Self = Self(786);
            pub const WAZA_RINGOSAN: Self = Self(787);
            pub const WAZA_NYUUTON: Self = Self(788);
            pub const WAZA_SOURUKURASSYU: Self = Self(789);
            pub const WAZA_WANDAASUTIIMU: Self = Self(790);
            pub const WAZA_INOTINOSIZUKU: Self = Self(791);
            pub const WAZA_BUROKKINGU: Self = Self(792);
            pub const WAZA_DOGEZATUKI: Self = Self(793);
            pub const WAZA_SUTAAASARUTO: Self = Self(794);
            pub const WAZA_MUGENDAIBIIMU: Self = Self(795);
            pub const WAZA_TETTEIKOUSEN: Self = Self(796);
            pub const WAZA_WAIDOFOOSU: Self = Self(797);
            pub const WAZA_AIANROORAA: Self = Self(798);
            pub const WAZA_SUKEIRUSYOTTO: Self = Self(799);
            pub const WAZA_METEOBIIMU: Self = Self(800);
            pub const WAZA_SHERUAAMUZU: Self = Self(801);
            pub const WAZA_MISUTOBAASUTO: Self = Self(802);
            pub const WAZA_GURASUSURAIDAA: Self = Self(803);
            pub const WAZA_RAIZINGUBORUTO: Self = Self(804);
            pub const WAZA_DAITINOHADOU: Self = Self(805);
            pub const WAZA_HAIYORUITIGEKI: Self = Self(806);
            pub const WAZA_SITTONOHONOO: Self = Self(807);
            pub const WAZA_UPPUNBARASI: Self = Self(808);
            pub const WAZA_PORUTAAGAISUTO: Self = Self(809);
            pub const WAZA_HUSYOKUGASU: Self = Self(810);
            pub const WAZA_KOOTINGU: Self = Self(811);
            pub const WAZA_KUIKKUTAAN: Self = Self(812);
            pub const WAZA_TORIPURUAKUSERU: Self = Self(813);
            pub const WAZA_DABURUUINGU: Self = Self(814);
            pub const WAZA_NESSANODAITI: Self = Self(815);
            pub const WAZA_ZYANGURUHIIRU: Self = Self(816);
            pub const WAZA_ANKOKUKYOUDA: Self = Self(817);
            pub const WAZA_SUIRYUURENDA: Self = Self(818);
            pub const WAZA_SANDAAPURIZUN: Self = Self(819);
            pub const WAZA_DORAGONENAZII: Self = Self(820);
            pub const WAZA_ITETUKUSISEN: Self = Self(821);
            pub const WAZA_MOEAGARUIKARI: Self = Self(822);
            pub const WAZA_RAIMEIGERI: Self = Self(823);
            pub const WAZA_BURIZAADORANSU: Self = Self(824);
            pub const WAZA_ASUTORARUBITTO: Self = Self(825);
            pub const WAZA_BUKIMINAZYUMON: Self = Self(826);
            pub const WAZA_FEITARUKUROO: Self = Self(827);
            pub const WAZA_BARIAARASSYU: Self = Self(828);
            pub const WAZA_PAWAASIHUTO: Self = Self(829);
            pub const WAZA_GANSEKIAKKUSU: Self = Self(830);
            pub const WAZA_HARUNOARASI: Self = Self(831);
            pub const WAZA_SINPINOTIKARA: Self = Self(832);
            pub const WAZA_DAIHUNGEKI: Self = Self(833);
            pub const WAZA_WHEEBUTAKKURU: Self = Self(834);
            pub const WAZA_KUROROBURASUTO: Self = Self(835);
            pub const WAZA_HYOUZANOROSI: Self = Self(836);
            pub const WAZA_SYOURINOMAI: Self = Self(837);
            pub const WAZA_BUTIKAMASI: Self = Self(838);
            pub const WAZA_DOKUBARISENBON: Self = Self(839);
            pub const WAZA_OORAUINGU: Self = Self(840);
            pub const WAZA_URAMITURAMI: Self = Self(841);
            pub const WAZA_TATEKOMORU: Self = Self(842);
            pub const WAZA_3BONNOYA: Self = Self(843);
            pub const WAZA_HYAKKIYAKOU: Self = Self(844);
            pub const WAZA_HIKENTIENAMI: Self = Self(845);
            pub const WAZA_KOGARASIARASI: Self = Self(846);
            pub const WAZA_KAMINARIARASI: Self = Self(847);
            pub const WAZA_NESSANOARASI: Self = Self(848);
            pub const WAZA_MIKADUKINOINORI: Self = Self(849);
            pub const WAZA_BUREIBUTYAAZI: Self = Self(850);
            pub const WAZA_TERABAASUTO: Self = Self(851);
            pub const WAZA_SUREDDOTORAPPU: Self = Self(852);
            pub const WAZA_KAKATOOTOSI: Self = Self(853);
            pub const WAZA_OHAKAMAIRI: Self = Self(854);
            pub const WAZA_RUMINAKORIZYON: Self = Self(855);
            pub const WAZA_ITTYOUAGARI: Self = Self(856);
            pub const WAZA_JETTOPANTI: Self = Self(857);
            pub const WAZA_HABANEROEKISU: Self = Self(858);
            pub const WAZA_HOIIRUSUPIN: Self = Self(859);
            pub const WAZA_NEZUMIZAN: Self = Self(860);
            pub const WAZA_AISUSUPINAA: Self = Self(861);
            pub const WAZA_KYOKENTOTUGEKI: Self = Self(862);
            pub const WAZA_SAIKINOINORI: Self = Self(863);
            pub const WAZA_SIODUKE: Self = Self(864);
            pub const WAZA_TORIPURUDAIBU: Self = Self(865);
            pub const WAZA_KARUKANSUPIN: Self = Self(866);
            pub const WAZA_UTUSIE: Self = Self(867);
            pub const WAZA_MIWOKEZURU: Self = Self(868);
            pub const WAZA_DOGEZAN: Self = Self(869);
            pub const WAZA_TORIKKUHURAWAA: Self = Self(870);
            pub const WAZA_HUREASONGU: Self = Self(871);
            pub const WAZA_AKUASUTEPPU: Self = Self(872);
            pub const WAZA_REIZINGUBURU: Self = Self(873);
            pub const WAZA_GOORUDORASSYU: Self = Self(874);
            pub const WAZA_SAIKOBUREIDO: Self = Self(875);
            pub const WAZA_HAIDOROSUTIIMU: Self = Self(876);
            pub const WAZA_KATASUTOROFII: Self = Self(877);
            pub const WAZA_AKUSERUBUREIKU: Self = Self(878);
            pub const WAZA_INAZUMADORAIBU: Self = Self(879);
            pub const WAZA_SIPPOKIRI: Self = Self(880);
            pub const WAZA_SAMUIGYAGU: Self = Self(881);
            pub const WAZA_OKATADUKE: Self = Self(882);
            pub const WAZA_YUKIGESIKI: Self = Self(883);
            pub const WAZA_TOBITUKU: Self = Self(884);
            pub const WAZA_KUSAWAKE: Self = Self(885);
            pub const WAZA_HIYAMIZU: Self = Self(886);
            pub const WAZA_HAIPAADORIRU: Self = Self(887);
            pub const WAZA_TUINBIIMU: Self = Self(888);
            pub const WAZA_HUNDONOKOBUSI: Self = Self(889);
            pub const WAZA_AAMAAKYANON: Self = Self(890);
            pub const WAZA_MUNENNOTURUGI: Self = Self(891);
            pub const WAZA_DENKOUSOUGEKI: Self = Self(892);
            pub const WAZA_GIGAHANMAA: Self = Self(893);
            pub const WAZA_HOUHUKU: Self = Self(894);
            pub const WAZA_AKUAKATTAA: Self = Self(895);
            pub const WAZA_MOOBIRUKOUGEKI: Self = Self(896);
            pub const WAZA_MOOBIRUKOUGEKI2: Self = Self(897);
            pub const WAZA_MOOBIRUKOUGEKI3: Self = Self(898);
            pub const WAZA_MOOBIRUKOUGEKI4: Self = Self(899);
            pub const WAZA_MOOBIRUKOUGEKI5: Self = Self(900);

            pub const ENUM_MIN: u16 = 0;
            pub const ENUM_MAX: u16 = 900;
            pub const ENUM_VALUES: &'static [Self] = &[
                Self::WAZA_NULL,
                Self::WAZA_HATAKU,
                Self::WAZA_KARATETYOPPU,
                Self::WAZA_OUHUKUBINTA,
                Self::WAZA_RENZOKUPANTI,
                Self::WAZA_MEGATONPANTI,
                Self::WAZA_NEKONIKOBAN,
                Self::WAZA_HONOONOPANTI,
                Self::WAZA_REITOUPANTI,
                Self::WAZA_KAMINARIPANTI,
                Self::WAZA_HIKKAKU,
                Self::WAZA_HASAMU,
                Self::WAZA_HASAMIGIROTIN,
                Self::WAZA_KAMAITATI,
                Self::WAZA_TURUGINOMAI,
                Self::WAZA_IAIGIRI,
                Self::WAZA_KAZEOKOSI,
                Self::WAZA_TUBASADEUTU,
                Self::WAZA_HUKITOBASI,
                Self::WAZA_SORAWOTOBU,
                Self::WAZA_SIMETUKERU,
                Self::WAZA_TATAKITUKERU,
                Self::WAZA_TURUNOMUTI,
                Self::WAZA_HUMITUKE,
                Self::WAZA_NIDOGERI,
                Self::WAZA_MEGATONKIKKU,
                Self::WAZA_TOBIGERI,
                Self::WAZA_MAWASIGERI,
                Self::WAZA_SUNAKAKE,
                Self::WAZA_ZUTUKI,
                Self::WAZA_TUNODETUKU,
                Self::WAZA_MIDAREDUKI,
                Self::WAZA_TUNODORIRU,
                Self::WAZA_TAIATARI,
                Self::WAZA_NOSIKAKARI,
                Self::WAZA_MAKITUKU,
                Self::WAZA_TOSSIN,
                Self::WAZA_ABARERU,
                Self::WAZA_SUTEMITAKKURU,
                Self::WAZA_SIPPOWOHURU,
                Self::WAZA_DOKUBARI,
                Self::WAZA_DABURUNIIDORU,
                Self::WAZA_MISAIRUBARI,
                Self::WAZA_NIRAMITUKERU,
                Self::WAZA_KAMITUKU,
                Self::WAZA_NAKIGOE,
                Self::WAZA_HOERU,
                Self::WAZA_UTAU,
                Self::WAZA_TYOUONPA,
                Self::WAZA_SONIKKUBUUMU,
                Self::WAZA_KANASIBARI,
                Self::WAZA_YOUKAIEKI,
                Self::WAZA_HINOKO,
                Self::WAZA_KAENHOUSYA,
                Self::WAZA_SIROIKIRI,
                Self::WAZA_MIZUDEPPOU,
                Self::WAZA_HAIDOROPONPU,
                Self::WAZA_NAMINORI,
                Self::WAZA_REITOUBIIMU,
                Self::WAZA_HUBUKI,
                Self::WAZA_SAIKEKOUSEN,
                Self::WAZA_BABURUKOUSEN,
                Self::WAZA_OORORABIIMU,
                Self::WAZA_HAKAIKOUSEN,
                Self::WAZA_TUTUKU,
                Self::WAZA_DORIRUKUTIBASI,
                Self::WAZA_ZIGOKUGURUMA,
                Self::WAZA_KETAGURI,
                Self::WAZA_KAUNTAA,
                Self::WAZA_TIKYUUNAGE,
                Self::WAZA_KAIRIKI,
                Self::WAZA_SUITORU,
                Self::WAZA_MEGADOREIN,
                Self::WAZA_YADORIGINOTANE,
                Self::WAZA_SEITYOU,
                Self::WAZA_HAPPAKATTAA,
                Self::WAZA_SOORAABIIMU,
                Self::WAZA_DOKUNOKONA,
                Self::WAZA_SIBIREGONA,
                Self::WAZA_NEMURIGONA,
                Self::WAZA_HANABIRANOMAI,
                Self::WAZA_ITOWOHAKU,
                Self::WAZA_RYUUNOIKARI,
                Self::WAZA_HONOONOUZU,
                Self::WAZA_DENKISYOKKU,
                Self::WAZA_10MANBORUTO,
                Self::WAZA_DENZIHA,
                Self::WAZA_KAMINARI,
                Self::WAZA_IWAOTOSI,
                Self::WAZA_ZISIN,
                Self::WAZA_ZIWARE,
                Self::WAZA_ANAWOHORU,
                Self::WAZA_DOKUDOKU,
                Self::WAZA_NENRIKI,
                Self::WAZA_SAIKOKINESISU,
                Self::WAZA_SAIMINZYUTU,
                Self::WAZA_YOGANOPOOZU,
                Self::WAZA_KOUSOKUIDOU,
                Self::WAZA_DENKOUSEKKA,
                Self::WAZA_IKARI,
                Self::WAZA_TEREPOOTO,
                Self::WAZA_NAITOHEDDO,
                Self::WAZA_MONOMANE,
                Self::WAZA_IYANAOTO,
                Self::WAZA_KAGEBUNSIN,
                Self::WAZA_ZIKOSAISEI,
                Self::WAZA_KATAKUNARU,
                Self::WAZA_TIISAKUNARU,
                Self::WAZA_ENMAKU,
                Self::WAZA_AYASIIHIKARI,
                Self::WAZA_KARANIKOMORU,
                Self::WAZA_MARUKUNARU,
                Self::WAZA_BARIAA,
                Self::WAZA_HIKARINOKABE,
                Self::WAZA_KUROIKIRI,
                Self::WAZA_RIHUREKUTAA,
                Self::WAZA_KIAIDAME,
                Self::WAZA_GAMAN,
                Self::WAZA_YUBIWOHURU,
                Self::WAZA_OUMUGAESI,
                Self::WAZA_ZIBAKU,
                Self::WAZA_TAMAGOBAKUDAN,
                Self::WAZA_SITADENAMERU,
                Self::WAZA_SUMOGGU,
                Self::WAZA_HEDOROKOUGEKI,
                Self::WAZA_HONEKONBOU,
                Self::WAZA_DAIMONZI,
                Self::WAZA_TAKINOBORI,
                Self::WAZA_KARADEHASAMU,
                Self::WAZA_SUPIIDOSUTAA,
                Self::WAZA_ROKETTOZUTUKI,
                Self::WAZA_TOGEKYANON,
                Self::WAZA_KARAMITUKU,
                Self::WAZA_DOWASURE,
                Self::WAZA_SUPUUNMAGE,
                Self::WAZA_TAMAGOUMI,
                Self::WAZA_TOBIHIZAGERI,
                Self::WAZA_HEBINIRAMI,
                Self::WAZA_YUMEKUI,
                Self::WAZA_DOKUGASU,
                Self::WAZA_TAMANAGE,
                Self::WAZA_KYUUKETU,
                Self::WAZA_AKUMANOKISSU,
                Self::WAZA_GODDOBAADO,
                Self::WAZA_HENSIN,
                Self::WAZA_AWA,
                Self::WAZA_PIYOPIYOPANTI,
                Self::WAZA_KINOKONOHOUSI,
                Self::WAZA_HURASSYU,
                Self::WAZA_SAIKOWHEEBU,
                Self::WAZA_HANERU,
                Self::WAZA_TOKERU,
                Self::WAZA_KURABUHANMAA,
                Self::WAZA_DAIBAKUHATU,
                Self::WAZA_MIDAREHIKKAKI,
                Self::WAZA_HONEBUUMERAN,
                Self::WAZA_NEMURU,
                Self::WAZA_IWANADARE,
                Self::WAZA_HISSATUMAEBA,
                Self::WAZA_KAKUBARU,
                Self::WAZA_TEKUSUTYAA,
                Self::WAZA_TORAIATAKKU,
                Self::WAZA_IKARINOMAEBA,
                Self::WAZA_KIRISAKU,
                Self::WAZA_MIGAWARI,
                Self::WAZA_WARUAGAKI,
                Self::WAZA_SUKETTI,
                Self::WAZA_TORIPURUKIKKU,
                Self::WAZA_DOROBOU,
                Self::WAZA_KUMONOSU,
                Self::WAZA_KOKORONOME,
                Self::WAZA_AKUMU,
                Self::WAZA_KAENGURUMA,
                Self::WAZA_IBIKI,
                Self::WAZA_NOROI,
                Self::WAZA_ZITABATA,
                Self::WAZA_TEKUSUTYAA2,
                Self::WAZA_EAROBURASUTO,
                Self::WAZA_WATAHOUSI,
                Self::WAZA_KISIKAISEI,
                Self::WAZA_URAMI,
                Self::WAZA_KONAYUKI,
                Self::WAZA_MAMORU,
                Self::WAZA_MAHHAPANTI,
                Self::WAZA_KOWAIKAO,
                Self::WAZA_DAMASIUTI,
                Self::WAZA_TENSINOKISSU,
                Self::WAZA_HARADAIKO,
                Self::WAZA_HEDOROBAKUDAN,
                Self::WAZA_DOROKAKE,
                Self::WAZA_OKUTANHOU,
                Self::WAZA_MAKIBISI,
                Self::WAZA_DENZIHOU,
                Self::WAZA_MIYABURU,
                Self::WAZA_MITIDURE,
                Self::WAZA_HOROBINOUTA,
                Self::WAZA_KOGOERUKAZE,
                Self::WAZA_MIKIRI,
                Self::WAZA_BOONRASSYU,
                Self::WAZA_ROKKUON,
                Self::WAZA_GEKIRIN,
                Self::WAZA_SUNAARASI,
                Self::WAZA_GIGADOREIN,
                Self::WAZA_KORAERU,
                Self::WAZA_AMAERU,
                Self::WAZA_KOROGARU,
                Self::WAZA_MINEUTI,
                Self::WAZA_IBARU,
                Self::WAZA_MIRUKUNOMI,
                Self::WAZA_SUPAAKU,
                Self::WAZA_RENZOKUGIRI,
                Self::WAZA_HAGANENOTUBASA,
                Self::WAZA_KUROIMANAZASI,
                Self::WAZA_MEROMERO,
                Self::WAZA_NEGOTO,
                Self::WAZA_IYASINOSUZU,
                Self::WAZA_ONGAESI,
                Self::WAZA_PUREZENTO,
                Self::WAZA_YATUATARI,
                Self::WAZA_SINPINOMAMORI,
                Self::WAZA_ITAMIWAKE,
                Self::WAZA_SEINARUHONOO,
                Self::WAZA_MAGUNITYUUDO,
                Self::WAZA_BAKURETUPANTI,
                Self::WAZA_MEGAHOON,
                Self::WAZA_RYUUNOIBUKI,
                Self::WAZA_BATONTATTI,
                Self::WAZA_ANKOORU,
                Self::WAZA_OIUTI,
                Self::WAZA_KOUSOKUSUPIN,
                Self::WAZA_AMAIKAORI,
                Self::WAZA_AIANTEERU,
                Self::WAZA_METARUKUROO,
                Self::WAZA_ATEMINAGE,
                Self::WAZA_ASANOHIZASI,
                Self::WAZA_KOUGOUSEI,
                Self::WAZA_TUKINOHIKARI,
                Self::WAZA_MEZAMERUPAWAA,
                Self::WAZA_KUROSUTYOPPU,
                Self::WAZA_TATUMAKI,
                Self::WAZA_AMAGOI,
                Self::WAZA_NIHONBARE,
                Self::WAZA_KAMIKUDAKU,
                Self::WAZA_MIRAAKOOTO,
                Self::WAZA_ZIKOANZI,
                Self::WAZA_SINSOKU,
                Self::WAZA_GENSINOTIKARA,
                Self::WAZA_SYADOOBOORU,
                Self::WAZA_MIRAIYOTI,
                Self::WAZA_IWAKUDAKI,
                Self::WAZA_UZUSIO,
                Self::WAZA_HUKURODATAKI,
                Self::WAZA_NEKODAMASI,
                Self::WAZA_SAWAGU,
                Self::WAZA_TAKUWAERU,
                Self::WAZA_HAKIDASU,
                Self::WAZA_NOMIKOMU,
                Self::WAZA_NEPPUU,
                Self::WAZA_ARARE,
                Self::WAZA_ITYAMON,
                Self::WAZA_ODATERU,
                Self::WAZA_ONIBI,
                Self::WAZA_OKIMIYAGE,
                Self::WAZA_KARAGENKI,
                Self::WAZA_KIAIPANTI,
                Self::WAZA_KITUKE,
                Self::WAZA_KONOYUBITOMARE,
                Self::WAZA_SIZENNOTIKARA,
                Self::WAZA_ZYUUDEN,
                Self::WAZA_TYOUHATU,
                Self::WAZA_TEDASUKE,
                Self::WAZA_TORIKKU,
                Self::WAZA_NARIKIRI,
                Self::WAZA_NEGAIGOTO,
                Self::WAZA_NEKONOTE,
                Self::WAZA_NEWOHARU,
                Self::WAZA_BAKADIKARA,
                Self::WAZA_MAZIKKUKOOTO,
                Self::WAZA_RISAIKURU,
                Self::WAZA_RIBENZI,
                Self::WAZA_KAWARAWARI,
                Self::WAZA_AKUBI,
                Self::WAZA_HATAKIOTOSU,
                Self::WAZA_GAMUSYARA,
                Self::WAZA_HUNKA,
                Self::WAZA_SUKIRUSUWAPPU,
                Self::WAZA_HUUIN,
                Self::WAZA_RIHURESSYU,
                Self::WAZA_ONNEN,
                Self::WAZA_YOKODORI,
                Self::WAZA_HIMITUNOTIKARA,
                Self::WAZA_DAIBINGU,
                Self::WAZA_TUPPARI,
                Self::WAZA_HOGOSYOKU,
                Self::WAZA_HOTARUBI,
                Self::WAZA_RASUTAAPAAZI,
                Self::WAZA_MISUTOBOORU,
                Self::WAZA_FEZAADANSU,
                Self::WAZA_HURAHURADANSU,
                Self::WAZA_BUREIZUKIKKU,
                Self::WAZA_DOROASOBI,
                Self::WAZA_AISUBOORU,
                Self::WAZA_NIIDORUAAMU,
                Self::WAZA_NAMAKERU,
                Self::WAZA_HAIPAABOISU,
                Self::WAZA_DOKUDOKUNOKIBA,
                Self::WAZA_BUREIKUKUROO,
                Self::WAZA_BURASUTOBAAN,
                Self::WAZA_HAIDOROKANON,
                Self::WAZA_KOMETTOPANTI,
                Self::WAZA_ODOROKASU,
                Self::WAZA_WHEZAABOORU,
                Self::WAZA_AROMASERAPII,
                Self::WAZA_USONAKI,
                Self::WAZA_EAKATTAA,
                Self::WAZA_OOBAAHIITO,
                Self::WAZA_KAGIWAKERU,
                Self::WAZA_GANSEKIHUUZI,
                Self::WAZA_GINIRONOKAZE,
                Self::WAZA_KINZOKUON,
                Self::WAZA_KUSABUE,
                Self::WAZA_KUSUGURU,
                Self::WAZA_KOSUMOPAWAA,
                Self::WAZA_SIOHUKI,
                Self::WAZA_SIGUNARUBIIMU,
                Self::WAZA_SYADOOPANTI,
                Self::WAZA_ZINTUURIKI,
                Self::WAZA_SUKAIAPPAA,
                Self::WAZA_SUNAZIGOKU,
                Self::WAZA_ZETTAIREIDO,
                Self::WAZA_DAKURYUU,
                Self::WAZA_TANEMASINGAN,
                Self::WAZA_TUBAMEGAESI,
                Self::WAZA_TURARABARI,
                Self::WAZA_TEPPEKI,
                Self::WAZA_TOOSENBOU,
                Self::WAZA_TOOBOE,
                Self::WAZA_DORAGONKUROO,
                Self::WAZA_HAADOPURANTO,
                Self::WAZA_BIRUDOAPPU,
                Self::WAZA_TOBIHANERU,
                Self::WAZA_MADDOSYOTTO,
                Self::WAZA_POIZUNTEERU,
                Self::WAZA_HOSIGARU,
                Self::WAZA_BORUTEKKAA,
                Self::WAZA_MAZIKARURIIHU,
                Self::WAZA_MIZUASOBI,
                Self::WAZA_MEISOU,
                Self::WAZA_RIIHUBUREEDO,
                Self::WAZA_RYUUNOMAI,
                Self::WAZA_ROKKUBURASUTO,
                Self::WAZA_DENGEKIHA,
                Self::WAZA_MIZUNOHADOU,
                Self::WAZA_HAMETUNONEGAI,
                Self::WAZA_SAIKOBUUSUTO,
                Self::WAZA_HANEYASUME,
                Self::WAZA_ZYUURYOKU,
                Self::WAZA_MIRAKURUAI,
                Self::WAZA_MEZAMASIBINTA,
                Self::WAZA_AAMUHANMAA,
                Self::WAZA_ZYAIROBOORU,
                Self::WAZA_IYASINONEGAI,
                Self::WAZA_SIOMIZU,
                Self::WAZA_SIZENNOMEGUMI,
                Self::WAZA_FEINTO,
                Self::WAZA_TUIBAMU,
                Self::WAZA_OIKAZE,
                Self::WAZA_TUBOWOTUKU,
                Self::WAZA_METARUBAASUTO,
                Self::WAZA_TONBOGAERI,
                Self::WAZA_INFAITO,
                Self::WAZA_SIPPEGAESI,
                Self::WAZA_DAMEOSI,
                Self::WAZA_SASIOSAE,
                Self::WAZA_NAGETUKERU,
                Self::WAZA_SAIKOSIHUTO,
                Self::WAZA_KIRIHUDA,
                Self::WAZA_KAIHUKUHUUZI,
                Self::WAZA_SIBORITORU,
                Self::WAZA_PAWAATORIKKU,
                Self::WAZA_IEKI,
                Self::WAZA_OMAZINAI,
                Self::WAZA_SAKIDORI,
                Self::WAZA_MANEKKO,
                Self::WAZA_PAWAASUWAPPU,
                Self::WAZA_GAADOSUWAPPU,
                Self::WAZA_OSIOKI,
                Self::WAZA_TOTTEOKI,
                Self::WAZA_NAYAMINOTANE,
                Self::WAZA_HUIUTI,
                Self::WAZA_DOKUBISI,
                Self::WAZA_HAATOSUWAPPU,
                Self::WAZA_AKUARINGU,
                Self::WAZA_DENZIHUYUU,
                Self::WAZA_HUREADORAIBU,
                Self::WAZA_HAKKEI,
                Self::WAZA_HADOUDAN,
                Self::WAZA_ROKKUKATTO,
                Self::WAZA_DOKUDUKI,
                Self::WAZA_AKUNOHADOU,
                Self::WAZA_TUZIGIRI,
                Self::WAZA_AKUATEERU,
                Self::WAZA_TANEBAKUDAN,
                Self::WAZA_EASURASSYU,
                Self::WAZA_SIZAAKUROSU,
                Self::WAZA_MUSINOSAZAMEKI,
                Self::WAZA_RYUUNOHADOU,
                Self::WAZA_DORAGONDAIBU,
                Self::WAZA_PAWAAJEMU,
                Self::WAZA_DOREINPANTI,
                Self::WAZA_SINKUUHA,
                Self::WAZA_KIAIDAMA,
                Self::WAZA_ENAZIIBOORU,
                Self::WAZA_BUREIBUBAADO,
                Self::WAZA_DAITINOTIKARA,
                Self::WAZA_SURIKAE,
                Self::WAZA_GIGAINPAKUTO,
                Self::WAZA_WARUDAKUMI,
                Self::WAZA_BARETTOPANTI,
                Self::WAZA_YUKINADARE,
                Self::WAZA_KOORINOTUBUTE,
                Self::WAZA_SYADOOKUROO,
                Self::WAZA_KAMINARINOKIBA,
                Self::WAZA_KOORINOKIBA,
                Self::WAZA_HONOONOKIBA,
                Self::WAZA_KAGEUTI,
                Self::WAZA_DOROBAKUDAN,
                Self::WAZA_SAIKOKATTAA,
                Self::WAZA_SINENNOZUTUKI,
                Self::WAZA_MIRAASYOTTO,
                Self::WAZA_RASUTAAKANON,
                Self::WAZA_ROKKUKURAIMU,
                Self::WAZA_KIRIBARAI,
                Self::WAZA_TORIKKURUUMU,
                Self::WAZA_RYUUSEIGUN,
                Self::WAZA_HOUDEN,
                Self::WAZA_HUNEN,
                Self::WAZA_RIIHUSUTOOMU,
                Self::WAZA_PAWAAWHIPPU,
                Self::WAZA_GANSEKIHOU,
                Self::WAZA_KUROSUPOIZUN,
                Self::WAZA_DASUTOSYUUTO,
                Self::WAZA_AIANHEDDO,
                Self::WAZA_MAGUNETTOBOMU,
                Self::WAZA_SUTOONEZZI,
                Self::WAZA_YUUWAKU,
                Self::WAZA_SUTERUSUROKKU,
                Self::WAZA_KUSAMUSUBI,
                Self::WAZA_OSYABERI,
                Self::WAZA_SABAKINOTUBUTE,
                Self::WAZA_MUSIKUI,
                Self::WAZA_TYAAZIBIIMU,
                Self::WAZA_UDDOHANMAA,
                Self::WAZA_AKUAJETTO,
                Self::WAZA_KOUGEKISIREI,
                Self::WAZA_BOUGYOSIREI,
                Self::WAZA_KAIHUKUSIREI,
                Self::WAZA_MOROHANOZUTUKI,
                Self::WAZA_DABURUATAKKU,
                Self::WAZA_TOKINOHOUKOU,
                Self::WAZA_AKUUSETUDAN,
                Self::WAZA_MIKADUKINOMAI,
                Self::WAZA_NIGIRITUBUSU,
                Self::WAZA_MAGUMASUTOOMU,
                Self::WAZA_DAAKUHOORU,
                Self::WAZA_SIIDOHUREA,
                Self::WAZA_AYASIIKAZE,
                Self::WAZA_SYADOODAIBU,
                Self::WAZA_TUMETOGI,
                Self::WAZA_WAIDOGAADO,
                Self::WAZA_GAADOSHEA,
                Self::WAZA_PAWAASHEA,
                Self::WAZA_WANDAARUUMU,
                Self::WAZA_SAIKOSYOKKU,
                Self::WAZA_BENOMUSYOKKU,
                Self::WAZA_BODHIPAAZI,
                Self::WAZA_IKARINOKONA,
                Self::WAZA_TEREKINESISU,
                Self::WAZA_MAZIKKURUUMU,
                Self::WAZA_UTIOTOSU,
                Self::WAZA_YAMAARASI,
                Self::WAZA_HAZIKERUHONOO,
                Self::WAZA_HEDOROWHEEBU,
                Self::WAZA_TYOUNOMAI,
                Self::WAZA_HEBIIBONBAA,
                Self::WAZA_SINKURONOIZU,
                Self::WAZA_EREKIBOORU,
                Self::WAZA_MIZUBITASI,
                Self::WAZA_NITOROTYAAZI,
                Self::WAZA_TOGUROWOMAKU,
                Self::WAZA_ROOKIKKU,
                Self::WAZA_ASIDDOBOMU,
                Self::WAZA_IKASAMA,
                Self::WAZA_SINPURUBIIMU,
                Self::WAZA_NAKAMADUKURI,
                Self::WAZA_OSAKINIDOUZO,
                Self::WAZA_RINSYOU,
                Self::WAZA_EKOOBOISU,
                Self::WAZA_NASIKUZUSI,
                Self::WAZA_KURIASUMOGGU,
                Self::WAZA_ASISUTOPAWAA,
                Self::WAZA_FASUTOGAADO,
                Self::WAZA_SAIDOTHENZI,
                Self::WAZA_NETTOU,
                Self::WAZA_KARAWOYABURU,
                Self::WAZA_IYASINOHADOU,
                Self::WAZA_TATARIME,
                Self::WAZA_HURIIFOORU,
                Self::WAZA_GIATHENZI,
                Self::WAZA_TOMOENAGE,
                Self::WAZA_YAKITUKUSU,
                Self::WAZA_SAKIOKURI,
                Self::WAZA_AKUROBATTO,
                Self::WAZA_MIRAATAIPU,
                Self::WAZA_KATAKIUTI,
                Self::WAZA_INOTIGAKE,
                Self::WAZA_GIHUTOPASU,
                Self::WAZA_RENGOKU,
                Self::WAZA_MIZUNOTIKAI,
                Self::WAZA_HONOONOTIKAI,
                Self::WAZA_KUSANOTIKAI,
                Self::WAZA_BORUTOTHENZI,
                Self::WAZA_MUSINOTEIKOU,
                Self::WAZA_ZINARASI,
                Self::WAZA_KOORINOIBUKI,
                Self::WAZA_DORAGONTEERU,
                Self::WAZA_HURUITATERU,
                Self::WAZA_EREKINETTO,
                Self::WAZA_WAIRUDOBORUTO,
                Self::WAZA_DORIRURAINAA,
                Self::WAZA_DABURUTYOPPU,
                Self::WAZA_HAATOSUTANPU,
                Self::WAZA_UDDOHOON,
                Self::WAZA_SEINARUTURUGI,
                Self::WAZA_SHERUBUREEDO,
                Self::WAZA_HIITOSUTANPU,
                Self::WAZA_GURASUMIKISAA,
                Self::WAZA_HAADOROORAA,
                Self::WAZA_KOTTONGAADO,
                Self::WAZA_NAITOBAASUTO,
                Self::WAZA_SAIKOBUREIKU,
                Self::WAZA_SUIIPUBINTA,
                Self::WAZA_BOUHUU,
                Self::WAZA_AHUROBUREIKU,
                Self::WAZA_GIASOOSAA,
                Self::WAZA_KAENDAN,
                Self::WAZA_TEKUNOBASUTAA,
                Self::WAZA_INISIENOUTA,
                Self::WAZA_SINPINOTURUGI,
                Self::WAZA_KOGOERUSEKAI,
                Self::WAZA_RAIGEKI,
                Self::WAZA_AOIHONOO,
                Self::WAZA_HONOONOMAI,
                Self::WAZA_HURIIZUBORUTO,
                Self::WAZA_KOORUDOHUREA,
                Self::WAZA_BAAKUAUTO,
                Self::WAZA_TURARAOTOSI,
                Self::WAZA_vJENEREETO,
                Self::WAZA_KUROSUHUREIMU,
                Self::WAZA_KUROSUSANDAA,
                Self::WAZA_HURAINGUPURESU,
                Self::WAZA_TATAMIGAESI,
                Self::WAZA_GEPPU,
                Self::WAZA_TAGAYASU,
                Self::WAZA_NEBANEBANETTO,
                Self::WAZA_TODOMEBARI,
                Self::WAZA_GOOSUTODAIBU,
                Self::WAZA_HAROWHIN,
                Self::WAZA_OTAKEBI,
                Self::WAZA_PURAZUMASYAWAA,
                Self::WAZA_PARABORATYAAZI,
                Self::WAZA_MORINONOROI,
                Self::WAZA_HANAHUBUKI,
                Self::WAZA_HURIIZUDORAI,
                Self::WAZA_TYAAMUBOISU,
                Self::WAZA_SUTEZERIHU,
                Self::WAZA_HIKKURIKAESU,
                Self::WAZA_DOREINKISSU,
                Self::WAZA_TORIKKUGAADO,
                Self::WAZA_HURAWAAGAADO,
                Self::WAZA_GURASUFIIRUDO,
                Self::WAZA_MISUTOFIIRUDO,
                Self::WAZA_SOUDEN,
                Self::WAZA_ZYARETUKU,
                Self::WAZA_YOUSEINOKAZE,
                Self::WAZA_MUUNFOOSU,
                Self::WAZA_BAKUONPA,
                Self::WAZA_FEARIIROKKU,
                Self::WAZA_KINGUSIIRUDO,
                Self::WAZA_NAKAYOKUSURU,
                Self::WAZA_NAISYOBANASI,
                Self::WAZA_DAIYASUTOOMU,
                Self::WAZA_SUTIIMUBAASUTO,
                Self::WAZA_IZIGENHOORU,
                Self::WAZA_MIZUSYURIKEN,
                Self::WAZA_MAZIKARUHUREIMU,
                Self::WAZA_NIIDORUGAADO,
                Self::WAZA_AROMAMISUTO,
                Self::WAZA_KAIDENPA,
                Self::WAZA_BENOMUTORAPPU,
                Self::WAZA_HUNZIN,
                Self::WAZA_ZIOKONTOROORU,
                Self::WAZA_ZIBASOUSA,
                Self::WAZA_HAPPIITAIMU,
                Self::WAZA_EREKIFIIRUDO,
                Self::WAZA_MAZIKARUSYAIN,
                Self::WAZA_OIWAI,
                Self::WAZA_TEWOTUNAGU,
                Self::WAZA_TUBURANAHITOMI,
                Self::WAZA_HOPPESURISURI,
                Self::WAZA_TEKAGEN,
                Self::WAZA_MATOWARITUKU,
                Self::WAZA_GUROUPANTI,
                Self::WAZA_DESUUINGU,
                Self::WAZA_SAUZANAROO,
                Self::WAZA_SAUZANWHEEBU,
                Self::WAZA_GURANDOFOOSU,
                Self::WAZA_HAMETUNOHIKARI,
                Self::WAZA_KONGENNOHADOU,
                Self::WAZA_DANGAINOTURUGI,
                Self::WAZA_GARYOUTENSEI,
                Self::WAZA_IZIGENRASSYU,
                Self::WAZA_URUTORADASSYUATAKKU,
                Self::WAZA_NOOMARUZENRYOKU,
                Self::WAZA_ZENRYOKUMUSOUGEKIRETUKEN,
                Self::WAZA_KAKUTOUZENRYOKU,
                Self::WAZA_FAINARUDAIBUKURASSYU,
                Self::WAZA_HIKOUZENRYOKU,
                Self::WAZA_ASIDDOPOIZUNDERIITO,
                Self::WAZA_DOKUZENRYOKU,
                Self::WAZA_RAIZINGURANDOOOBAA,
                Self::WAZA_ZIMENZENRYOKU,
                Self::WAZA_WAARUZUENDOFOORU,
                Self::WAZA_IWAZENRYOKU,
                Self::WAZA_ZETTAIHOSYOKUKAITENZAN,
                Self::WAZA_MUSIZENRYOKU,
                Self::WAZA_MUGENANYAHENOIZANAI,
                Self::WAZA_GOOSUTOZENRYOKU,
                Self::WAZA_TYOUZETURASENRENGEKI,
                Self::WAZA_HAGANEZENRYOKU,
                Self::WAZA_DAINAMIKKUHURUHUREIMU,
                Self::WAZA_HONOOZENRYOKU,
                Self::WAZA_SUUPAAAKUATORUNEEDO,
                Self::WAZA_MIZUZENRYOKU,
                Self::WAZA_BURUUMUSYAINEKUSUTORA,
                Self::WAZA_KUSAZENRYOKU,
                Self::WAZA_SUPAAKINGUGIGABORUTO,
                Self::WAZA_DENKIZENRYOKU,
                Self::WAZA_MAKISIMAMUSAIBUREIKAA,
                Self::WAZA_ESUPAAZENRYOKU,
                Self::WAZA_REIZINGUZIOHURIIZU,
                Self::WAZA_KOORIZENRYOKU,
                Self::WAZA_ARUTHIMETTODORAGONBAAN,
                Self::WAZA_DORAGONZENRYOKU,
                Self::WAZA_BURAKKUHOORUIKURIPUSU,
                Self::WAZA_AKUZENRYOKU,
                Self::WAZA_RABURIISUTAAINPAKUTO,
                Self::WAZA_FEARIIZENRYOKU,
                Self::WAZA_HISSATUNOPIKATYUUTO,
                Self::WAZA_SUNAATUME,
                Self::WAZA_DEAIGASIRA,
                Self::WAZA_TOOTIKA,
                Self::WAZA_KAGENUI,
                Self::WAZA_ddRARIATTO,
                Self::WAZA_UTAKATANOARIA,
                Self::WAZA_AISUHANMAA,
                Self::WAZA_HURAWAAHIIRU,
                Self::WAZA_10MANBARIKI,
                Self::WAZA_TIKARAWOSUITORU,
                Self::WAZA_SOORAABUREEDO,
                Self::WAZA_KONOHA,
                Self::WAZA_SUPOTTORAITO,
                Self::WAZA_DOKUNOITO,
                Self::WAZA_TOGISUMASU,
                Self::WAZA_ASISUTOGIA,
                Self::WAZA_ZIGOKUDUKI,
                Self::WAZA_KAHUNDANGO,
                Self::WAZA_ANKAASYOTTO,
                Self::WAZA_SAIKOFIIRUDO,
                Self::WAZA_TOBIKAKARU,
                Self::WAZA_HONOONOMUTI,
                Self::WAZA_TUKEAGARU,
                Self::WAZA_MOETUKIRU,
                Self::WAZA_SUPIIDOSUWAPPU,
                Self::WAZA_SUMAATOHOON,
                Self::WAZA_ZYOUKA,
                Self::WAZA_MEZAMERUDANSU,
                Self::WAZA_KOAPANISSYAA,
                Self::WAZA_TOROPIKARUKIKKU,
                Self::WAZA_SAIHAI,
                Self::WAZA_KUTIBASIKYANON,
                Self::WAZA_SUKEIRUNOIZU,
                Self::WAZA_DORAGONHANMAA,
                Self::WAZA_BUNMAWASU,
                Self::WAZA_OORORABEERU,
                Self::WAZA_SYADOOAROOZUSUTORAIKU,
                Self::WAZA_HAIPAADAAKUKURASSYAA,
                Self::WAZA_WADATUMINOSINFONIA,
                Self::WAZA_GAADHIANDEAROORA,
                Self::WAZA_SITISEIDAKKONTAI,
                Self::WAZA_RAITONINGUSAAHURAIDO,
                Self::WAZA_HONKIWODASUKOUGEKI,
                Self::WAZA_NAINEBORUBUUSUTO,
                Self::WAZA_ORIZINZUSUUPAANOVHA,
                Self::WAZA_TORAPPUSHERU,
                Self::WAZA_HURUURUKANON,
                Self::WAZA_SAIKOFANGU,
                Self::WAZA_ZIDANDA,
                Self::WAZA_SYADOOBOON,
                Self::WAZA_AKUSERUROKKU,
                Self::WAZA_AKUABUREIKU,
                Self::WAZA_PURIZUMUREEZAA,
                Self::WAZA_SYADOOSUTIIRU,
                Self::WAZA_METEODORAIBU,
                Self::WAZA_SYADOOREI,
                Self::WAZA_NAMIDAME,
                Self::WAZA_BIRIBIRITIKUTIKU,
                Self::WAZA_SIZENNOIKARI,
                Self::WAZA_MARUTIATAKKU,
                Self::WAZA_1000MANBORUTO,
                Self::WAZA_BIKKURIHEDDO,
                Self::WAZA_PURAZUMAFISUTO,
                Self::WAZA_FOTONGEIZAA,
                Self::WAZA_TENKOGASUMETUBOUNOHIKARI,
                Self::WAZA_SANSYAINSUMASSYAA,
                Self::WAZA_MUUNRAITOBURASUTAA,
                Self::WAZA_POKABOKAHURENDOTAIMU,
                Self::WAZA_RAZIARUEZZISUTOOMU,
                Self::WAZA_BUREIZINGUSOURUBIITO,
                Self::WAZA_BATIBATIAKUSERU,
                Self::WAZA_ZABUZABUSAAHU,
                Self::WAZA_HUWAHUWAFOORU,
                Self::WAZA_PIKAPIKASANDAA,
                Self::WAZA_IKIIKIBABURU,
                Self::WAZA_BIRIBIRIEREKI,
                Self::WAZA_MERAMERABAAN,
                Self::WAZA_DOBADOBAOORA,
                Self::WAZA_WARUWARUZOON,
                Self::WAZA_SUKUSUKUBONBAA,
                Self::WAZA_KOTIKOTIHUROSUTO,
                Self::WAZA_KIRAKIRASUTOOMU,
                Self::WAZA_BUIBUIBUREIKU,
                Self::WAZA_DABURUPANTHAA,
                Self::WAZA_DAIWHOORU,
                Self::WAZA_DAIMAKKUSUHOU,
                Self::WAZA_NERAIUTI,
                Self::WAZA_KURAITUKU,
                Self::WAZA_HOOBARU,
                Self::WAZA_HAISUINOZIN,
                Self::WAZA_TAARUSYOTTO,
                Self::WAZA_MAHOUNOKONA,
                Self::WAZA_DORAGONAROO,
                Self::WAZA_OTYAKAI,
                Self::WAZA_TAKOGATAME,
                Self::WAZA_DENGEKIKUTIBASI,
                Self::WAZA_ERAGAMI,
                Self::WAZA_KOOTOTHENZI,
                Self::WAZA_DAIBAAN,
                Self::WAZA_DAIWAAMU,
                Self::WAZA_DAISANDAA,
                Self::WAZA_DAIATAKKU,
                Self::WAZA_DAINAKKURU,
                Self::WAZA_DAIHOROU,
                Self::WAZA_DAIAISU,
                Self::WAZA_DAIASIDDO,
                Self::WAZA_DAISUTORIIMU,
                Self::WAZA_DAIJETTO,
                Self::WAZA_DAIFEARII,
                Self::WAZA_DAIDORAGUUN,
                Self::WAZA_DAISAIKO,
                Self::WAZA_DAIROKKU,
                Self::WAZA_DAIAASU,
                Self::WAZA_DAIAAKU,
                Self::WAZA_DAISOUGEN,
                Self::WAZA_DAISUTIRU,
                Self::WAZA_SOURUBIITO,
                Self::WAZA_BODHIPURESU,
                Self::WAZA_DEKOREESYON,
                Self::WAZA_DORAMUATAKKU,
                Self::WAZA_TORABASAMI,
                Self::WAZA_KAENBOORU,
                Self::WAZA_KYOZYUUZAN,
                Self::WAZA_KYOZYUUDAN,
                Self::WAZA_OORAGURUMA,
                Self::WAZA_WAIDOBUREIKAA,
                Self::WAZA_EDADUKI,
                Self::WAZA_OOBAADORAIBU,
                Self::WAZA_RINGOSAN,
                Self::WAZA_NYUUTON,
                Self::WAZA_SOURUKURASSYU,
                Self::WAZA_WANDAASUTIIMU,
                Self::WAZA_INOTINOSIZUKU,
                Self::WAZA_BUROKKINGU,
                Self::WAZA_DOGEZATUKI,
                Self::WAZA_SUTAAASARUTO,
                Self::WAZA_MUGENDAIBIIMU,
                Self::WAZA_TETTEIKOUSEN,
                Self::WAZA_WAIDOFOOSU,
                Self::WAZA_AIANROORAA,
                Self::WAZA_SUKEIRUSYOTTO,
                Self::WAZA_METEOBIIMU,
                Self::WAZA_SHERUAAMUZU,
                Self::WAZA_MISUTOBAASUTO,
                Self::WAZA_GURASUSURAIDAA,
                Self::WAZA_RAIZINGUBORUTO,
                Self::WAZA_DAITINOHADOU,
                Self::WAZA_HAIYORUITIGEKI,
                Self::WAZA_SITTONOHONOO,
                Self::WAZA_UPPUNBARASI,
                Self::WAZA_PORUTAAGAISUTO,
                Self::WAZA_HUSYOKUGASU,
                Self::WAZA_KOOTINGU,
                Self::WAZA_KUIKKUTAAN,
                Self::WAZA_TORIPURUAKUSERU,
                Self::WAZA_DABURUUINGU,
                Self::WAZA_NESSANODAITI,
                Self::WAZA_ZYANGURUHIIRU,
                Self::WAZA_ANKOKUKYOUDA,
                Self::WAZA_SUIRYUURENDA,
                Self::WAZA_SANDAAPURIZUN,
                Self::WAZA_DORAGONENAZII,
                Self::WAZA_ITETUKUSISEN,
                Self::WAZA_MOEAGARUIKARI,
                Self::WAZA_RAIMEIGERI,
                Self::WAZA_BURIZAADORANSU,
                Self::WAZA_ASUTORARUBITTO,
                Self::WAZA_BUKIMINAZYUMON,
                Self::WAZA_FEITARUKUROO,
                Self::WAZA_BARIAARASSYU,
                Self::WAZA_PAWAASIHUTO,
                Self::WAZA_GANSEKIAKKUSU,
                Self::WAZA_HARUNOARASI,
                Self::WAZA_SINPINOTIKARA,
                Self::WAZA_DAIHUNGEKI,
                Self::WAZA_WHEEBUTAKKURU,
                Self::WAZA_KUROROBURASUTO,
                Self::WAZA_HYOUZANOROSI,
                Self::WAZA_SYOURINOMAI,
                Self::WAZA_BUTIKAMASI,
                Self::WAZA_DOKUBARISENBON,
                Self::WAZA_OORAUINGU,
                Self::WAZA_URAMITURAMI,
                Self::WAZA_TATEKOMORU,
                Self::WAZA_3BONNOYA,
                Self::WAZA_HYAKKIYAKOU,
                Self::WAZA_HIKENTIENAMI,
                Self::WAZA_KOGARASIARASI,
                Self::WAZA_KAMINARIARASI,
                Self::WAZA_NESSANOARASI,
                Self::WAZA_MIKADUKINOINORI,
                Self::WAZA_BUREIBUTYAAZI,
                Self::WAZA_TERABAASUTO,
                Self::WAZA_SUREDDOTORAPPU,
                Self::WAZA_KAKATOOTOSI,
                Self::WAZA_OHAKAMAIRI,
                Self::WAZA_RUMINAKORIZYON,
                Self::WAZA_ITTYOUAGARI,
                Self::WAZA_JETTOPANTI,
                Self::WAZA_HABANEROEKISU,
                Self::WAZA_HOIIRUSUPIN,
                Self::WAZA_NEZUMIZAN,
                Self::WAZA_AISUSUPINAA,
                Self::WAZA_KYOKENTOTUGEKI,
                Self::WAZA_SAIKINOINORI,
                Self::WAZA_SIODUKE,
                Self::WAZA_TORIPURUDAIBU,
                Self::WAZA_KARUKANSUPIN,
                Self::WAZA_UTUSIE,
                Self::WAZA_MIWOKEZURU,
                Self::WAZA_DOGEZAN,
                Self::WAZA_TORIKKUHURAWAA,
                Self::WAZA_HUREASONGU,
                Self::WAZA_AKUASUTEPPU,
                Self::WAZA_REIZINGUBURU,
                Self::WAZA_GOORUDORASSYU,
                Self::WAZA_SAIKOBUREIDO,
                Self::WAZA_HAIDOROSUTIIMU,
                Self::WAZA_KATASUTOROFII,
                Self::WAZA_AKUSERUBUREIKU,
                Self::WAZA_INAZUMADORAIBU,
                Self::WAZA_SIPPOKIRI,
                Self::WAZA_SAMUIGYAGU,
                Self::WAZA_OKATADUKE,
                Self::WAZA_YUKIGESIKI,
                Self::WAZA_TOBITUKU,
                Self::WAZA_KUSAWAKE,
                Self::WAZA_HIYAMIZU,
                Self::WAZA_HAIPAADORIRU,
                Self::WAZA_TUINBIIMU,
                Self::WAZA_HUNDONOKOBUSI,
                Self::WAZA_AAMAAKYANON,
                Self::WAZA_MUNENNOTURUGI,
                Self::WAZA_DENKOUSOUGEKI,
                Self::WAZA_GIGAHANMAA,
                Self::WAZA_HOUHUKU,
                Self::WAZA_AKUAKATTAA,
                Self::WAZA_MOOBIRUKOUGEKI,
                Self::WAZA_MOOBIRUKOUGEKI2,
                Self::WAZA_MOOBIRUKOUGEKI3,
                Self::WAZA_MOOBIRUKOUGEKI4,
                Self::WAZA_MOOBIRUKOUGEKI5,
            ];
            /// Returns the variant's name or "" if unknown.
            pub fn variant_name(self) -> Option<&'static str> {
                match self {
                    Self::WAZA_NULL => Some("WAZA_NULL"),
                    Self::WAZA_HATAKU => Some("WAZA_HATAKU"),
                    Self::WAZA_KARATETYOPPU => Some("WAZA_KARATETYOPPU"),
                    Self::WAZA_OUHUKUBINTA => Some("WAZA_OUHUKUBINTA"),
                    Self::WAZA_RENZOKUPANTI => Some("WAZA_RENZOKUPANTI"),
                    Self::WAZA_MEGATONPANTI => Some("WAZA_MEGATONPANTI"),
                    Self::WAZA_NEKONIKOBAN => Some("WAZA_NEKONIKOBAN"),
                    Self::WAZA_HONOONOPANTI => Some("WAZA_HONOONOPANTI"),
                    Self::WAZA_REITOUPANTI => Some("WAZA_REITOUPANTI"),
                    Self::WAZA_KAMINARIPANTI => Some("WAZA_KAMINARIPANTI"),
                    Self::WAZA_HIKKAKU => Some("WAZA_HIKKAKU"),
                    Self::WAZA_HASAMU => Some("WAZA_HASAMU"),
                    Self::WAZA_HASAMIGIROTIN => Some("WAZA_HASAMIGIROTIN"),
                    Self::WAZA_KAMAITATI => Some("WAZA_KAMAITATI"),
                    Self::WAZA_TURUGINOMAI => Some("WAZA_TURUGINOMAI"),
                    Self::WAZA_IAIGIRI => Some("WAZA_IAIGIRI"),
                    Self::WAZA_KAZEOKOSI => Some("WAZA_KAZEOKOSI"),
                    Self::WAZA_TUBASADEUTU => Some("WAZA_TUBASADEUTU"),
                    Self::WAZA_HUKITOBASI => Some("WAZA_HUKITOBASI"),
                    Self::WAZA_SORAWOTOBU => Some("WAZA_SORAWOTOBU"),
                    Self::WAZA_SIMETUKERU => Some("WAZA_SIMETUKERU"),
                    Self::WAZA_TATAKITUKERU => Some("WAZA_TATAKITUKERU"),
                    Self::WAZA_TURUNOMUTI => Some("WAZA_TURUNOMUTI"),
                    Self::WAZA_HUMITUKE => Some("WAZA_HUMITUKE"),
                    Self::WAZA_NIDOGERI => Some("WAZA_NIDOGERI"),
                    Self::WAZA_MEGATONKIKKU => Some("WAZA_MEGATONKIKKU"),
                    Self::WAZA_TOBIGERI => Some("WAZA_TOBIGERI"),
                    Self::WAZA_MAWASIGERI => Some("WAZA_MAWASIGERI"),
                    Self::WAZA_SUNAKAKE => Some("WAZA_SUNAKAKE"),
                    Self::WAZA_ZUTUKI => Some("WAZA_ZUTUKI"),
                    Self::WAZA_TUNODETUKU => Some("WAZA_TUNODETUKU"),
                    Self::WAZA_MIDAREDUKI => Some("WAZA_MIDAREDUKI"),
                    Self::WAZA_TUNODORIRU => Some("WAZA_TUNODORIRU"),
                    Self::WAZA_TAIATARI => Some("WAZA_TAIATARI"),
                    Self::WAZA_NOSIKAKARI => Some("WAZA_NOSIKAKARI"),
                    Self::WAZA_MAKITUKU => Some("WAZA_MAKITUKU"),
                    Self::WAZA_TOSSIN => Some("WAZA_TOSSIN"),
                    Self::WAZA_ABARERU => Some("WAZA_ABARERU"),
                    Self::WAZA_SUTEMITAKKURU => Some("WAZA_SUTEMITAKKURU"),
                    Self::WAZA_SIPPOWOHURU => Some("WAZA_SIPPOWOHURU"),
                    Self::WAZA_DOKUBARI => Some("WAZA_DOKUBARI"),
                    Self::WAZA_DABURUNIIDORU => Some("WAZA_DABURUNIIDORU"),
                    Self::WAZA_MISAIRUBARI => Some("WAZA_MISAIRUBARI"),
                    Self::WAZA_NIRAMITUKERU => Some("WAZA_NIRAMITUKERU"),
                    Self::WAZA_KAMITUKU => Some("WAZA_KAMITUKU"),
                    Self::WAZA_NAKIGOE => Some("WAZA_NAKIGOE"),
                    Self::WAZA_HOERU => Some("WAZA_HOERU"),
                    Self::WAZA_UTAU => Some("WAZA_UTAU"),
                    Self::WAZA_TYOUONPA => Some("WAZA_TYOUONPA"),
                    Self::WAZA_SONIKKUBUUMU => Some("WAZA_SONIKKUBUUMU"),
                    Self::WAZA_KANASIBARI => Some("WAZA_KANASIBARI"),
                    Self::WAZA_YOUKAIEKI => Some("WAZA_YOUKAIEKI"),
                    Self::WAZA_HINOKO => Some("WAZA_HINOKO"),
                    Self::WAZA_KAENHOUSYA => Some("WAZA_KAENHOUSYA"),
                    Self::WAZA_SIROIKIRI => Some("WAZA_SIROIKIRI"),
                    Self::WAZA_MIZUDEPPOU => Some("WAZA_MIZUDEPPOU"),
                    Self::WAZA_HAIDOROPONPU => Some("WAZA_HAIDOROPONPU"),
                    Self::WAZA_NAMINORI => Some("WAZA_NAMINORI"),
                    Self::WAZA_REITOUBIIMU => Some("WAZA_REITOUBIIMU"),
                    Self::WAZA_HUBUKI => Some("WAZA_HUBUKI"),
                    Self::WAZA_SAIKEKOUSEN => Some("WAZA_SAIKEKOUSEN"),
                    Self::WAZA_BABURUKOUSEN => Some("WAZA_BABURUKOUSEN"),
                    Self::WAZA_OORORABIIMU => Some("WAZA_OORORABIIMU"),
                    Self::WAZA_HAKAIKOUSEN => Some("WAZA_HAKAIKOUSEN"),
                    Self::WAZA_TUTUKU => Some("WAZA_TUTUKU"),
                    Self::WAZA_DORIRUKUTIBASI => Some("WAZA_DORIRUKUTIBASI"),
                    Self::WAZA_ZIGOKUGURUMA => Some("WAZA_ZIGOKUGURUMA"),
                    Self::WAZA_KETAGURI => Some("WAZA_KETAGURI"),
                    Self::WAZA_KAUNTAA => Some("WAZA_KAUNTAA"),
                    Self::WAZA_TIKYUUNAGE => Some("WAZA_TIKYUUNAGE"),
                    Self::WAZA_KAIRIKI => Some("WAZA_KAIRIKI"),
                    Self::WAZA_SUITORU => Some("WAZA_SUITORU"),
                    Self::WAZA_MEGADOREIN => Some("WAZA_MEGADOREIN"),
                    Self::WAZA_YADORIGINOTANE => Some("WAZA_YADORIGINOTANE"),
                    Self::WAZA_SEITYOU => Some("WAZA_SEITYOU"),
                    Self::WAZA_HAPPAKATTAA => Some("WAZA_HAPPAKATTAA"),
                    Self::WAZA_SOORAABIIMU => Some("WAZA_SOORAABIIMU"),
                    Self::WAZA_DOKUNOKONA => Some("WAZA_DOKUNOKONA"),
                    Self::WAZA_SIBIREGONA => Some("WAZA_SIBIREGONA"),
                    Self::WAZA_NEMURIGONA => Some("WAZA_NEMURIGONA"),
                    Self::WAZA_HANABIRANOMAI => Some("WAZA_HANABIRANOMAI"),
                    Self::WAZA_ITOWOHAKU => Some("WAZA_ITOWOHAKU"),
                    Self::WAZA_RYUUNOIKARI => Some("WAZA_RYUUNOIKARI"),
                    Self::WAZA_HONOONOUZU => Some("WAZA_HONOONOUZU"),
                    Self::WAZA_DENKISYOKKU => Some("WAZA_DENKISYOKKU"),
                    Self::WAZA_10MANBORUTO => Some("WAZA_10MANBORUTO"),
                    Self::WAZA_DENZIHA => Some("WAZA_DENZIHA"),
                    Self::WAZA_KAMINARI => Some("WAZA_KAMINARI"),
                    Self::WAZA_IWAOTOSI => Some("WAZA_IWAOTOSI"),
                    Self::WAZA_ZISIN => Some("WAZA_ZISIN"),
                    Self::WAZA_ZIWARE => Some("WAZA_ZIWARE"),
                    Self::WAZA_ANAWOHORU => Some("WAZA_ANAWOHORU"),
                    Self::WAZA_DOKUDOKU => Some("WAZA_DOKUDOKU"),
                    Self::WAZA_NENRIKI => Some("WAZA_NENRIKI"),
                    Self::WAZA_SAIKOKINESISU => Some("WAZA_SAIKOKINESISU"),
                    Self::WAZA_SAIMINZYUTU => Some("WAZA_SAIMINZYUTU"),
                    Self::WAZA_YOGANOPOOZU => Some("WAZA_YOGANOPOOZU"),
                    Self::WAZA_KOUSOKUIDOU => Some("WAZA_KOUSOKUIDOU"),
                    Self::WAZA_DENKOUSEKKA => Some("WAZA_DENKOUSEKKA"),
                    Self::WAZA_IKARI => Some("WAZA_IKARI"),
                    Self::WAZA_TEREPOOTO => Some("WAZA_TEREPOOTO"),
                    Self::WAZA_NAITOHEDDO => Some("WAZA_NAITOHEDDO"),
                    Self::WAZA_MONOMANE => Some("WAZA_MONOMANE"),
                    Self::WAZA_IYANAOTO => Some("WAZA_IYANAOTO"),
                    Self::WAZA_KAGEBUNSIN => Some("WAZA_KAGEBUNSIN"),
                    Self::WAZA_ZIKOSAISEI => Some("WAZA_ZIKOSAISEI"),
                    Self::WAZA_KATAKUNARU => Some("WAZA_KATAKUNARU"),
                    Self::WAZA_TIISAKUNARU => Some("WAZA_TIISAKUNARU"),
                    Self::WAZA_ENMAKU => Some("WAZA_ENMAKU"),
                    Self::WAZA_AYASIIHIKARI => Some("WAZA_AYASIIHIKARI"),
                    Self::WAZA_KARANIKOMORU => Some("WAZA_KARANIKOMORU"),
                    Self::WAZA_MARUKUNARU => Some("WAZA_MARUKUNARU"),
                    Self::WAZA_BARIAA => Some("WAZA_BARIAA"),
                    Self::WAZA_HIKARINOKABE => Some("WAZA_HIKARINOKABE"),
                    Self::WAZA_KUROIKIRI => Some("WAZA_KUROIKIRI"),
                    Self::WAZA_RIHUREKUTAA => Some("WAZA_RIHUREKUTAA"),
                    Self::WAZA_KIAIDAME => Some("WAZA_KIAIDAME"),
                    Self::WAZA_GAMAN => Some("WAZA_GAMAN"),
                    Self::WAZA_YUBIWOHURU => Some("WAZA_YUBIWOHURU"),
                    Self::WAZA_OUMUGAESI => Some("WAZA_OUMUGAESI"),
                    Self::WAZA_ZIBAKU => Some("WAZA_ZIBAKU"),
                    Self::WAZA_TAMAGOBAKUDAN => Some("WAZA_TAMAGOBAKUDAN"),
                    Self::WAZA_SITADENAMERU => Some("WAZA_SITADENAMERU"),
                    Self::WAZA_SUMOGGU => Some("WAZA_SUMOGGU"),
                    Self::WAZA_HEDOROKOUGEKI => Some("WAZA_HEDOROKOUGEKI"),
                    Self::WAZA_HONEKONBOU => Some("WAZA_HONEKONBOU"),
                    Self::WAZA_DAIMONZI => Some("WAZA_DAIMONZI"),
                    Self::WAZA_TAKINOBORI => Some("WAZA_TAKINOBORI"),
                    Self::WAZA_KARADEHASAMU => Some("WAZA_KARADEHASAMU"),
                    Self::WAZA_SUPIIDOSUTAA => Some("WAZA_SUPIIDOSUTAA"),
                    Self::WAZA_ROKETTOZUTUKI => Some("WAZA_ROKETTOZUTUKI"),
                    Self::WAZA_TOGEKYANON => Some("WAZA_TOGEKYANON"),
                    Self::WAZA_KARAMITUKU => Some("WAZA_KARAMITUKU"),
                    Self::WAZA_DOWASURE => Some("WAZA_DOWASURE"),
                    Self::WAZA_SUPUUNMAGE => Some("WAZA_SUPUUNMAGE"),
                    Self::WAZA_TAMAGOUMI => Some("WAZA_TAMAGOUMI"),
                    Self::WAZA_TOBIHIZAGERI => Some("WAZA_TOBIHIZAGERI"),
                    Self::WAZA_HEBINIRAMI => Some("WAZA_HEBINIRAMI"),
                    Self::WAZA_YUMEKUI => Some("WAZA_YUMEKUI"),
                    Self::WAZA_DOKUGASU => Some("WAZA_DOKUGASU"),
                    Self::WAZA_TAMANAGE => Some("WAZA_TAMANAGE"),
                    Self::WAZA_KYUUKETU => Some("WAZA_KYUUKETU"),
                    Self::WAZA_AKUMANOKISSU => Some("WAZA_AKUMANOKISSU"),
                    Self::WAZA_GODDOBAADO => Some("WAZA_GODDOBAADO"),
                    Self::WAZA_HENSIN => Some("WAZA_HENSIN"),
                    Self::WAZA_AWA => Some("WAZA_AWA"),
                    Self::WAZA_PIYOPIYOPANTI => Some("WAZA_PIYOPIYOPANTI"),
                    Self::WAZA_KINOKONOHOUSI => Some("WAZA_KINOKONOHOUSI"),
                    Self::WAZA_HURASSYU => Some("WAZA_HURASSYU"),
                    Self::WAZA_SAIKOWHEEBU => Some("WAZA_SAIKOWHEEBU"),
                    Self::WAZA_HANERU => Some("WAZA_HANERU"),
                    Self::WAZA_TOKERU => Some("WAZA_TOKERU"),
                    Self::WAZA_KURABUHANMAA => Some("WAZA_KURABUHANMAA"),
                    Self::WAZA_DAIBAKUHATU => Some("WAZA_DAIBAKUHATU"),
                    Self::WAZA_MIDAREHIKKAKI => Some("WAZA_MIDAREHIKKAKI"),
                    Self::WAZA_HONEBUUMERAN => Some("WAZA_HONEBUUMERAN"),
                    Self::WAZA_NEMURU => Some("WAZA_NEMURU"),
                    Self::WAZA_IWANADARE => Some("WAZA_IWANADARE"),
                    Self::WAZA_HISSATUMAEBA => Some("WAZA_HISSATUMAEBA"),
                    Self::WAZA_KAKUBARU => Some("WAZA_KAKUBARU"),
                    Self::WAZA_TEKUSUTYAA => Some("WAZA_TEKUSUTYAA"),
                    Self::WAZA_TORAIATAKKU => Some("WAZA_TORAIATAKKU"),
                    Self::WAZA_IKARINOMAEBA => Some("WAZA_IKARINOMAEBA"),
                    Self::WAZA_KIRISAKU => Some("WAZA_KIRISAKU"),
                    Self::WAZA_MIGAWARI => Some("WAZA_MIGAWARI"),
                    Self::WAZA_WARUAGAKI => Some("WAZA_WARUAGAKI"),
                    Self::WAZA_SUKETTI => Some("WAZA_SUKETTI"),
                    Self::WAZA_TORIPURUKIKKU => Some("WAZA_TORIPURUKIKKU"),
                    Self::WAZA_DOROBOU => Some("WAZA_DOROBOU"),
                    Self::WAZA_KUMONOSU => Some("WAZA_KUMONOSU"),
                    Self::WAZA_KOKORONOME => Some("WAZA_KOKORONOME"),
                    Self::WAZA_AKUMU => Some("WAZA_AKUMU"),
                    Self::WAZA_KAENGURUMA => Some("WAZA_KAENGURUMA"),
                    Self::WAZA_IBIKI => Some("WAZA_IBIKI"),
                    Self::WAZA_NOROI => Some("WAZA_NOROI"),
                    Self::WAZA_ZITABATA => Some("WAZA_ZITABATA"),
                    Self::WAZA_TEKUSUTYAA2 => Some("WAZA_TEKUSUTYAA2"),
                    Self::WAZA_EAROBURASUTO => Some("WAZA_EAROBURASUTO"),
                    Self::WAZA_WATAHOUSI => Some("WAZA_WATAHOUSI"),
                    Self::WAZA_KISIKAISEI => Some("WAZA_KISIKAISEI"),
                    Self::WAZA_URAMI => Some("WAZA_URAMI"),
                    Self::WAZA_KONAYUKI => Some("WAZA_KONAYUKI"),
                    Self::WAZA_MAMORU => Some("WAZA_MAMORU"),
                    Self::WAZA_MAHHAPANTI => Some("WAZA_MAHHAPANTI"),
                    Self::WAZA_KOWAIKAO => Some("WAZA_KOWAIKAO"),
                    Self::WAZA_DAMASIUTI => Some("WAZA_DAMASIUTI"),
                    Self::WAZA_TENSINOKISSU => Some("WAZA_TENSINOKISSU"),
                    Self::WAZA_HARADAIKO => Some("WAZA_HARADAIKO"),
                    Self::WAZA_HEDOROBAKUDAN => Some("WAZA_HEDOROBAKUDAN"),
                    Self::WAZA_DOROKAKE => Some("WAZA_DOROKAKE"),
                    Self::WAZA_OKUTANHOU => Some("WAZA_OKUTANHOU"),
                    Self::WAZA_MAKIBISI => Some("WAZA_MAKIBISI"),
                    Self::WAZA_DENZIHOU => Some("WAZA_DENZIHOU"),
                    Self::WAZA_MIYABURU => Some("WAZA_MIYABURU"),
                    Self::WAZA_MITIDURE => Some("WAZA_MITIDURE"),
                    Self::WAZA_HOROBINOUTA => Some("WAZA_HOROBINOUTA"),
                    Self::WAZA_KOGOERUKAZE => Some("WAZA_KOGOERUKAZE"),
                    Self::WAZA_MIKIRI => Some("WAZA_MIKIRI"),
                    Self::WAZA_BOONRASSYU => Some("WAZA_BOONRASSYU"),
                    Self::WAZA_ROKKUON => Some("WAZA_ROKKUON"),
                    Self::WAZA_GEKIRIN => Some("WAZA_GEKIRIN"),
                    Self::WAZA_SUNAARASI => Some("WAZA_SUNAARASI"),
                    Self::WAZA_GIGADOREIN => Some("WAZA_GIGADOREIN"),
                    Self::WAZA_KORAERU => Some("WAZA_KORAERU"),
                    Self::WAZA_AMAERU => Some("WAZA_AMAERU"),
                    Self::WAZA_KOROGARU => Some("WAZA_KOROGARU"),
                    Self::WAZA_MINEUTI => Some("WAZA_MINEUTI"),
                    Self::WAZA_IBARU => Some("WAZA_IBARU"),
                    Self::WAZA_MIRUKUNOMI => Some("WAZA_MIRUKUNOMI"),
                    Self::WAZA_SUPAAKU => Some("WAZA_SUPAAKU"),
                    Self::WAZA_RENZOKUGIRI => Some("WAZA_RENZOKUGIRI"),
                    Self::WAZA_HAGANENOTUBASA => Some("WAZA_HAGANENOTUBASA"),
                    Self::WAZA_KUROIMANAZASI => Some("WAZA_KUROIMANAZASI"),
                    Self::WAZA_MEROMERO => Some("WAZA_MEROMERO"),
                    Self::WAZA_NEGOTO => Some("WAZA_NEGOTO"),
                    Self::WAZA_IYASINOSUZU => Some("WAZA_IYASINOSUZU"),
                    Self::WAZA_ONGAESI => Some("WAZA_ONGAESI"),
                    Self::WAZA_PUREZENTO => Some("WAZA_PUREZENTO"),
                    Self::WAZA_YATUATARI => Some("WAZA_YATUATARI"),
                    Self::WAZA_SINPINOMAMORI => Some("WAZA_SINPINOMAMORI"),
                    Self::WAZA_ITAMIWAKE => Some("WAZA_ITAMIWAKE"),
                    Self::WAZA_SEINARUHONOO => Some("WAZA_SEINARUHONOO"),
                    Self::WAZA_MAGUNITYUUDO => Some("WAZA_MAGUNITYUUDO"),
                    Self::WAZA_BAKURETUPANTI => Some("WAZA_BAKURETUPANTI"),
                    Self::WAZA_MEGAHOON => Some("WAZA_MEGAHOON"),
                    Self::WAZA_RYUUNOIBUKI => Some("WAZA_RYUUNOIBUKI"),
                    Self::WAZA_BATONTATTI => Some("WAZA_BATONTATTI"),
                    Self::WAZA_ANKOORU => Some("WAZA_ANKOORU"),
                    Self::WAZA_OIUTI => Some("WAZA_OIUTI"),
                    Self::WAZA_KOUSOKUSUPIN => Some("WAZA_KOUSOKUSUPIN"),
                    Self::WAZA_AMAIKAORI => Some("WAZA_AMAIKAORI"),
                    Self::WAZA_AIANTEERU => Some("WAZA_AIANTEERU"),
                    Self::WAZA_METARUKUROO => Some("WAZA_METARUKUROO"),
                    Self::WAZA_ATEMINAGE => Some("WAZA_ATEMINAGE"),
                    Self::WAZA_ASANOHIZASI => Some("WAZA_ASANOHIZASI"),
                    Self::WAZA_KOUGOUSEI => Some("WAZA_KOUGOUSEI"),
                    Self::WAZA_TUKINOHIKARI => Some("WAZA_TUKINOHIKARI"),
                    Self::WAZA_MEZAMERUPAWAA => Some("WAZA_MEZAMERUPAWAA"),
                    Self::WAZA_KUROSUTYOPPU => Some("WAZA_KUROSUTYOPPU"),
                    Self::WAZA_TATUMAKI => Some("WAZA_TATUMAKI"),
                    Self::WAZA_AMAGOI => Some("WAZA_AMAGOI"),
                    Self::WAZA_NIHONBARE => Some("WAZA_NIHONBARE"),
                    Self::WAZA_KAMIKUDAKU => Some("WAZA_KAMIKUDAKU"),
                    Self::WAZA_MIRAAKOOTO => Some("WAZA_MIRAAKOOTO"),
                    Self::WAZA_ZIKOANZI => Some("WAZA_ZIKOANZI"),
                    Self::WAZA_SINSOKU => Some("WAZA_SINSOKU"),
                    Self::WAZA_GENSINOTIKARA => Some("WAZA_GENSINOTIKARA"),
                    Self::WAZA_SYADOOBOORU => Some("WAZA_SYADOOBOORU"),
                    Self::WAZA_MIRAIYOTI => Some("WAZA_MIRAIYOTI"),
                    Self::WAZA_IWAKUDAKI => Some("WAZA_IWAKUDAKI"),
                    Self::WAZA_UZUSIO => Some("WAZA_UZUSIO"),
                    Self::WAZA_HUKURODATAKI => Some("WAZA_HUKURODATAKI"),
                    Self::WAZA_NEKODAMASI => Some("WAZA_NEKODAMASI"),
                    Self::WAZA_SAWAGU => Some("WAZA_SAWAGU"),
                    Self::WAZA_TAKUWAERU => Some("WAZA_TAKUWAERU"),
                    Self::WAZA_HAKIDASU => Some("WAZA_HAKIDASU"),
                    Self::WAZA_NOMIKOMU => Some("WAZA_NOMIKOMU"),
                    Self::WAZA_NEPPUU => Some("WAZA_NEPPUU"),
                    Self::WAZA_ARARE => Some("WAZA_ARARE"),
                    Self::WAZA_ITYAMON => Some("WAZA_ITYAMON"),
                    Self::WAZA_ODATERU => Some("WAZA_ODATERU"),
                    Self::WAZA_ONIBI => Some("WAZA_ONIBI"),
                    Self::WAZA_OKIMIYAGE => Some("WAZA_OKIMIYAGE"),
                    Self::WAZA_KARAGENKI => Some("WAZA_KARAGENKI"),
                    Self::WAZA_KIAIPANTI => Some("WAZA_KIAIPANTI"),
                    Self::WAZA_KITUKE => Some("WAZA_KITUKE"),
                    Self::WAZA_KONOYUBITOMARE => Some("WAZA_KONOYUBITOMARE"),
                    Self::WAZA_SIZENNOTIKARA => Some("WAZA_SIZENNOTIKARA"),
                    Self::WAZA_ZYUUDEN => Some("WAZA_ZYUUDEN"),
                    Self::WAZA_TYOUHATU => Some("WAZA_TYOUHATU"),
                    Self::WAZA_TEDASUKE => Some("WAZA_TEDASUKE"),
                    Self::WAZA_TORIKKU => Some("WAZA_TORIKKU"),
                    Self::WAZA_NARIKIRI => Some("WAZA_NARIKIRI"),
                    Self::WAZA_NEGAIGOTO => Some("WAZA_NEGAIGOTO"),
                    Self::WAZA_NEKONOTE => Some("WAZA_NEKONOTE"),
                    Self::WAZA_NEWOHARU => Some("WAZA_NEWOHARU"),
                    Self::WAZA_BAKADIKARA => Some("WAZA_BAKADIKARA"),
                    Self::WAZA_MAZIKKUKOOTO => Some("WAZA_MAZIKKUKOOTO"),
                    Self::WAZA_RISAIKURU => Some("WAZA_RISAIKURU"),
                    Self::WAZA_RIBENZI => Some("WAZA_RIBENZI"),
                    Self::WAZA_KAWARAWARI => Some("WAZA_KAWARAWARI"),
                    Self::WAZA_AKUBI => Some("WAZA_AKUBI"),
                    Self::WAZA_HATAKIOTOSU => Some("WAZA_HATAKIOTOSU"),
                    Self::WAZA_GAMUSYARA => Some("WAZA_GAMUSYARA"),
                    Self::WAZA_HUNKA => Some("WAZA_HUNKA"),
                    Self::WAZA_SUKIRUSUWAPPU => Some("WAZA_SUKIRUSUWAPPU"),
                    Self::WAZA_HUUIN => Some("WAZA_HUUIN"),
                    Self::WAZA_RIHURESSYU => Some("WAZA_RIHURESSYU"),
                    Self::WAZA_ONNEN => Some("WAZA_ONNEN"),
                    Self::WAZA_YOKODORI => Some("WAZA_YOKODORI"),
                    Self::WAZA_HIMITUNOTIKARA => Some("WAZA_HIMITUNOTIKARA"),
                    Self::WAZA_DAIBINGU => Some("WAZA_DAIBINGU"),
                    Self::WAZA_TUPPARI => Some("WAZA_TUPPARI"),
                    Self::WAZA_HOGOSYOKU => Some("WAZA_HOGOSYOKU"),
                    Self::WAZA_HOTARUBI => Some("WAZA_HOTARUBI"),
                    Self::WAZA_RASUTAAPAAZI => Some("WAZA_RASUTAAPAAZI"),
                    Self::WAZA_MISUTOBOORU => Some("WAZA_MISUTOBOORU"),
                    Self::WAZA_FEZAADANSU => Some("WAZA_FEZAADANSU"),
                    Self::WAZA_HURAHURADANSU => Some("WAZA_HURAHURADANSU"),
                    Self::WAZA_BUREIZUKIKKU => Some("WAZA_BUREIZUKIKKU"),
                    Self::WAZA_DOROASOBI => Some("WAZA_DOROASOBI"),
                    Self::WAZA_AISUBOORU => Some("WAZA_AISUBOORU"),
                    Self::WAZA_NIIDORUAAMU => Some("WAZA_NIIDORUAAMU"),
                    Self::WAZA_NAMAKERU => Some("WAZA_NAMAKERU"),
                    Self::WAZA_HAIPAABOISU => Some("WAZA_HAIPAABOISU"),
                    Self::WAZA_DOKUDOKUNOKIBA => Some("WAZA_DOKUDOKUNOKIBA"),
                    Self::WAZA_BUREIKUKUROO => Some("WAZA_BUREIKUKUROO"),
                    Self::WAZA_BURASUTOBAAN => Some("WAZA_BURASUTOBAAN"),
                    Self::WAZA_HAIDOROKANON => Some("WAZA_HAIDOROKANON"),
                    Self::WAZA_KOMETTOPANTI => Some("WAZA_KOMETTOPANTI"),
                    Self::WAZA_ODOROKASU => Some("WAZA_ODOROKASU"),
                    Self::WAZA_WHEZAABOORU => Some("WAZA_WHEZAABOORU"),
                    Self::WAZA_AROMASERAPII => Some("WAZA_AROMASERAPII"),
                    Self::WAZA_USONAKI => Some("WAZA_USONAKI"),
                    Self::WAZA_EAKATTAA => Some("WAZA_EAKATTAA"),
                    Self::WAZA_OOBAAHIITO => Some("WAZA_OOBAAHIITO"),
                    Self::WAZA_KAGIWAKERU => Some("WAZA_KAGIWAKERU"),
                    Self::WAZA_GANSEKIHUUZI => Some("WAZA_GANSEKIHUUZI"),
                    Self::WAZA_GINIRONOKAZE => Some("WAZA_GINIRONOKAZE"),
                    Self::WAZA_KINZOKUON => Some("WAZA_KINZOKUON"),
                    Self::WAZA_KUSABUE => Some("WAZA_KUSABUE"),
                    Self::WAZA_KUSUGURU => Some("WAZA_KUSUGURU"),
                    Self::WAZA_KOSUMOPAWAA => Some("WAZA_KOSUMOPAWAA"),
                    Self::WAZA_SIOHUKI => Some("WAZA_SIOHUKI"),
                    Self::WAZA_SIGUNARUBIIMU => Some("WAZA_SIGUNARUBIIMU"),
                    Self::WAZA_SYADOOPANTI => Some("WAZA_SYADOOPANTI"),
                    Self::WAZA_ZINTUURIKI => Some("WAZA_ZINTUURIKI"),
                    Self::WAZA_SUKAIAPPAA => Some("WAZA_SUKAIAPPAA"),
                    Self::WAZA_SUNAZIGOKU => Some("WAZA_SUNAZIGOKU"),
                    Self::WAZA_ZETTAIREIDO => Some("WAZA_ZETTAIREIDO"),
                    Self::WAZA_DAKURYUU => Some("WAZA_DAKURYUU"),
                    Self::WAZA_TANEMASINGAN => Some("WAZA_TANEMASINGAN"),
                    Self::WAZA_TUBAMEGAESI => Some("WAZA_TUBAMEGAESI"),
                    Self::WAZA_TURARABARI => Some("WAZA_TURARABARI"),
                    Self::WAZA_TEPPEKI => Some("WAZA_TEPPEKI"),
                    Self::WAZA_TOOSENBOU => Some("WAZA_TOOSENBOU"),
                    Self::WAZA_TOOBOE => Some("WAZA_TOOBOE"),
                    Self::WAZA_DORAGONKUROO => Some("WAZA_DORAGONKUROO"),
                    Self::WAZA_HAADOPURANTO => Some("WAZA_HAADOPURANTO"),
                    Self::WAZA_BIRUDOAPPU => Some("WAZA_BIRUDOAPPU"),
                    Self::WAZA_TOBIHANERU => Some("WAZA_TOBIHANERU"),
                    Self::WAZA_MADDOSYOTTO => Some("WAZA_MADDOSYOTTO"),
                    Self::WAZA_POIZUNTEERU => Some("WAZA_POIZUNTEERU"),
                    Self::WAZA_HOSIGARU => Some("WAZA_HOSIGARU"),
                    Self::WAZA_BORUTEKKAA => Some("WAZA_BORUTEKKAA"),
                    Self::WAZA_MAZIKARURIIHU => Some("WAZA_MAZIKARURIIHU"),
                    Self::WAZA_MIZUASOBI => Some("WAZA_MIZUASOBI"),
                    Self::WAZA_MEISOU => Some("WAZA_MEISOU"),
                    Self::WAZA_RIIHUBUREEDO => Some("WAZA_RIIHUBUREEDO"),
                    Self::WAZA_RYUUNOMAI => Some("WAZA_RYUUNOMAI"),
                    Self::WAZA_ROKKUBURASUTO => Some("WAZA_ROKKUBURASUTO"),
                    Self::WAZA_DENGEKIHA => Some("WAZA_DENGEKIHA"),
                    Self::WAZA_MIZUNOHADOU => Some("WAZA_MIZUNOHADOU"),
                    Self::WAZA_HAMETUNONEGAI => Some("WAZA_HAMETUNONEGAI"),
                    Self::WAZA_SAIKOBUUSUTO => Some("WAZA_SAIKOBUUSUTO"),
                    Self::WAZA_HANEYASUME => Some("WAZA_HANEYASUME"),
                    Self::WAZA_ZYUURYOKU => Some("WAZA_ZYUURYOKU"),
                    Self::WAZA_MIRAKURUAI => Some("WAZA_MIRAKURUAI"),
                    Self::WAZA_MEZAMASIBINTA => Some("WAZA_MEZAMASIBINTA"),
                    Self::WAZA_AAMUHANMAA => Some("WAZA_AAMUHANMAA"),
                    Self::WAZA_ZYAIROBOORU => Some("WAZA_ZYAIROBOORU"),
                    Self::WAZA_IYASINONEGAI => Some("WAZA_IYASINONEGAI"),
                    Self::WAZA_SIOMIZU => Some("WAZA_SIOMIZU"),
                    Self::WAZA_SIZENNOMEGUMI => Some("WAZA_SIZENNOMEGUMI"),
                    Self::WAZA_FEINTO => Some("WAZA_FEINTO"),
                    Self::WAZA_TUIBAMU => Some("WAZA_TUIBAMU"),
                    Self::WAZA_OIKAZE => Some("WAZA_OIKAZE"),
                    Self::WAZA_TUBOWOTUKU => Some("WAZA_TUBOWOTUKU"),
                    Self::WAZA_METARUBAASUTO => Some("WAZA_METARUBAASUTO"),
                    Self::WAZA_TONBOGAERI => Some("WAZA_TONBOGAERI"),
                    Self::WAZA_INFAITO => Some("WAZA_INFAITO"),
                    Self::WAZA_SIPPEGAESI => Some("WAZA_SIPPEGAESI"),
                    Self::WAZA_DAMEOSI => Some("WAZA_DAMEOSI"),
                    Self::WAZA_SASIOSAE => Some("WAZA_SASIOSAE"),
                    Self::WAZA_NAGETUKERU => Some("WAZA_NAGETUKERU"),
                    Self::WAZA_SAIKOSIHUTO => Some("WAZA_SAIKOSIHUTO"),
                    Self::WAZA_KIRIHUDA => Some("WAZA_KIRIHUDA"),
                    Self::WAZA_KAIHUKUHUUZI => Some("WAZA_KAIHUKUHUUZI"),
                    Self::WAZA_SIBORITORU => Some("WAZA_SIBORITORU"),
                    Self::WAZA_PAWAATORIKKU => Some("WAZA_PAWAATORIKKU"),
                    Self::WAZA_IEKI => Some("WAZA_IEKI"),
                    Self::WAZA_OMAZINAI => Some("WAZA_OMAZINAI"),
                    Self::WAZA_SAKIDORI => Some("WAZA_SAKIDORI"),
                    Self::WAZA_MANEKKO => Some("WAZA_MANEKKO"),
                    Self::WAZA_PAWAASUWAPPU => Some("WAZA_PAWAASUWAPPU"),
                    Self::WAZA_GAADOSUWAPPU => Some("WAZA_GAADOSUWAPPU"),
                    Self::WAZA_OSIOKI => Some("WAZA_OSIOKI"),
                    Self::WAZA_TOTTEOKI => Some("WAZA_TOTTEOKI"),
                    Self::WAZA_NAYAMINOTANE => Some("WAZA_NAYAMINOTANE"),
                    Self::WAZA_HUIUTI => Some("WAZA_HUIUTI"),
                    Self::WAZA_DOKUBISI => Some("WAZA_DOKUBISI"),
                    Self::WAZA_HAATOSUWAPPU => Some("WAZA_HAATOSUWAPPU"),
                    Self::WAZA_AKUARINGU => Some("WAZA_AKUARINGU"),
                    Self::WAZA_DENZIHUYUU => Some("WAZA_DENZIHUYUU"),
                    Self::WAZA_HUREADORAIBU => Some("WAZA_HUREADORAIBU"),
                    Self::WAZA_HAKKEI => Some("WAZA_HAKKEI"),
                    Self::WAZA_HADOUDAN => Some("WAZA_HADOUDAN"),
                    Self::WAZA_ROKKUKATTO => Some("WAZA_ROKKUKATTO"),
                    Self::WAZA_DOKUDUKI => Some("WAZA_DOKUDUKI"),
                    Self::WAZA_AKUNOHADOU => Some("WAZA_AKUNOHADOU"),
                    Self::WAZA_TUZIGIRI => Some("WAZA_TUZIGIRI"),
                    Self::WAZA_AKUATEERU => Some("WAZA_AKUATEERU"),
                    Self::WAZA_TANEBAKUDAN => Some("WAZA_TANEBAKUDAN"),
                    Self::WAZA_EASURASSYU => Some("WAZA_EASURASSYU"),
                    Self::WAZA_SIZAAKUROSU => Some("WAZA_SIZAAKUROSU"),
                    Self::WAZA_MUSINOSAZAMEKI => Some("WAZA_MUSINOSAZAMEKI"),
                    Self::WAZA_RYUUNOHADOU => Some("WAZA_RYUUNOHADOU"),
                    Self::WAZA_DORAGONDAIBU => Some("WAZA_DORAGONDAIBU"),
                    Self::WAZA_PAWAAJEMU => Some("WAZA_PAWAAJEMU"),
                    Self::WAZA_DOREINPANTI => Some("WAZA_DOREINPANTI"),
                    Self::WAZA_SINKUUHA => Some("WAZA_SINKUUHA"),
                    Self::WAZA_KIAIDAMA => Some("WAZA_KIAIDAMA"),
                    Self::WAZA_ENAZIIBOORU => Some("WAZA_ENAZIIBOORU"),
                    Self::WAZA_BUREIBUBAADO => Some("WAZA_BUREIBUBAADO"),
                    Self::WAZA_DAITINOTIKARA => Some("WAZA_DAITINOTIKARA"),
                    Self::WAZA_SURIKAE => Some("WAZA_SURIKAE"),
                    Self::WAZA_GIGAINPAKUTO => Some("WAZA_GIGAINPAKUTO"),
                    Self::WAZA_WARUDAKUMI => Some("WAZA_WARUDAKUMI"),
                    Self::WAZA_BARETTOPANTI => Some("WAZA_BARETTOPANTI"),
                    Self::WAZA_YUKINADARE => Some("WAZA_YUKINADARE"),
                    Self::WAZA_KOORINOTUBUTE => Some("WAZA_KOORINOTUBUTE"),
                    Self::WAZA_SYADOOKUROO => Some("WAZA_SYADOOKUROO"),
                    Self::WAZA_KAMINARINOKIBA => Some("WAZA_KAMINARINOKIBA"),
                    Self::WAZA_KOORINOKIBA => Some("WAZA_KOORINOKIBA"),
                    Self::WAZA_HONOONOKIBA => Some("WAZA_HONOONOKIBA"),
                    Self::WAZA_KAGEUTI => Some("WAZA_KAGEUTI"),
                    Self::WAZA_DOROBAKUDAN => Some("WAZA_DOROBAKUDAN"),
                    Self::WAZA_SAIKOKATTAA => Some("WAZA_SAIKOKATTAA"),
                    Self::WAZA_SINENNOZUTUKI => Some("WAZA_SINENNOZUTUKI"),
                    Self::WAZA_MIRAASYOTTO => Some("WAZA_MIRAASYOTTO"),
                    Self::WAZA_RASUTAAKANON => Some("WAZA_RASUTAAKANON"),
                    Self::WAZA_ROKKUKURAIMU => Some("WAZA_ROKKUKURAIMU"),
                    Self::WAZA_KIRIBARAI => Some("WAZA_KIRIBARAI"),
                    Self::WAZA_TORIKKURUUMU => Some("WAZA_TORIKKURUUMU"),
                    Self::WAZA_RYUUSEIGUN => Some("WAZA_RYUUSEIGUN"),
                    Self::WAZA_HOUDEN => Some("WAZA_HOUDEN"),
                    Self::WAZA_HUNEN => Some("WAZA_HUNEN"),
                    Self::WAZA_RIIHUSUTOOMU => Some("WAZA_RIIHUSUTOOMU"),
                    Self::WAZA_PAWAAWHIPPU => Some("WAZA_PAWAAWHIPPU"),
                    Self::WAZA_GANSEKIHOU => Some("WAZA_GANSEKIHOU"),
                    Self::WAZA_KUROSUPOIZUN => Some("WAZA_KUROSUPOIZUN"),
                    Self::WAZA_DASUTOSYUUTO => Some("WAZA_DASUTOSYUUTO"),
                    Self::WAZA_AIANHEDDO => Some("WAZA_AIANHEDDO"),
                    Self::WAZA_MAGUNETTOBOMU => Some("WAZA_MAGUNETTOBOMU"),
                    Self::WAZA_SUTOONEZZI => Some("WAZA_SUTOONEZZI"),
                    Self::WAZA_YUUWAKU => Some("WAZA_YUUWAKU"),
                    Self::WAZA_SUTERUSUROKKU => Some("WAZA_SUTERUSUROKKU"),
                    Self::WAZA_KUSAMUSUBI => Some("WAZA_KUSAMUSUBI"),
                    Self::WAZA_OSYABERI => Some("WAZA_OSYABERI"),
                    Self::WAZA_SABAKINOTUBUTE => Some("WAZA_SABAKINOTUBUTE"),
                    Self::WAZA_MUSIKUI => Some("WAZA_MUSIKUI"),
                    Self::WAZA_TYAAZIBIIMU => Some("WAZA_TYAAZIBIIMU"),
                    Self::WAZA_UDDOHANMAA => Some("WAZA_UDDOHANMAA"),
                    Self::WAZA_AKUAJETTO => Some("WAZA_AKUAJETTO"),
                    Self::WAZA_KOUGEKISIREI => Some("WAZA_KOUGEKISIREI"),
                    Self::WAZA_BOUGYOSIREI => Some("WAZA_BOUGYOSIREI"),
                    Self::WAZA_KAIHUKUSIREI => Some("WAZA_KAIHUKUSIREI"),
                    Self::WAZA_MOROHANOZUTUKI => Some("WAZA_MOROHANOZUTUKI"),
                    Self::WAZA_DABURUATAKKU => Some("WAZA_DABURUATAKKU"),
                    Self::WAZA_TOKINOHOUKOU => Some("WAZA_TOKINOHOUKOU"),
                    Self::WAZA_AKUUSETUDAN => Some("WAZA_AKUUSETUDAN"),
                    Self::WAZA_MIKADUKINOMAI => Some("WAZA_MIKADUKINOMAI"),
                    Self::WAZA_NIGIRITUBUSU => Some("WAZA_NIGIRITUBUSU"),
                    Self::WAZA_MAGUMASUTOOMU => Some("WAZA_MAGUMASUTOOMU"),
                    Self::WAZA_DAAKUHOORU => Some("WAZA_DAAKUHOORU"),
                    Self::WAZA_SIIDOHUREA => Some("WAZA_SIIDOHUREA"),
                    Self::WAZA_AYASIIKAZE => Some("WAZA_AYASIIKAZE"),
                    Self::WAZA_SYADOODAIBU => Some("WAZA_SYADOODAIBU"),
                    Self::WAZA_TUMETOGI => Some("WAZA_TUMETOGI"),
                    Self::WAZA_WAIDOGAADO => Some("WAZA_WAIDOGAADO"),
                    Self::WAZA_GAADOSHEA => Some("WAZA_GAADOSHEA"),
                    Self::WAZA_PAWAASHEA => Some("WAZA_PAWAASHEA"),
                    Self::WAZA_WANDAARUUMU => Some("WAZA_WANDAARUUMU"),
                    Self::WAZA_SAIKOSYOKKU => Some("WAZA_SAIKOSYOKKU"),
                    Self::WAZA_BENOMUSYOKKU => Some("WAZA_BENOMUSYOKKU"),
                    Self::WAZA_BODHIPAAZI => Some("WAZA_BODHIPAAZI"),
                    Self::WAZA_IKARINOKONA => Some("WAZA_IKARINOKONA"),
                    Self::WAZA_TEREKINESISU => Some("WAZA_TEREKINESISU"),
                    Self::WAZA_MAZIKKURUUMU => Some("WAZA_MAZIKKURUUMU"),
                    Self::WAZA_UTIOTOSU => Some("WAZA_UTIOTOSU"),
                    Self::WAZA_YAMAARASI => Some("WAZA_YAMAARASI"),
                    Self::WAZA_HAZIKERUHONOO => Some("WAZA_HAZIKERUHONOO"),
                    Self::WAZA_HEDOROWHEEBU => Some("WAZA_HEDOROWHEEBU"),
                    Self::WAZA_TYOUNOMAI => Some("WAZA_TYOUNOMAI"),
                    Self::WAZA_HEBIIBONBAA => Some("WAZA_HEBIIBONBAA"),
                    Self::WAZA_SINKURONOIZU => Some("WAZA_SINKURONOIZU"),
                    Self::WAZA_EREKIBOORU => Some("WAZA_EREKIBOORU"),
                    Self::WAZA_MIZUBITASI => Some("WAZA_MIZUBITASI"),
                    Self::WAZA_NITOROTYAAZI => Some("WAZA_NITOROTYAAZI"),
                    Self::WAZA_TOGUROWOMAKU => Some("WAZA_TOGUROWOMAKU"),
                    Self::WAZA_ROOKIKKU => Some("WAZA_ROOKIKKU"),
                    Self::WAZA_ASIDDOBOMU => Some("WAZA_ASIDDOBOMU"),
                    Self::WAZA_IKASAMA => Some("WAZA_IKASAMA"),
                    Self::WAZA_SINPURUBIIMU => Some("WAZA_SINPURUBIIMU"),
                    Self::WAZA_NAKAMADUKURI => Some("WAZA_NAKAMADUKURI"),
                    Self::WAZA_OSAKINIDOUZO => Some("WAZA_OSAKINIDOUZO"),
                    Self::WAZA_RINSYOU => Some("WAZA_RINSYOU"),
                    Self::WAZA_EKOOBOISU => Some("WAZA_EKOOBOISU"),
                    Self::WAZA_NASIKUZUSI => Some("WAZA_NASIKUZUSI"),
                    Self::WAZA_KURIASUMOGGU => Some("WAZA_KURIASUMOGGU"),
                    Self::WAZA_ASISUTOPAWAA => Some("WAZA_ASISUTOPAWAA"),
                    Self::WAZA_FASUTOGAADO => Some("WAZA_FASUTOGAADO"),
                    Self::WAZA_SAIDOTHENZI => Some("WAZA_SAIDOTHENZI"),
                    Self::WAZA_NETTOU => Some("WAZA_NETTOU"),
                    Self::WAZA_KARAWOYABURU => Some("WAZA_KARAWOYABURU"),
                    Self::WAZA_IYASINOHADOU => Some("WAZA_IYASINOHADOU"),
                    Self::WAZA_TATARIME => Some("WAZA_TATARIME"),
                    Self::WAZA_HURIIFOORU => Some("WAZA_HURIIFOORU"),
                    Self::WAZA_GIATHENZI => Some("WAZA_GIATHENZI"),
                    Self::WAZA_TOMOENAGE => Some("WAZA_TOMOENAGE"),
                    Self::WAZA_YAKITUKUSU => Some("WAZA_YAKITUKUSU"),
                    Self::WAZA_SAKIOKURI => Some("WAZA_SAKIOKURI"),
                    Self::WAZA_AKUROBATTO => Some("WAZA_AKUROBATTO"),
                    Self::WAZA_MIRAATAIPU => Some("WAZA_MIRAATAIPU"),
                    Self::WAZA_KATAKIUTI => Some("WAZA_KATAKIUTI"),
                    Self::WAZA_INOTIGAKE => Some("WAZA_INOTIGAKE"),
                    Self::WAZA_GIHUTOPASU => Some("WAZA_GIHUTOPASU"),
                    Self::WAZA_RENGOKU => Some("WAZA_RENGOKU"),
                    Self::WAZA_MIZUNOTIKAI => Some("WAZA_MIZUNOTIKAI"),
                    Self::WAZA_HONOONOTIKAI => Some("WAZA_HONOONOTIKAI"),
                    Self::WAZA_KUSANOTIKAI => Some("WAZA_KUSANOTIKAI"),
                    Self::WAZA_BORUTOTHENZI => Some("WAZA_BORUTOTHENZI"),
                    Self::WAZA_MUSINOTEIKOU => Some("WAZA_MUSINOTEIKOU"),
                    Self::WAZA_ZINARASI => Some("WAZA_ZINARASI"),
                    Self::WAZA_KOORINOIBUKI => Some("WAZA_KOORINOIBUKI"),
                    Self::WAZA_DORAGONTEERU => Some("WAZA_DORAGONTEERU"),
                    Self::WAZA_HURUITATERU => Some("WAZA_HURUITATERU"),
                    Self::WAZA_EREKINETTO => Some("WAZA_EREKINETTO"),
                    Self::WAZA_WAIRUDOBORUTO => Some("WAZA_WAIRUDOBORUTO"),
                    Self::WAZA_DORIRURAINAA => Some("WAZA_DORIRURAINAA"),
                    Self::WAZA_DABURUTYOPPU => Some("WAZA_DABURUTYOPPU"),
                    Self::WAZA_HAATOSUTANPU => Some("WAZA_HAATOSUTANPU"),
                    Self::WAZA_UDDOHOON => Some("WAZA_UDDOHOON"),
                    Self::WAZA_SEINARUTURUGI => Some("WAZA_SEINARUTURUGI"),
                    Self::WAZA_SHERUBUREEDO => Some("WAZA_SHERUBUREEDO"),
                    Self::WAZA_HIITOSUTANPU => Some("WAZA_HIITOSUTANPU"),
                    Self::WAZA_GURASUMIKISAA => Some("WAZA_GURASUMIKISAA"),
                    Self::WAZA_HAADOROORAA => Some("WAZA_HAADOROORAA"),
                    Self::WAZA_KOTTONGAADO => Some("WAZA_KOTTONGAADO"),
                    Self::WAZA_NAITOBAASUTO => Some("WAZA_NAITOBAASUTO"),
                    Self::WAZA_SAIKOBUREIKU => Some("WAZA_SAIKOBUREIKU"),
                    Self::WAZA_SUIIPUBINTA => Some("WAZA_SUIIPUBINTA"),
                    Self::WAZA_BOUHUU => Some("WAZA_BOUHUU"),
                    Self::WAZA_AHUROBUREIKU => Some("WAZA_AHUROBUREIKU"),
                    Self::WAZA_GIASOOSAA => Some("WAZA_GIASOOSAA"),
                    Self::WAZA_KAENDAN => Some("WAZA_KAENDAN"),
                    Self::WAZA_TEKUNOBASUTAA => Some("WAZA_TEKUNOBASUTAA"),
                    Self::WAZA_INISIENOUTA => Some("WAZA_INISIENOUTA"),
                    Self::WAZA_SINPINOTURUGI => Some("WAZA_SINPINOTURUGI"),
                    Self::WAZA_KOGOERUSEKAI => Some("WAZA_KOGOERUSEKAI"),
                    Self::WAZA_RAIGEKI => Some("WAZA_RAIGEKI"),
                    Self::WAZA_AOIHONOO => Some("WAZA_AOIHONOO"),
                    Self::WAZA_HONOONOMAI => Some("WAZA_HONOONOMAI"),
                    Self::WAZA_HURIIZUBORUTO => Some("WAZA_HURIIZUBORUTO"),
                    Self::WAZA_KOORUDOHUREA => Some("WAZA_KOORUDOHUREA"),
                    Self::WAZA_BAAKUAUTO => Some("WAZA_BAAKUAUTO"),
                    Self::WAZA_TURARAOTOSI => Some("WAZA_TURARAOTOSI"),
                    Self::WAZA_vJENEREETO => Some("WAZA_vJENEREETO"),
                    Self::WAZA_KUROSUHUREIMU => Some("WAZA_KUROSUHUREIMU"),
                    Self::WAZA_KUROSUSANDAA => Some("WAZA_KUROSUSANDAA"),
                    Self::WAZA_HURAINGUPURESU => Some("WAZA_HURAINGUPURESU"),
                    Self::WAZA_TATAMIGAESI => Some("WAZA_TATAMIGAESI"),
                    Self::WAZA_GEPPU => Some("WAZA_GEPPU"),
                    Self::WAZA_TAGAYASU => Some("WAZA_TAGAYASU"),
                    Self::WAZA_NEBANEBANETTO => Some("WAZA_NEBANEBANETTO"),
                    Self::WAZA_TODOMEBARI => Some("WAZA_TODOMEBARI"),
                    Self::WAZA_GOOSUTODAIBU => Some("WAZA_GOOSUTODAIBU"),
                    Self::WAZA_HAROWHIN => Some("WAZA_HAROWHIN"),
                    Self::WAZA_OTAKEBI => Some("WAZA_OTAKEBI"),
                    Self::WAZA_PURAZUMASYAWAA => Some("WAZA_PURAZUMASYAWAA"),
                    Self::WAZA_PARABORATYAAZI => Some("WAZA_PARABORATYAAZI"),
                    Self::WAZA_MORINONOROI => Some("WAZA_MORINONOROI"),
                    Self::WAZA_HANAHUBUKI => Some("WAZA_HANAHUBUKI"),
                    Self::WAZA_HURIIZUDORAI => Some("WAZA_HURIIZUDORAI"),
                    Self::WAZA_TYAAMUBOISU => Some("WAZA_TYAAMUBOISU"),
                    Self::WAZA_SUTEZERIHU => Some("WAZA_SUTEZERIHU"),
                    Self::WAZA_HIKKURIKAESU => Some("WAZA_HIKKURIKAESU"),
                    Self::WAZA_DOREINKISSU => Some("WAZA_DOREINKISSU"),
                    Self::WAZA_TORIKKUGAADO => Some("WAZA_TORIKKUGAADO"),
                    Self::WAZA_HURAWAAGAADO => Some("WAZA_HURAWAAGAADO"),
                    Self::WAZA_GURASUFIIRUDO => Some("WAZA_GURASUFIIRUDO"),
                    Self::WAZA_MISUTOFIIRUDO => Some("WAZA_MISUTOFIIRUDO"),
                    Self::WAZA_SOUDEN => Some("WAZA_SOUDEN"),
                    Self::WAZA_ZYARETUKU => Some("WAZA_ZYARETUKU"),
                    Self::WAZA_YOUSEINOKAZE => Some("WAZA_YOUSEINOKAZE"),
                    Self::WAZA_MUUNFOOSU => Some("WAZA_MUUNFOOSU"),
                    Self::WAZA_BAKUONPA => Some("WAZA_BAKUONPA"),
                    Self::WAZA_FEARIIROKKU => Some("WAZA_FEARIIROKKU"),
                    Self::WAZA_KINGUSIIRUDO => Some("WAZA_KINGUSIIRUDO"),
                    Self::WAZA_NAKAYOKUSURU => Some("WAZA_NAKAYOKUSURU"),
                    Self::WAZA_NAISYOBANASI => Some("WAZA_NAISYOBANASI"),
                    Self::WAZA_DAIYASUTOOMU => Some("WAZA_DAIYASUTOOMU"),
                    Self::WAZA_SUTIIMUBAASUTO => Some("WAZA_SUTIIMUBAASUTO"),
                    Self::WAZA_IZIGENHOORU => Some("WAZA_IZIGENHOORU"),
                    Self::WAZA_MIZUSYURIKEN => Some("WAZA_MIZUSYURIKEN"),
                    Self::WAZA_MAZIKARUHUREIMU => Some("WAZA_MAZIKARUHUREIMU"),
                    Self::WAZA_NIIDORUGAADO => Some("WAZA_NIIDORUGAADO"),
                    Self::WAZA_AROMAMISUTO => Some("WAZA_AROMAMISUTO"),
                    Self::WAZA_KAIDENPA => Some("WAZA_KAIDENPA"),
                    Self::WAZA_BENOMUTORAPPU => Some("WAZA_BENOMUTORAPPU"),
                    Self::WAZA_HUNZIN => Some("WAZA_HUNZIN"),
                    Self::WAZA_ZIOKONTOROORU => Some("WAZA_ZIOKONTOROORU"),
                    Self::WAZA_ZIBASOUSA => Some("WAZA_ZIBASOUSA"),
                    Self::WAZA_HAPPIITAIMU => Some("WAZA_HAPPIITAIMU"),
                    Self::WAZA_EREKIFIIRUDO => Some("WAZA_EREKIFIIRUDO"),
                    Self::WAZA_MAZIKARUSYAIN => Some("WAZA_MAZIKARUSYAIN"),
                    Self::WAZA_OIWAI => Some("WAZA_OIWAI"),
                    Self::WAZA_TEWOTUNAGU => Some("WAZA_TEWOTUNAGU"),
                    Self::WAZA_TUBURANAHITOMI => Some("WAZA_TUBURANAHITOMI"),
                    Self::WAZA_HOPPESURISURI => Some("WAZA_HOPPESURISURI"),
                    Self::WAZA_TEKAGEN => Some("WAZA_TEKAGEN"),
                    Self::WAZA_MATOWARITUKU => Some("WAZA_MATOWARITUKU"),
                    Self::WAZA_GUROUPANTI => Some("WAZA_GUROUPANTI"),
                    Self::WAZA_DESUUINGU => Some("WAZA_DESUUINGU"),
                    Self::WAZA_SAUZANAROO => Some("WAZA_SAUZANAROO"),
                    Self::WAZA_SAUZANWHEEBU => Some("WAZA_SAUZANWHEEBU"),
                    Self::WAZA_GURANDOFOOSU => Some("WAZA_GURANDOFOOSU"),
                    Self::WAZA_HAMETUNOHIKARI => Some("WAZA_HAMETUNOHIKARI"),
                    Self::WAZA_KONGENNOHADOU => Some("WAZA_KONGENNOHADOU"),
                    Self::WAZA_DANGAINOTURUGI => Some("WAZA_DANGAINOTURUGI"),
                    Self::WAZA_GARYOUTENSEI => Some("WAZA_GARYOUTENSEI"),
                    Self::WAZA_IZIGENRASSYU => Some("WAZA_IZIGENRASSYU"),
                    Self::WAZA_URUTORADASSYUATAKKU => Some("WAZA_URUTORADASSYUATAKKU"),
                    Self::WAZA_NOOMARUZENRYOKU => Some("WAZA_NOOMARUZENRYOKU"),
                    Self::WAZA_ZENRYOKUMUSOUGEKIRETUKEN => Some("WAZA_ZENRYOKUMUSOUGEKIRETUKEN"),
                    Self::WAZA_KAKUTOUZENRYOKU => Some("WAZA_KAKUTOUZENRYOKU"),
                    Self::WAZA_FAINARUDAIBUKURASSYU => Some("WAZA_FAINARUDAIBUKURASSYU"),
                    Self::WAZA_HIKOUZENRYOKU => Some("WAZA_HIKOUZENRYOKU"),
                    Self::WAZA_ASIDDOPOIZUNDERIITO => Some("WAZA_ASIDDOPOIZUNDERIITO"),
                    Self::WAZA_DOKUZENRYOKU => Some("WAZA_DOKUZENRYOKU"),
                    Self::WAZA_RAIZINGURANDOOOBAA => Some("WAZA_RAIZINGURANDOOOBAA"),
                    Self::WAZA_ZIMENZENRYOKU => Some("WAZA_ZIMENZENRYOKU"),
                    Self::WAZA_WAARUZUENDOFOORU => Some("WAZA_WAARUZUENDOFOORU"),
                    Self::WAZA_IWAZENRYOKU => Some("WAZA_IWAZENRYOKU"),
                    Self::WAZA_ZETTAIHOSYOKUKAITENZAN => Some("WAZA_ZETTAIHOSYOKUKAITENZAN"),
                    Self::WAZA_MUSIZENRYOKU => Some("WAZA_MUSIZENRYOKU"),
                    Self::WAZA_MUGENANYAHENOIZANAI => Some("WAZA_MUGENANYAHENOIZANAI"),
                    Self::WAZA_GOOSUTOZENRYOKU => Some("WAZA_GOOSUTOZENRYOKU"),
                    Self::WAZA_TYOUZETURASENRENGEKI => Some("WAZA_TYOUZETURASENRENGEKI"),
                    Self::WAZA_HAGANEZENRYOKU => Some("WAZA_HAGANEZENRYOKU"),
                    Self::WAZA_DAINAMIKKUHURUHUREIMU => Some("WAZA_DAINAMIKKUHURUHUREIMU"),
                    Self::WAZA_HONOOZENRYOKU => Some("WAZA_HONOOZENRYOKU"),
                    Self::WAZA_SUUPAAAKUATORUNEEDO => Some("WAZA_SUUPAAAKUATORUNEEDO"),
                    Self::WAZA_MIZUZENRYOKU => Some("WAZA_MIZUZENRYOKU"),
                    Self::WAZA_BURUUMUSYAINEKUSUTORA => Some("WAZA_BURUUMUSYAINEKUSUTORA"),
                    Self::WAZA_KUSAZENRYOKU => Some("WAZA_KUSAZENRYOKU"),
                    Self::WAZA_SUPAAKINGUGIGABORUTO => Some("WAZA_SUPAAKINGUGIGABORUTO"),
                    Self::WAZA_DENKIZENRYOKU => Some("WAZA_DENKIZENRYOKU"),
                    Self::WAZA_MAKISIMAMUSAIBUREIKAA => Some("WAZA_MAKISIMAMUSAIBUREIKAA"),
                    Self::WAZA_ESUPAAZENRYOKU => Some("WAZA_ESUPAAZENRYOKU"),
                    Self::WAZA_REIZINGUZIOHURIIZU => Some("WAZA_REIZINGUZIOHURIIZU"),
                    Self::WAZA_KOORIZENRYOKU => Some("WAZA_KOORIZENRYOKU"),
                    Self::WAZA_ARUTHIMETTODORAGONBAAN => Some("WAZA_ARUTHIMETTODORAGONBAAN"),
                    Self::WAZA_DORAGONZENRYOKU => Some("WAZA_DORAGONZENRYOKU"),
                    Self::WAZA_BURAKKUHOORUIKURIPUSU => Some("WAZA_BURAKKUHOORUIKURIPUSU"),
                    Self::WAZA_AKUZENRYOKU => Some("WAZA_AKUZENRYOKU"),
                    Self::WAZA_RABURIISUTAAINPAKUTO => Some("WAZA_RABURIISUTAAINPAKUTO"),
                    Self::WAZA_FEARIIZENRYOKU => Some("WAZA_FEARIIZENRYOKU"),
                    Self::WAZA_HISSATUNOPIKATYUUTO => Some("WAZA_HISSATUNOPIKATYUUTO"),
                    Self::WAZA_SUNAATUME => Some("WAZA_SUNAATUME"),
                    Self::WAZA_DEAIGASIRA => Some("WAZA_DEAIGASIRA"),
                    Self::WAZA_TOOTIKA => Some("WAZA_TOOTIKA"),
                    Self::WAZA_KAGENUI => Some("WAZA_KAGENUI"),
                    Self::WAZA_ddRARIATTO => Some("WAZA_ddRARIATTO"),
                    Self::WAZA_UTAKATANOARIA => Some("WAZA_UTAKATANOARIA"),
                    Self::WAZA_AISUHANMAA => Some("WAZA_AISUHANMAA"),
                    Self::WAZA_HURAWAAHIIRU => Some("WAZA_HURAWAAHIIRU"),
                    Self::WAZA_10MANBARIKI => Some("WAZA_10MANBARIKI"),
                    Self::WAZA_TIKARAWOSUITORU => Some("WAZA_TIKARAWOSUITORU"),
                    Self::WAZA_SOORAABUREEDO => Some("WAZA_SOORAABUREEDO"),
                    Self::WAZA_KONOHA => Some("WAZA_KONOHA"),
                    Self::WAZA_SUPOTTORAITO => Some("WAZA_SUPOTTORAITO"),
                    Self::WAZA_DOKUNOITO => Some("WAZA_DOKUNOITO"),
                    Self::WAZA_TOGISUMASU => Some("WAZA_TOGISUMASU"),
                    Self::WAZA_ASISUTOGIA => Some("WAZA_ASISUTOGIA"),
                    Self::WAZA_ZIGOKUDUKI => Some("WAZA_ZIGOKUDUKI"),
                    Self::WAZA_KAHUNDANGO => Some("WAZA_KAHUNDANGO"),
                    Self::WAZA_ANKAASYOTTO => Some("WAZA_ANKAASYOTTO"),
                    Self::WAZA_SAIKOFIIRUDO => Some("WAZA_SAIKOFIIRUDO"),
                    Self::WAZA_TOBIKAKARU => Some("WAZA_TOBIKAKARU"),
                    Self::WAZA_HONOONOMUTI => Some("WAZA_HONOONOMUTI"),
                    Self::WAZA_TUKEAGARU => Some("WAZA_TUKEAGARU"),
                    Self::WAZA_MOETUKIRU => Some("WAZA_MOETUKIRU"),
                    Self::WAZA_SUPIIDOSUWAPPU => Some("WAZA_SUPIIDOSUWAPPU"),
                    Self::WAZA_SUMAATOHOON => Some("WAZA_SUMAATOHOON"),
                    Self::WAZA_ZYOUKA => Some("WAZA_ZYOUKA"),
                    Self::WAZA_MEZAMERUDANSU => Some("WAZA_MEZAMERUDANSU"),
                    Self::WAZA_KOAPANISSYAA => Some("WAZA_KOAPANISSYAA"),
                    Self::WAZA_TOROPIKARUKIKKU => Some("WAZA_TOROPIKARUKIKKU"),
                    Self::WAZA_SAIHAI => Some("WAZA_SAIHAI"),
                    Self::WAZA_KUTIBASIKYANON => Some("WAZA_KUTIBASIKYANON"),
                    Self::WAZA_SUKEIRUNOIZU => Some("WAZA_SUKEIRUNOIZU"),
                    Self::WAZA_DORAGONHANMAA => Some("WAZA_DORAGONHANMAA"),
                    Self::WAZA_BUNMAWASU => Some("WAZA_BUNMAWASU"),
                    Self::WAZA_OORORABEERU => Some("WAZA_OORORABEERU"),
                    Self::WAZA_SYADOOAROOZUSUTORAIKU => Some("WAZA_SYADOOAROOZUSUTORAIKU"),
                    Self::WAZA_HAIPAADAAKUKURASSYAA => Some("WAZA_HAIPAADAAKUKURASSYAA"),
                    Self::WAZA_WADATUMINOSINFONIA => Some("WAZA_WADATUMINOSINFONIA"),
                    Self::WAZA_GAADHIANDEAROORA => Some("WAZA_GAADHIANDEAROORA"),
                    Self::WAZA_SITISEIDAKKONTAI => Some("WAZA_SITISEIDAKKONTAI"),
                    Self::WAZA_RAITONINGUSAAHURAIDO => Some("WAZA_RAITONINGUSAAHURAIDO"),
                    Self::WAZA_HONKIWODASUKOUGEKI => Some("WAZA_HONKIWODASUKOUGEKI"),
                    Self::WAZA_NAINEBORUBUUSUTO => Some("WAZA_NAINEBORUBUUSUTO"),
                    Self::WAZA_ORIZINZUSUUPAANOVHA => Some("WAZA_ORIZINZUSUUPAANOVHA"),
                    Self::WAZA_TORAPPUSHERU => Some("WAZA_TORAPPUSHERU"),
                    Self::WAZA_HURUURUKANON => Some("WAZA_HURUURUKANON"),
                    Self::WAZA_SAIKOFANGU => Some("WAZA_SAIKOFANGU"),
                    Self::WAZA_ZIDANDA => Some("WAZA_ZIDANDA"),
                    Self::WAZA_SYADOOBOON => Some("WAZA_SYADOOBOON"),
                    Self::WAZA_AKUSERUROKKU => Some("WAZA_AKUSERUROKKU"),
                    Self::WAZA_AKUABUREIKU => Some("WAZA_AKUABUREIKU"),
                    Self::WAZA_PURIZUMUREEZAA => Some("WAZA_PURIZUMUREEZAA"),
                    Self::WAZA_SYADOOSUTIIRU => Some("WAZA_SYADOOSUTIIRU"),
                    Self::WAZA_METEODORAIBU => Some("WAZA_METEODORAIBU"),
                    Self::WAZA_SYADOOREI => Some("WAZA_SYADOOREI"),
                    Self::WAZA_NAMIDAME => Some("WAZA_NAMIDAME"),
                    Self::WAZA_BIRIBIRITIKUTIKU => Some("WAZA_BIRIBIRITIKUTIKU"),
                    Self::WAZA_SIZENNOIKARI => Some("WAZA_SIZENNOIKARI"),
                    Self::WAZA_MARUTIATAKKU => Some("WAZA_MARUTIATAKKU"),
                    Self::WAZA_1000MANBORUTO => Some("WAZA_1000MANBORUTO"),
                    Self::WAZA_BIKKURIHEDDO => Some("WAZA_BIKKURIHEDDO"),
                    Self::WAZA_PURAZUMAFISUTO => Some("WAZA_PURAZUMAFISUTO"),
                    Self::WAZA_FOTONGEIZAA => Some("WAZA_FOTONGEIZAA"),
                    Self::WAZA_TENKOGASUMETUBOUNOHIKARI => Some("WAZA_TENKOGASUMETUBOUNOHIKARI"),
                    Self::WAZA_SANSYAINSUMASSYAA => Some("WAZA_SANSYAINSUMASSYAA"),
                    Self::WAZA_MUUNRAITOBURASUTAA => Some("WAZA_MUUNRAITOBURASUTAA"),
                    Self::WAZA_POKABOKAHURENDOTAIMU => Some("WAZA_POKABOKAHURENDOTAIMU"),
                    Self::WAZA_RAZIARUEZZISUTOOMU => Some("WAZA_RAZIARUEZZISUTOOMU"),
                    Self::WAZA_BUREIZINGUSOURUBIITO => Some("WAZA_BUREIZINGUSOURUBIITO"),
                    Self::WAZA_BATIBATIAKUSERU => Some("WAZA_BATIBATIAKUSERU"),
                    Self::WAZA_ZABUZABUSAAHU => Some("WAZA_ZABUZABUSAAHU"),
                    Self::WAZA_HUWAHUWAFOORU => Some("WAZA_HUWAHUWAFOORU"),
                    Self::WAZA_PIKAPIKASANDAA => Some("WAZA_PIKAPIKASANDAA"),
                    Self::WAZA_IKIIKIBABURU => Some("WAZA_IKIIKIBABURU"),
                    Self::WAZA_BIRIBIRIEREKI => Some("WAZA_BIRIBIRIEREKI"),
                    Self::WAZA_MERAMERABAAN => Some("WAZA_MERAMERABAAN"),
                    Self::WAZA_DOBADOBAOORA => Some("WAZA_DOBADOBAOORA"),
                    Self::WAZA_WARUWARUZOON => Some("WAZA_WARUWARUZOON"),
                    Self::WAZA_SUKUSUKUBONBAA => Some("WAZA_SUKUSUKUBONBAA"),
                    Self::WAZA_KOTIKOTIHUROSUTO => Some("WAZA_KOTIKOTIHUROSUTO"),
                    Self::WAZA_KIRAKIRASUTOOMU => Some("WAZA_KIRAKIRASUTOOMU"),
                    Self::WAZA_BUIBUIBUREIKU => Some("WAZA_BUIBUIBUREIKU"),
                    Self::WAZA_DABURUPANTHAA => Some("WAZA_DABURUPANTHAA"),
                    Self::WAZA_DAIWHOORU => Some("WAZA_DAIWHOORU"),
                    Self::WAZA_DAIMAKKUSUHOU => Some("WAZA_DAIMAKKUSUHOU"),
                    Self::WAZA_NERAIUTI => Some("WAZA_NERAIUTI"),
                    Self::WAZA_KURAITUKU => Some("WAZA_KURAITUKU"),
                    Self::WAZA_HOOBARU => Some("WAZA_HOOBARU"),
                    Self::WAZA_HAISUINOZIN => Some("WAZA_HAISUINOZIN"),
                    Self::WAZA_TAARUSYOTTO => Some("WAZA_TAARUSYOTTO"),
                    Self::WAZA_MAHOUNOKONA => Some("WAZA_MAHOUNOKONA"),
                    Self::WAZA_DORAGONAROO => Some("WAZA_DORAGONAROO"),
                    Self::WAZA_OTYAKAI => Some("WAZA_OTYAKAI"),
                    Self::WAZA_TAKOGATAME => Some("WAZA_TAKOGATAME"),
                    Self::WAZA_DENGEKIKUTIBASI => Some("WAZA_DENGEKIKUTIBASI"),
                    Self::WAZA_ERAGAMI => Some("WAZA_ERAGAMI"),
                    Self::WAZA_KOOTOTHENZI => Some("WAZA_KOOTOTHENZI"),
                    Self::WAZA_DAIBAAN => Some("WAZA_DAIBAAN"),
                    Self::WAZA_DAIWAAMU => Some("WAZA_DAIWAAMU"),
                    Self::WAZA_DAISANDAA => Some("WAZA_DAISANDAA"),
                    Self::WAZA_DAIATAKKU => Some("WAZA_DAIATAKKU"),
                    Self::WAZA_DAINAKKURU => Some("WAZA_DAINAKKURU"),
                    Self::WAZA_DAIHOROU => Some("WAZA_DAIHOROU"),
                    Self::WAZA_DAIAISU => Some("WAZA_DAIAISU"),
                    Self::WAZA_DAIASIDDO => Some("WAZA_DAIASIDDO"),
                    Self::WAZA_DAISUTORIIMU => Some("WAZA_DAISUTORIIMU"),
                    Self::WAZA_DAIJETTO => Some("WAZA_DAIJETTO"),
                    Self::WAZA_DAIFEARII => Some("WAZA_DAIFEARII"),
                    Self::WAZA_DAIDORAGUUN => Some("WAZA_DAIDORAGUUN"),
                    Self::WAZA_DAISAIKO => Some("WAZA_DAISAIKO"),
                    Self::WAZA_DAIROKKU => Some("WAZA_DAIROKKU"),
                    Self::WAZA_DAIAASU => Some("WAZA_DAIAASU"),
                    Self::WAZA_DAIAAKU => Some("WAZA_DAIAAKU"),
                    Self::WAZA_DAISOUGEN => Some("WAZA_DAISOUGEN"),
                    Self::WAZA_DAISUTIRU => Some("WAZA_DAISUTIRU"),
                    Self::WAZA_SOURUBIITO => Some("WAZA_SOURUBIITO"),
                    Self::WAZA_BODHIPURESU => Some("WAZA_BODHIPURESU"),
                    Self::WAZA_DEKOREESYON => Some("WAZA_DEKOREESYON"),
                    Self::WAZA_DORAMUATAKKU => Some("WAZA_DORAMUATAKKU"),
                    Self::WAZA_TORABASAMI => Some("WAZA_TORABASAMI"),
                    Self::WAZA_KAENBOORU => Some("WAZA_KAENBOORU"),
                    Self::WAZA_KYOZYUUZAN => Some("WAZA_KYOZYUUZAN"),
                    Self::WAZA_KYOZYUUDAN => Some("WAZA_KYOZYUUDAN"),
                    Self::WAZA_OORAGURUMA => Some("WAZA_OORAGURUMA"),
                    Self::WAZA_WAIDOBUREIKAA => Some("WAZA_WAIDOBUREIKAA"),
                    Self::WAZA_EDADUKI => Some("WAZA_EDADUKI"),
                    Self::WAZA_OOBAADORAIBU => Some("WAZA_OOBAADORAIBU"),
                    Self::WAZA_RINGOSAN => Some("WAZA_RINGOSAN"),
                    Self::WAZA_NYUUTON => Some("WAZA_NYUUTON"),
                    Self::WAZA_SOURUKURASSYU => Some("WAZA_SOURUKURASSYU"),
                    Self::WAZA_WANDAASUTIIMU => Some("WAZA_WANDAASUTIIMU"),
                    Self::WAZA_INOTINOSIZUKU => Some("WAZA_INOTINOSIZUKU"),
                    Self::WAZA_BUROKKINGU => Some("WAZA_BUROKKINGU"),
                    Self::WAZA_DOGEZATUKI => Some("WAZA_DOGEZATUKI"),
                    Self::WAZA_SUTAAASARUTO => Some("WAZA_SUTAAASARUTO"),
                    Self::WAZA_MUGENDAIBIIMU => Some("WAZA_MUGENDAIBIIMU"),
                    Self::WAZA_TETTEIKOUSEN => Some("WAZA_TETTEIKOUSEN"),
                    Self::WAZA_WAIDOFOOSU => Some("WAZA_WAIDOFOOSU"),
                    Self::WAZA_AIANROORAA => Some("WAZA_AIANROORAA"),
                    Self::WAZA_SUKEIRUSYOTTO => Some("WAZA_SUKEIRUSYOTTO"),
                    Self::WAZA_METEOBIIMU => Some("WAZA_METEOBIIMU"),
                    Self::WAZA_SHERUAAMUZU => Some("WAZA_SHERUAAMUZU"),
                    Self::WAZA_MISUTOBAASUTO => Some("WAZA_MISUTOBAASUTO"),
                    Self::WAZA_GURASUSURAIDAA => Some("WAZA_GURASUSURAIDAA"),
                    Self::WAZA_RAIZINGUBORUTO => Some("WAZA_RAIZINGUBORUTO"),
                    Self::WAZA_DAITINOHADOU => Some("WAZA_DAITINOHADOU"),
                    Self::WAZA_HAIYORUITIGEKI => Some("WAZA_HAIYORUITIGEKI"),
                    Self::WAZA_SITTONOHONOO => Some("WAZA_SITTONOHONOO"),
                    Self::WAZA_UPPUNBARASI => Some("WAZA_UPPUNBARASI"),
                    Self::WAZA_PORUTAAGAISUTO => Some("WAZA_PORUTAAGAISUTO"),
                    Self::WAZA_HUSYOKUGASU => Some("WAZA_HUSYOKUGASU"),
                    Self::WAZA_KOOTINGU => Some("WAZA_KOOTINGU"),
                    Self::WAZA_KUIKKUTAAN => Some("WAZA_KUIKKUTAAN"),
                    Self::WAZA_TORIPURUAKUSERU => Some("WAZA_TORIPURUAKUSERU"),
                    Self::WAZA_DABURUUINGU => Some("WAZA_DABURUUINGU"),
                    Self::WAZA_NESSANODAITI => Some("WAZA_NESSANODAITI"),
                    Self::WAZA_ZYANGURUHIIRU => Some("WAZA_ZYANGURUHIIRU"),
                    Self::WAZA_ANKOKUKYOUDA => Some("WAZA_ANKOKUKYOUDA"),
                    Self::WAZA_SUIRYUURENDA => Some("WAZA_SUIRYUURENDA"),
                    Self::WAZA_SANDAAPURIZUN => Some("WAZA_SANDAAPURIZUN"),
                    Self::WAZA_DORAGONENAZII => Some("WAZA_DORAGONENAZII"),
                    Self::WAZA_ITETUKUSISEN => Some("WAZA_ITETUKUSISEN"),
                    Self::WAZA_MOEAGARUIKARI => Some("WAZA_MOEAGARUIKARI"),
                    Self::WAZA_RAIMEIGERI => Some("WAZA_RAIMEIGERI"),
                    Self::WAZA_BURIZAADORANSU => Some("WAZA_BURIZAADORANSU"),
                    Self::WAZA_ASUTORARUBITTO => Some("WAZA_ASUTORARUBITTO"),
                    Self::WAZA_BUKIMINAZYUMON => Some("WAZA_BUKIMINAZYUMON"),
                    Self::WAZA_FEITARUKUROO => Some("WAZA_FEITARUKUROO"),
                    Self::WAZA_BARIAARASSYU => Some("WAZA_BARIAARASSYU"),
                    Self::WAZA_PAWAASIHUTO => Some("WAZA_PAWAASIHUTO"),
                    Self::WAZA_GANSEKIAKKUSU => Some("WAZA_GANSEKIAKKUSU"),
                    Self::WAZA_HARUNOARASI => Some("WAZA_HARUNOARASI"),
                    Self::WAZA_SINPINOTIKARA => Some("WAZA_SINPINOTIKARA"),
                    Self::WAZA_DAIHUNGEKI => Some("WAZA_DAIHUNGEKI"),
                    Self::WAZA_WHEEBUTAKKURU => Some("WAZA_WHEEBUTAKKURU"),
                    Self::WAZA_KUROROBURASUTO => Some("WAZA_KUROROBURASUTO"),
                    Self::WAZA_HYOUZANOROSI => Some("WAZA_HYOUZANOROSI"),
                    Self::WAZA_SYOURINOMAI => Some("WAZA_SYOURINOMAI"),
                    Self::WAZA_BUTIKAMASI => Some("WAZA_BUTIKAMASI"),
                    Self::WAZA_DOKUBARISENBON => Some("WAZA_DOKUBARISENBON"),
                    Self::WAZA_OORAUINGU => Some("WAZA_OORAUINGU"),
                    Self::WAZA_URAMITURAMI => Some("WAZA_URAMITURAMI"),
                    Self::WAZA_TATEKOMORU => Some("WAZA_TATEKOMORU"),
                    Self::WAZA_3BONNOYA => Some("WAZA_3BONNOYA"),
                    Self::WAZA_HYAKKIYAKOU => Some("WAZA_HYAKKIYAKOU"),
                    Self::WAZA_HIKENTIENAMI => Some("WAZA_HIKENTIENAMI"),
                    Self::WAZA_KOGARASIARASI => Some("WAZA_KOGARASIARASI"),
                    Self::WAZA_KAMINARIARASI => Some("WAZA_KAMINARIARASI"),
                    Self::WAZA_NESSANOARASI => Some("WAZA_NESSANOARASI"),
                    Self::WAZA_MIKADUKINOINORI => Some("WAZA_MIKADUKINOINORI"),
                    Self::WAZA_BUREIBUTYAAZI => Some("WAZA_BUREIBUTYAAZI"),
                    Self::WAZA_TERABAASUTO => Some("WAZA_TERABAASUTO"),
                    Self::WAZA_SUREDDOTORAPPU => Some("WAZA_SUREDDOTORAPPU"),
                    Self::WAZA_KAKATOOTOSI => Some("WAZA_KAKATOOTOSI"),
                    Self::WAZA_OHAKAMAIRI => Some("WAZA_OHAKAMAIRI"),
                    Self::WAZA_RUMINAKORIZYON => Some("WAZA_RUMINAKORIZYON"),
                    Self::WAZA_ITTYOUAGARI => Some("WAZA_ITTYOUAGARI"),
                    Self::WAZA_JETTOPANTI => Some("WAZA_JETTOPANTI"),
                    Self::WAZA_HABANEROEKISU => Some("WAZA_HABANEROEKISU"),
                    Self::WAZA_HOIIRUSUPIN => Some("WAZA_HOIIRUSUPIN"),
                    Self::WAZA_NEZUMIZAN => Some("WAZA_NEZUMIZAN"),
                    Self::WAZA_AISUSUPINAA => Some("WAZA_AISUSUPINAA"),
                    Self::WAZA_KYOKENTOTUGEKI => Some("WAZA_KYOKENTOTUGEKI"),
                    Self::WAZA_SAIKINOINORI => Some("WAZA_SAIKINOINORI"),
                    Self::WAZA_SIODUKE => Some("WAZA_SIODUKE"),
                    Self::WAZA_TORIPURUDAIBU => Some("WAZA_TORIPURUDAIBU"),
                    Self::WAZA_KARUKANSUPIN => Some("WAZA_KARUKANSUPIN"),
                    Self::WAZA_UTUSIE => Some("WAZA_UTUSIE"),
                    Self::WAZA_MIWOKEZURU => Some("WAZA_MIWOKEZURU"),
                    Self::WAZA_DOGEZAN => Some("WAZA_DOGEZAN"),
                    Self::WAZA_TORIKKUHURAWAA => Some("WAZA_TORIKKUHURAWAA"),
                    Self::WAZA_HUREASONGU => Some("WAZA_HUREASONGU"),
                    Self::WAZA_AKUASUTEPPU => Some("WAZA_AKUASUTEPPU"),
                    Self::WAZA_REIZINGUBURU => Some("WAZA_REIZINGUBURU"),
                    Self::WAZA_GOORUDORASSYU => Some("WAZA_GOORUDORASSYU"),
                    Self::WAZA_SAIKOBUREIDO => Some("WAZA_SAIKOBUREIDO"),
                    Self::WAZA_HAIDOROSUTIIMU => Some("WAZA_HAIDOROSUTIIMU"),
                    Self::WAZA_KATASUTOROFII => Some("WAZA_KATASUTOROFII"),
                    Self::WAZA_AKUSERUBUREIKU => Some("WAZA_AKUSERUBUREIKU"),
                    Self::WAZA_INAZUMADORAIBU => Some("WAZA_INAZUMADORAIBU"),
                    Self::WAZA_SIPPOKIRI => Some("WAZA_SIPPOKIRI"),
                    Self::WAZA_SAMUIGYAGU => Some("WAZA_SAMUIGYAGU"),
                    Self::WAZA_OKATADUKE => Some("WAZA_OKATADUKE"),
                    Self::WAZA_YUKIGESIKI => Some("WAZA_YUKIGESIKI"),
                    Self::WAZA_TOBITUKU => Some("WAZA_TOBITUKU"),
                    Self::WAZA_KUSAWAKE => Some("WAZA_KUSAWAKE"),
                    Self::WAZA_HIYAMIZU => Some("WAZA_HIYAMIZU"),
                    Self::WAZA_HAIPAADORIRU => Some("WAZA_HAIPAADORIRU"),
                    Self::WAZA_TUINBIIMU => Some("WAZA_TUINBIIMU"),
                    Self::WAZA_HUNDONOKOBUSI => Some("WAZA_HUNDONOKOBUSI"),
                    Self::WAZA_AAMAAKYANON => Some("WAZA_AAMAAKYANON"),
                    Self::WAZA_MUNENNOTURUGI => Some("WAZA_MUNENNOTURUGI"),
                    Self::WAZA_DENKOUSOUGEKI => Some("WAZA_DENKOUSOUGEKI"),
                    Self::WAZA_GIGAHANMAA => Some("WAZA_GIGAHANMAA"),
                    Self::WAZA_HOUHUKU => Some("WAZA_HOUHUKU"),
                    Self::WAZA_AKUAKATTAA => Some("WAZA_AKUAKATTAA"),
                    Self::WAZA_MOOBIRUKOUGEKI => Some("WAZA_MOOBIRUKOUGEKI"),
                    Self::WAZA_MOOBIRUKOUGEKI2 => Some("WAZA_MOOBIRUKOUGEKI2"),
                    Self::WAZA_MOOBIRUKOUGEKI3 => Some("WAZA_MOOBIRUKOUGEKI3"),
                    Self::WAZA_MOOBIRUKOUGEKI4 => Some("WAZA_MOOBIRUKOUGEKI4"),
                    Self::WAZA_MOOBIRUKOUGEKI5 => Some("WAZA_MOOBIRUKOUGEKI5"),
                    _ => None,
                }
            }
        }
        impl core::fmt::Debug for WazaID {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                if let Some(name) = self.variant_name() {
                    f.write_str(name)
                } else {
                    f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
                }
            }
        }
        impl<'a> flatbuffers::Follow<'a> for WazaID {
            type Inner = Self;
            #[inline]
            unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
                let b = flatbuffers::read_scalar_at::<u16>(buf, loc);
                Self(b)
            }
        }

        impl flatbuffers::Push for WazaID {
            type Output = WazaID;
            #[inline]
            unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
                flatbuffers::emplace_scalar::<u16>(dst, self.0);
            }
        }

        impl flatbuffers::EndianScalar for WazaID {
            type Scalar = u16;
            #[inline]
            fn to_little_endian(self) -> u16 {
                self.0.to_le()
            }
            #[inline]
            #[allow(clippy::wrong_self_convention)]
            fn from_little_endian(v: u16) -> Self {
                let b = u16::from_le(v);
                Self(b)
            }
        }

        impl<'a> flatbuffers::Verifiable for WazaID {
            #[inline]
            fn run_verifier(
                v: &mut flatbuffers::Verifier,
                pos: usize,
            ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
                use self::flatbuffers::Verifiable;
                u16::run_verifier(v, pos)
            }
        }

        impl flatbuffers::SimpleToVerifyInSlice for WazaID {}
    } // pub mod common
} // pub mod pml
